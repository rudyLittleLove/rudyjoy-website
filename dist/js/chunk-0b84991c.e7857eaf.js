(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-0b84991c"],{"09d7":function(n,s,a){"use strict";a.r(s);var t=function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("reactive-panel",{scopedSlots:n._u([{key:"catalog",fn:function(){return[a("h3",{staticClass:"title"},[n._v("文章目录")]),a("ul",{staticClass:"blogs-ul"},n._l(n.catalogs,(function(s,t){return a("li",{key:t,class:{active:n.activeLabel===s.label}},[a("span",{on:{click:function(a){return n.targetHandle(s,t)}}},[n._v(n._s(t+1)+". "+n._s(s.label))])])})),0)]},proxy:!0},{key:"content",fn:function(){return[a("iframe",{ref:"iframe"})]},proxy:!0}])})},p=[],o=a("0ae2"),e={components:{ReactivePanel:o["a"]},data:function(){return{activeLabel:"",catalogs:[{label:"只需一个DOM，纯CSS实现线性跑马灯特效",html:a("1268")},{label:"前端如何理解正则-由浅入深的学习",html:a("628b")},{label:"DOM property 和 attribute 的区别详解",html:a("4f65")},{label:"CSS 预编译语言 变量全局引用方式 vue-cli@3.0 stylus/sass/less 使用方法",html:a("6903")},{label:"JavaScript 有哪些数据类型 以及获取与判断的方法",html:a("b40e")},{label:"进入debugger调试时, this 输出 undefined的问题，箭头函数与babel造成的调试不便",html:a("e497")},{label:"JavaScript 多线程处理计算密集型或高延迟的任务时，避免页面卡顿的方法",html:a("930f")},{label:"Vue-router 不允许导航到当前位置（'/path'）错误原因以及修复方式",html:a("fdfc")},{label:"CSS制作类似 Photoshop 模糊蒙版效果",html:a("db89")},{label:"开发小技巧之调试DOM",html:a("970d")},{label:"JavaScript 数组高性能去重 千万级数据去重效率测试 高效去重详解",html:a("1042")},{label:"vscode 自定义编辑器样式 CSS修改",html:a("9fe5")},{label:"vue中 iframe 引入 本地静态html文件，vue-cli2与vue-cli3引用的差异",html:a("feb0")},{label:"canvas 绘制特效 小球连接线动画",html:a("da3f")},{label:"使用canvas 如何绘制形状并支持拖拽、缩放功能",html:a("a484")},{label:"elementUI el-form 组件 验证 提示不能为空，以及验证不生效的详细原因",html:a("8dd4")},{label:"vue 组件选项的推荐顺序 与 自动排序",html:a("c804")},{label:"删除列表中一个DOM，其余DOM动态过渡的方法",html:a("5c0e")},{label:"深入理解CSS之 如何使子元素撑宽 设置了 block 的父元素",html:a("9f1c")},{label:"遮罩覆盖的DOM，如果触发点击 等一系列事件",html:a("4838")},{label:"iView DatePicker 组件 选择年_月 下拉框异常收缩",html:a("d95f")}],html:""}},beforeRouteUpdate:function(n,s,a){this.activeHandle(n.query.label),a()},beforeRouteEnter:function(n,s,a){a()},watch:{html:function(n){var s=this.$refs.iframe.contentWindow.document;s.documentElement.innerHTML=n,this.addIframeStyle(s.documentElement,"\n        ::-webkit-scrollbar{\n          width: 7px;\n          height: 7px;\n        }\n        ::-webkit-scrollbar-thumb{\n          background-color: rgba(255, 255, 255, .2);\n          border-radius: 3px;\n        }\n        body { color: #eeeeee }\n        pre>code { background-color: rgba(255,255,255,.1) }\n        h1:after, h2:after { border-color: rgba(255, 255, 255, .8) }\n      "),s.body.scrollTop=0}},mounted:function(){this.activeHandle(this.$route.query.label)},methods:{activeHandle:function(n){var s=this.catalogs.filter((function(s){return s.label===n}))[0]||this.catalogs[0];this.activeLabel=s.label,this.html=s.html},targetHandle:function(n){this.$router.push({name:"blogs",query:{label:n.label}})},addIframeStyle:function(n,s){var a=document.createElement("style");a.type="text/css",a.styleSheet?a.styleSheet.cssText=s:a.innerHTML=s,n.getElementsByTagName("head")[0].appendChild(a)}}},c=e,l=(a("6398"),a("2877")),u=Object(l["a"])(c,t,p,!1,null,"daa4ae42",null);s["default"]=u.exports},"0ae2":function(n,s,a){"use strict";var t=function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("div",{staticClass:"reactive-panel"},[a("div",{staticClass:"reactive-catalog",class:{hide:n.hideMenu},on:{click:function(s){n.hideMenu=!n.hideMenu}}},[n._t("catalog")],2),a("div",{staticClass:"content"},[n._t("content")],2)])},p=[],o={data:function(){return{hideMenu:!0}}},e=o,c=(a("1d16"),a("2877")),l=Object(c["a"])(e,t,p,!1,null,"9ea6de56",null);s["a"]=l.exports},1042:function(n,s){var a='<!DOCTYPE html> <html> <head> <meta charset="utf-8"> <meta name="viewport" content="width=device-width,initial-scale=1"> <title>JavaScript 数组高性能去重 千万级数据去重效率测试 高效去重详解</title> <link rel="stylesheet" href="https://stackedit.io/style.css"/> </head> <body class="stackedit"> <div class="stackedit__html"><p></p><div class="toc"><h3>JavaScript 数组高性能去重 千万级数据去重效率测试 高效去重详解</h3><ul><li><a href="#_1">引言</a></li><li><a href="#_3">测试前提</a></li><li><a href="#_7">测试准备</a></li><li><a href="#_35">测试效率</a></li><ul><li><a href="#1for__splice__flag_36">1.双重for循环 + splice / flag</a></li><li><a href="#2for__indexOf__includes_97">2.for 循环加 indexOf / includes</a></li><li><a href="#3filter__indexOf_123">3.filter 加 indexOf</a></li><li><a href="#4sort_144">4.使用sort排序后去重</a></li><li><a href="#5sort__reduce_168">5.sort 加 reduce</a></li><li><a href="#6keyhasOwnProperty_193">6.利用对象key唯一(hasOwnProperty)</a></li><li><a href="#7Map_224">7.使用Map数据结构</a></li><li><a href="#8Set_250">8.使用Set</a></li></ul><li><a href="#_268">总结推荐</a></li><li><a href="#_271">循环效率排行</a></li><li><a href="#_296">结语</a></li></ul></div><p></p> <h1><a id="_1"></a>引言</h1> <p>  网上能搜出一堆关于数据去重的例子，以及测试效率耗时都不尽相同。然而却没给出必要的解释，为什么不同人测试出来的效率不一样呢？本文就详细通过大量测试探索一下，去重效率损耗主要在哪儿？不一样的数据为什么用不同去重方案测试效率耗时不一样?给千万级的数据去重该选用哪种去重方法?</p> <h1><a id="_3"></a>测试前提</h1> <p>1.测试工具 <code>chrome浏览器</code><br> 2.测试电脑配置 <code>小米笔记本</code> <code>i7-8500U</code> <code>16GB</code><br> 3.系统 <code>windows10</code> <code>64位</code></p> <h1><a id="_7"></a>测试准备</h1> <p>  分别创建一个1万、10万、100万、1000万的简单数据，这里我们不取随机数，创建固定重复的量的数据（分别重复20%，50%，80%）。并使重复数据平均分布，测试各种常用去重方法效率。</p> <pre><code class="prism language-javascript"><span class="token comment">// distinctTest.js</span>\n<span class="token keyword">var</span> myriad <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// 代码就写一个1万的例子，避免篇幅过长。</span>\n<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  myriad<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>item2<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> i <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">&lt;</span> item <span class="token operator">||</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token comment">// 可在此处添加十万、百万.. 数据</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">function</span> <span class="token function">distinct</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// 此处为去重代码</span>\n  <span class="token keyword">return</span> arr<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nmyriad<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> length <span class="token operator">=</span> item<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`数据长度：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">"耗时"</span><span class="token punctuation">)</span>\n  <span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token function">distinct</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">"耗时"</span><span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`数据重复量：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>length <span class="token operator">-</span> newArr<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'————————————————————————————————————————————\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre> <h1><a id="_35"></a>测试效率</h1> <h2><a id="1for__splice__flag_36"></a>1.双重for循环 + splice / flag</h2> <p><strong>方法解释：</strong><br>   第一种在元素重复时删除重复的元素，剩余的元素就是去重后的数据。<code>splice</code>会改变原数组，如果不想更改，可以用<code>concat</code>复制一份，如：<code>var newArr = arr.concat()</code>不传入数据相当于复刻一份。<br>   第二种就是用flag标记，新数组中存在相同数据就不往新数组插入当前数据。<br> <strong>去重代码：</strong></p> <pre><code class="prism language-javascript"><span class="token comment">// 使用splice删除</span>\n<span class="token keyword">function</span> <span class="token function">distinct</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i2 <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i2 <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i2<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> arr<span class="token punctuation">[</span>i2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n        arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除重复的数据</span>\n        i2<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// 删除数据后index需要前移一位</span>\n        len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 删除数据后重新获取数组长度</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> arr<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 使用flag标记</span>\n<span class="token keyword">function</span> <span class="token function">distinct</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">true</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i2 <span class="token operator">&lt;</span> newArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i2<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> newArr<span class="token punctuation">[</span>i2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n        flag <span class="token operator">=</span> <span class="token boolean">false</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    flag <span class="token operator">&amp;&amp;</span> newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> newArr<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre> <p><strong>测试结果：</strong><br> <code>splice</code><br> <img src="https://img-blog.csdnimg.cn/20200113220331372.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1ZHlfemhvdQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> <code>flag</code></p> <pre><code class="prism language-bash"><span class="token variable"><span class="token variable">`</span>数据长度：10000<span class="token variable">`</span></span>\t\t\t <span class="token operator">|</span> <span class="token variable"><span class="token variable">`</span>数据长度：100000<span class="token variable">`</span></span>\t\t \t<span class="token operator">|</span> <span class="token variable"><span class="token variable">`</span>数据长度：1000000<span class="token variable">`</span></span>\n数据重复量：1999 \t\t\t <span class="token operator">|</span> 数据重复量：19999 \t\t\t<span class="token operator">|</span> 页面崩溃\n耗时: 98.783935546875ms\t\t <span class="token operator">|</span> 耗时: 9475.10009765625ms \t<span class="token operator">|</span> \n——————————————————————————\t <span class="token operator">|</span> —————————————————————————— \t<span class="token operator">|</span>\n数据重复量：4999 \t\t\t <span class="token operator">|</span> 数据重复量：49999 \t\t\t<span class="token operator">|</span>\n耗时: 46.31298828125ms\t\t <span class="token operator">|</span> 耗时: 3659.33984375ms\t\t<span class="token operator">|</span> \n——————————————————————————\t <span class="token operator">|</span> ——————————————-———————————\t<span class="token operator">|</span> \n数据重复量：7999 \t\t\t <span class="token operator">|</span> 数据重复量：79999 \t\t\t<span class="token operator">|</span> \n耗时: 7.68310546875ms\t\t <span class="token operator">|</span> 耗时: 587.00927734375ms\t\t<span class="token operator">|</span> \n</code></pre> <p><strong>结果描述：</strong><br>   双重循环去重，使用<code>splice</code>，会更改原来数组数据，在数据不到1万时，处理效率还可接受。达到10万时需要10多秒，达到100万页面直接崩溃。使用<code>flag</code>判断稍快于上方，而且重复数据越多，耗时差异越大。</p> <p><strong>方法效率分析：</strong><br>   <strong>1</strong>.<code>splice</code>删除数据元素，100万条数据都删除，耗时在8秒（8000ms）左右，波动幅度较大，根据重复量多少，效率损耗有明显差异。<br>   <strong>2</strong>. 1万条平均分布的数据，重复20%，需要循环<strong>3千多万次</strong>，重复50%，需要循环<strong>1千多万次</strong>，重复80%，需要循环<strong>2百多万次</strong>。而十万条数据在此之上<strong>翻了100倍</strong>，从以上1万数据与10万数据耗时也能看出，时长比超过<strong>100倍</strong>。因循环次数的急剧增多，耗时也100倍增长。</p> <h2><a id="2for__indexOf__includes_97"></a>2.for 循环加 indexOf / includes</h2> <p><strong>方法解释：</strong><br>   此方法通过判断新数组中是否存在<strong>当前循环到的元素</strong>，如果没有就把<strong>当前循环到的元素</strong>插入新数组。</p> <p><strong>去重代码：</strong></p> <pre><code class="prism language-javascript"><span class="token keyword">function</span> <span class="token function">distinct</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> newArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    newArray<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> newArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token comment">// !newArray.includes(arr[i]) &amp;&amp; newArray.push(arr[i])</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> newArray<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre> <p><strong>测试结果：</strong><br> <img src="https://img-blog.csdnimg.cn/20200113220349669.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1ZHlfemhvdQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> <strong>结果描述：</strong><br>   <code>for</code> 也可以替换为 <code>for of</code>，虽然<code>for of</code>循环比<code>for</code>慢，但是<code>for of</code>直接返回元素本身，而不需要通过下标取数组数据，<code>for in</code>就不需要考虑了，同样返回下标，却比<code>for</code>慢了将近1万倍。不过<code>for in</code>可以遍历对象，这是其他循环比不了的。</p> <p>  处理1万以内数据效率很高，10万条时，就需要几秒了。百万页面虽未直接崩溃，等待几分钟还未出结果，不过比上面双重循环效率高。<code>indexOf</code>与<code>includes</code>效率相同，只是返回值不一样。考虑到<code>indexOf</code>兼容性强于<code>includes</code>，推荐使用<code>indexOf</code>，当然写法上<code>includes</code>更加简洁。<strong>其实这种方法和上方的双重循环是一样的</strong>，因为<code>indexOf</code>和<code>includes</code>都是内部循环从数据下标0处开始循环查询，<strong>数据越靠数组后方，查询耗时越长</strong>，因为循环次数越多。</p> <p><strong>方法效率分析：</strong><br>   <strong>1</strong>.经测试，<code>indexOf</code>和<code>includes</code>效率比的<code>for</code>循环判断值快了一倍左右，所以虽然实际上都是双重循环，但是整体效率高于双重<code>for</code>循环。<br>   <strong>2</strong>.即使在千万级的数据下循环加<code>push</code>耗时也不多，<strong>2千万次</strong>循环加<code>push</code>耗时不超过200毫秒。<br>   <strong>3</strong>.主要耗时还是在<code>indexOf</code>与<code>includes</code>判断数据是否重复这一点上，千万级的数据，如果要判断数据是否重复，不重复的数据要从头循环到尾，耗时非常明显。重复数据越少，耗时越多。</p> <h2><a id="3filter__indexOf_123"></a>3.filter 加 indexOf</h2> <p><strong>方法解释：</strong><br>   通过<code>indexOf</code>判断此元素第一次出现的位置与当前的元素的<code>index</code>是否相同来去重。</p> <p><strong>去重代码：</strong></p> <pre><code class="prism language-javascript"><span class="token keyword">function</span> <span class="token function">distinct</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">===</span> i\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre> <p><strong>测试结果：</strong><br> <img src="https://img-blog.csdnimg.cn/20200113220423323.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1ZHlfemhvdQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> <strong>结果描述：</strong><br>   在效率稍上低于<code>for</code>加<code>indexOf</code>的方法，数据量重复较少的情况与<code>for</code>\t加<code>indexOf</code>处理效率上差不多，但数据量多的时候效率就有了明显的差别，同样在千万级的数据下无法处理。</p> <p><strong>方法效率分析：</strong><br>   <strong>1</strong>.此方法本质上与上述两种一样，都是双重循环，同样使用了<code>indexOf</code>，主要的效率损耗就在个上面。<br>   <strong>2</strong>.经测试<code>filter</code>都返回<code>false</code>比都返回<code>true</code>要快，也就是<strong>重复越多越快</strong>，这就引起我们猜想，返回<code>true</code>类似于<code>push</code>了新数据到新数组。<br>   <strong>3</strong>.重复量越大，与<code>for</code>加<code>indexOf</code>去重差距就越明显，数组<code>filter</code>方法效率明显要低于<code>for</code>循环（最后有纯粹的循环效率耗时对比）。</p> <h2><a id="4sort_144"></a>4.使用sort排序后去重</h2> <p><strong>方法解释：</strong><br>   利用<code>sort</code>排序，使相同元素相邻排列，通过判断<strong>当前</strong>下标与<strong>前一个</strong>下标元素是否相同从而插入新数据。我见过有人用<strong>当前</strong>下标与<strong>下一个</strong>下标元素判断，但是那种方法最后一个元素是<code>undefined</code>时，会造成<code>undefined</code>无法被判断为不重复的元素，要解决这个问题就会造成多的判断，以至于效率下降。<code>sort</code>排序会更改原数组，如果不想更改可以用<code>concat()</code>拷贝一份，如：<code>var newArr = arr.concat()</code>原为数组拼接，不传入数据相当于复刻一份。</p> <p><strong>去重代码：</strong></p> <pre><code class="prism language-javascript"><span class="token keyword">function</span> <span class="token function">distinct</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span>\n  <span class="token keyword">var</span> arrry <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      arrry<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> arrry<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre> <p><strong>测试结果：</strong><br> <img src="https://img-blog.csdnimg.cn/20200113220436766.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1ZHlfemhvdQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> <strong>结果描述：</strong><br>   使用<code>sort</code>排序后去重效率有了显著的提升，数据1百万也能在1秒内处理完。即使1千万也能勉强处理。不过当前配置电脑处理超过2千万的数据，会进入断点提示<strong>Paused before potential out-of-memory crash（在潜在的内存不足崩溃之前暂停）</strong>。在去重<strong>数值</strong>类型数据上<code>sort</code>排序去重效率有很大提升。<br> <strong>方法效率分析：</strong><br>   <strong>1</strong>.利用了<code>sort</code>排序，主要计算时间就在排序上。如果是顺序的数值类型数组，在<code>sort</code>排序上所需时间就极少，经测试，这种数据即使1千万条、重复20%，也能在1秒内处理完。<br>   <strong>2</strong>. 这种方法也能去重其他类型数据，只需要把<code>sort</code>排序传入的<strong>函数</strong>去掉就行。不过在数据处理的效率上就比较差了，10万数据时就已经接近1秒钟了，100万也只能勉强处理，千万就需要用<strong>分钟</strong>计算了。</p> <h2><a id="5sort__reduce_168"></a>5.sort 加 reduce</h2> <p><strong>方法解释：</strong><br>   使用<code>sort</code>排序后，利用<code>reduce</code>特性，对比新数组<strong>最后一个元素</strong>与循环到的<strong>当前元素</strong>是否相等，不相等就插入数据。</p> <p><strong>去重代码：</strong></p> <pre><code class="prism language-javascript"><span class="token keyword">function</span> <span class="token function">distinct</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>newArr<span class="token punctuation">,</span> current<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>newArr<span class="token punctuation">[</span>newArr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!==</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> newArr<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre> <p><strong>测试结果：</strong><br> <img src="https://img-blog.csdnimg.cn/20200113220456671.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1ZHlfemhvdQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> <strong>结果描述：</strong><br>   此方法与上面一种方法效率相似，数据较小时（10万以内），差异并不大，数据较大时能看出差异。同样当前配置电脑处理超过2千万的数据，会进入断点提示<strong>Paused before potential out-of-memory crash（在潜在的内存不足崩溃之前暂停）</strong>。</p> <p><strong>方法效率分析：</strong><br>   <strong>1</strong>.与上一个方法一样利用了<code>sort</code>排序，主要计算时间就在排序上。<br>   <strong>2</strong>.此方法与上面相比差异不大，虽然<code>reduce</code>循环比<code>for</code>循环慢（后面有纯粹循环耗时排行），但在取值对比上面稍快。</p> <h2><a id="6keyhasOwnProperty_193"></a>6.利用对象key唯一(hasOwnProperty)</h2> <p><strong>方法解释：</strong><br>   对象key具有唯一性，通过给对象key赋值、取值判断元素是否重复，不重复就<code>push</code>数据到新数组，重复就跳过。</p> <p><strong>去重代码：</strong></p> <pre><code class="prism language-javascript"><span class="token keyword">function</span> <span class="token function">distinct</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> newArrry <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// obj.hasOwnProperty(arr[i]) 也可以</span>\n      newArrry<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n      obj<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> newArrry<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre> <p><strong>测试结果：</strong><br> <img src="https://img-blog.csdnimg.cn/20200113220530894.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1ZHlfemhvdQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p> <p><strong>结果描述：</strong><br>   此方法计算速度还不错，与<code>sort</code>排序后去重效率相当，同样是超过2千万数据后会进入断点（同上）。不过对象属性不重复有比较大的问题就是<br>   1.<code>true</code> 和<code>"true"</code>在设为对象key时，值是一样的。（解决方法 使用 <code>typeof</code>+<code>key</code>）<br>   2.无法设置复杂类型数据为key，结果key只能为<code>[object Object]</code>（解决方法 使用 <code>typeof</code>+<code>toString</code>）<br> 处理的方法过多会造成效率的下降，因此不再此方法上多下功夫，如果数据类型明确，也可以使用这种方法。</p> <p><strong>方法效率分析：</strong><br>   <strong>1</strong>.对象属性的存取需要消耗比较多的时间(利用<code>hasOwnProperty</code>判断属性是否存在效率也是一样)。<br>   <strong>2</strong>.剩余少部分时间消耗在循环和<code>push</code>数据上。<br>   <strong>3</strong>.数据是短字符串的情况下，此方法效率还能提升<strong>5倍</strong>左右。</p> <h2><a id="7Map_224"></a>7.使用Map数据结构</h2> <p><strong>方法解释：</strong><br>   与对象<code>key</code>唯一去重方法一致，也是通过<code>get</code>、<code>set</code>数据判断元素是否重复，也可以使用<code>has</code>判断。</p> <p><strong>去重代码：</strong></p> <pre><code class="prism language-javascript"><span class="token keyword">function</span> <span class="token function">distinct</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> newArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> newMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>newMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// newMap.has(arr[i])</span>\n      newMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      newArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> newArray<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre> <p><strong>测试结果：</strong><br> <img src="https://img-blog.csdnimg.cn/20200113220547686.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1ZHlfemhvdQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> <strong>结果描述：</strong><br>   利用Map数据结构不重复，处理效率还不错，目前效率最高的一种去重方案，不会打乱数据，不会因数据类型问题不好处理。目前只测试到1千万数据，2千万开始本机配置极易进入断点（同上）</p> <p><strong>方法效率分析：</strong><br>   <strong>1</strong>.此方法时间也主要损耗在<code>Map</code>数据的存与取上面，不过效率比对象存取要高。</p> <h2><a id="8Set_250"></a>8.使用Set</h2> <p><strong>方法解释：</strong><br>   最简单的方法，通过<code>new</code> 一个 <code>Set</code>对象（只能存不同数据），放入重复数据的数组，再解构出来。</p> <p><strong>去重代码：</strong></p> <pre><code class="prism language-javascript"><span class="token keyword">function</span> <span class="token function">distinct</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre> <p><strong>测试结果：</strong><br> <img src="https://img-blog.csdnimg.cn/2020011322060891.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1ZHlfemhvdQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> <strong>结果描述：</strong><br>   <code>es6</code> 提供的<code>Set</code>使用方法最简单，达到的效果也很喜人，目前效率与利用<code>Map</code>去重效率相当，不过考虑到<code>Set</code>兼容性，只能兼容到<code>IE11</code>，并且<code>IE11</code>不支持<code>Array.from</code>，以及解构。在不考虑IE兼容的情况下推荐使用<code>Set</code>。</p> <p><strong>方法效率分析：</strong><br>   <code>Set</code>去重方法，全部由<code>Set</code>数据结构不重复特性处理，没有具体耗时地方，整个方法就是耗时处。</p> <h1><a id="_268"></a>总结推荐</h1> <p>  <strong>1.首先在不考虑IE兼容的情况下推荐使用<code>Set</code>去重</strong>，可以看到每个去重方法具体效率都跟数据量、重复量相关。当然有的也跟数据类型相关，比如使用<code>sort</code>排序去重，<strong>2.如果是有序的数值，<code>sort</code>排序去重无疑是最快的</strong>，兼容性也很好。如果能确定需要<strong>3.去重的数据类型是简单字符串，推荐使用对象key唯一去重</strong>，经测试，在数据是短字符串的情况下，对象key唯一的去重方式在效率上还能提升<strong>5倍</strong>以上。如果数据类型比较复杂，而又不需要兼容IE10以下，<strong>4.推荐使用<code>Map</code>数据唯一去重</strong>。以上所有测试结果都能看到，重复量越大，处理速度越快，反而重复得越少，需要处理的时间就越长。选择去重方案也需要考虑当前项目中是否有使用<code>babel</code>工具，即使用了兼容性不好的<code>Set</code>、<code>Map</code>方法，<code>babel</code>也会打包为<code>ES5</code>语法。然而并不知道具体会打包成怎样去重，所以上诉方法都请视项目情况使用。</p> <h1><a id="_271"></a>循环效率排行</h1> <p>  只论循环效率，不考虑内容，看看循环具体排行如何。</p> <pre><code class="prism language-bash">var arr <span class="token operator">=</span> Array.from<span class="token punctuation">(</span>new Array<span class="token punctuation">(</span>10000000<span class="token punctuation">))</span><span class="token punctuation">;</span> // 创建1千万条数据的数组\n\nconsole.time<span class="token punctuation">(</span><span class="token string">\'耗时\'</span><span class="token punctuation">)</span>\n// 循环体\nconsole.timeEnd<span class="token punctuation">(</span><span class="token string">\'耗时\'</span><span class="token punctuation">)</span>\n\n<span class="token keyword">for</span> \t\t// 耗时: 6.65283203125ms - 7.085205078125ms\n<span class="token keyword">while</span> \t\t// 耗时：19.105712890625ms - 19.453857421875ms\n<span class="token keyword">do</span> <span class="token keyword">while</span>\t// 耗时：18.89697265625ms - 19.087890625ms\n<span class="token keyword">for</span> of \t\t// 耗时：102.4921875ms - 103.44921875ms\nforEach<span class="token punctuation">(</span><span class="token punctuation">)</span> \t// 耗时：103.834228515625ms - 104.614990234375ms\nfilter<span class="token punctuation">(</span><span class="token punctuation">)</span>    // 耗时：109.2978515625ms - 114.50390625ms\nreduce<span class="token punctuation">(</span><span class="token punctuation">)</span> \t// 耗时：113.99609375ms - 116.65625ms\nmap<span class="token punctuation">(</span><span class="token punctuation">)</span> \t\t// 耗时：140.9560546875ms - 143.347900390625ms\n<span class="token keyword">for</span> <span class="token keyword">in</span> \t\t// 耗时：2094.56201171875ms - 2811.3017578125ms\n\n</code></pre> <p>数组的方法还有很多就不一一列出来了<br> 可以去此处参考数组对象方法<br> <a href="https://www.runoob.com/jsref/jsref-obj-array.html">Array 对象</a></p> <h1><a id="_296"></a>结语</h1> <p>  说实话，网上虽说<code>js</code>去重方法一大堆，但是不管怎么拼凑其实就那几种类型。也见过用<code>递归</code>方式去重的方法，不过效率实在太差，数据量稍微大一点就报错。以上所有数据与测试皆是本人实测，在不同电脑、系统、浏览器上会有明显差异。</p> <p>看在花了大量时间测试的情况下，可以点个赞哦，如果错误欢迎指出。</p> </div> </body> </html> ';n.exports=a},1268:function(n,s){var a='<!DOCTYPE html> <html> <head> <meta charset="utf-8"> <meta name="viewport" content="width=device-width,initial-scale=1"> <title>只需一个DOM，纯CSS实现线性跑马灯特效</title> <link rel="stylesheet" href="https://stackedit.io/style.css"/> </head> <body class="stackedit"> <div class="stackedit__html"><p></p><div class="toc"><h3>只需一个DOM，纯CSS实现跑马灯线性特效</h3><ul><li><a href="#_1">引言</a></li><li><a href="#Demo_4">跑马灯效果图&amp;Demo</a></li><li><a href="#_8">跑马灯代码</a></li><li><a href="#_66">样式分析解释</a></li></ul></div><p></p> <h1><a id="_1"></a>引言</h1> <p>之前看到一个效果，一条小细线，围绕着边框一直绕圈，不过它的实现方式使用了JavaScript。于是就尝试着写了一个只需要CSS就能围绕边框跑的效果，废话不多说，直接上效果图和代码。</p> <h1><a id="Demo_4"></a>跑马灯效果图&amp;Demo</h1> <p><a href="http://jsrun.net/PEfKp"><img src="https://img-blog.csdnimg.cn/20200328112829123.gif" alt="在这里插入图片描述"></a><br> 很简洁的一个效果</p> <h1><a id="_8"></a>跑马灯代码</h1> <p><strong>HTML</strong></p> <pre><code class="prism language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box marquee-line<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>我是跑马灯啊^_^，点击我也可以查看Demo哦<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre> <p><strong>CSS</strong></p> <pre><code class="prism language-css"><span class="token atrule"><span class="token rule">@keyframes</span> moveLine</span> <span class="token punctuation">{</span>\n  <span class="token selector">0%</span> <span class="token punctuation">{</span>\n    <span class="token property">background-position</span><span class="token punctuation">:</span> -100px 1px, <span class="token function">calc</span><span class="token punctuation">(</span>100% - 1px<span class="token punctuation">)</span> -100px, <span class="token function">calc</span><span class="token punctuation">(</span>100% + 100px<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% - 1px<span class="token punctuation">)</span>, 1px 0px<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token selector">5%</span> <span class="token punctuation">{</span>\n    <span class="token property">background-position</span><span class="token punctuation">:</span> 0px 1px, <span class="token function">calc</span><span class="token punctuation">(</span>100% - 1px<span class="token punctuation">)</span> -100px, <span class="token function">calc</span><span class="token punctuation">(</span>100% + 100px<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% - 1px<span class="token punctuation">)</span>, 1px -100px<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token selector">30%</span> <span class="token punctuation">{</span>\n    <span class="token property">background-position</span><span class="token punctuation">:</span> 100% 1px, <span class="token function">calc</span><span class="token punctuation">(</span>100% - 1px<span class="token punctuation">)</span> -100px, <span class="token function">calc</span><span class="token punctuation">(</span>100% + 100px<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% - 1px<span class="token punctuation">)</span>, 1px -100px<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token selector">35%</span> <span class="token punctuation">{</span>\n    <span class="token property">background-position</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% + 100px<span class="token punctuation">)</span> 1px, <span class="token function">calc</span><span class="token punctuation">(</span>100% - 1px<span class="token punctuation">)</span> 0px, <span class="token function">calc</span><span class="token punctuation">(</span>100% + 100px<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% - 1px<span class="token punctuation">)</span>, 1px -100px<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token selector">50%</span> <span class="token punctuation">{</span>\n    <span class="token property">background-position</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% + 100px<span class="token punctuation">)</span> 1px, <span class="token function">calc</span><span class="token punctuation">(</span>100% - 1px<span class="token punctuation">)</span> 100%, <span class="token function">calc</span><span class="token punctuation">(</span>100% + 100px<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% - 1px<span class="token punctuation">)</span>, -100px -100px<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token selector">55%</span> <span class="token punctuation">{</span>\n    <span class="token property">background-position</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% + 100px<span class="token punctuation">)</span> 1px, <span class="token function">calc</span><span class="token punctuation">(</span>100% - 1px<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% + 100px<span class="token punctuation">)</span>, 100% <span class="token function">calc</span><span class="token punctuation">(</span>100% - 1px<span class="token punctuation">)</span>, -100px <span class="token function">calc</span><span class="token punctuation">(</span>100% + 100px<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token selector">80%</span> <span class="token punctuation">{</span>\n    <span class="token property">background-position</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% + 100px<span class="token punctuation">)</span> 1px, <span class="token function">calc</span><span class="token punctuation">(</span>100% - 1px<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% + 100px<span class="token punctuation">)</span>, 0px <span class="token function">calc</span><span class="token punctuation">(</span>100% - 1px<span class="token punctuation">)</span>, 1px <span class="token function">calc</span><span class="token punctuation">(</span>100% + 100px<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token selector">85%</span> <span class="token punctuation">{</span>\n    <span class="token property">background-position</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% + 100px<span class="token punctuation">)</span> 1px, <span class="token function">calc</span><span class="token punctuation">(</span>100% - 1px<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% + 100px<span class="token punctuation">)</span>, -100px <span class="token function">calc</span><span class="token punctuation">(</span>100% - 1px<span class="token punctuation">)</span>, 1px 100%<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token selector">100%</span> <span class="token punctuation">{</span>\n    <span class="token property">background-position</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% + 100px<span class="token punctuation">)</span> 1px, <span class="token function">calc</span><span class="token punctuation">(</span>100% - 1px<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% + 100px<span class="token punctuation">)</span>, -100px <span class="token function">calc</span><span class="token punctuation">(</span>100% - 1px<span class="token punctuation">)</span>, 1px 0px<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.marquee-line</span> <span class="token punctuation">{</span>\n  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>90deg, <span class="token function">rgba</span><span class="token punctuation">(</span>0,0,0,0<span class="token punctuation">)</span> 0%, #000 100%<span class="token punctuation">)</span>, <span class="token function">linear-gradient</span><span class="token punctuation">(</span>0deg, #000 0%, <span class="token function">rgba</span><span class="token punctuation">(</span>0,0,0,0<span class="token punctuation">)</span> 100%<span class="token punctuation">)</span>, <span class="token function">linear-gradient</span><span class="token punctuation">(</span>-90deg, <span class="token function">rgba</span><span class="token punctuation">(</span>0,0,0,0<span class="token punctuation">)</span> 0%, #000 100%<span class="token punctuation">)</span>, <span class="token function">linear-gradient</span><span class="token punctuation">(</span>0deg, <span class="token function">rgba</span><span class="token punctuation">(</span>0,0,0,0<span class="token punctuation">)</span> 0%, #000 100%<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat, no-repeat, no-repeat, no-repeat<span class="token punctuation">;</span>\n  <span class="token property">background-size</span><span class="token punctuation">:</span> 100px 4px, 4px 100px, 100px 4px, 4px 100px<span class="token punctuation">;</span>\n  <span class="token property">background-position</span><span class="token punctuation">:</span> -100px 1px, <span class="token function">calc</span><span class="token punctuation">(</span>100% - 1px<span class="token punctuation">)</span> -100px, <span class="token function">calc</span><span class="token punctuation">(</span>100% + 100px<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% - 1px<span class="token punctuation">)</span>, 1px 0px<span class="token punctuation">;</span>\n  <span class="token property">animation</span><span class="token punctuation">:</span> moveLine 8s infinite linear<span class="token punctuation">;</span>\n  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% - 2px<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token property">padding</span><span class="token punctuation">:</span> 1px<span class="token punctuation">;</span>\n  <span class="token property">background-clip</span><span class="token punctuation">:</span> content-box<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.box</span> <span class="token punctuation">{</span>\n  <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>\n  <span class="token property">width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>\n  <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 3px orange<span class="token punctuation">;</span>\n  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>\n  <span class="token property">line-height</span><span class="token punctuation">:</span> 280px<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre> <p>你木有看错，只有一个DOM，外加一些CSS，就实现了上图的效果。</p> <h1><a id="_66"></a>样式分析解释</h1> <p>从以上CSS代码可以看到，这里的效果利用了<code>background</code>可以设置多层背景的特性，设置四个渐变的背景，分别在四个角上，然后就是控制四条渐变线背景出现的时机。这里只需要写一次，在想要有这个效果的地方使用<code>.marquee-line</code>这个className就行了，不过一般也就用在网站的body标签上，因为是使用背景的方式，它不会遮挡任何经过的元素。唯一不足的地方是，因为是使用纯CSS，宽高的移动速率全靠在<code>@keyframes moveLine</code>内部通过百分比写。所以就会造成在不同的宽高情况下，速率是不一样的。整体速度是通过设置<code>animation-duration</code>，我这里写的 <code>8s</code>。</p> <p><strong>最后想说的是，CSS很强大，嘿嘿</strong></p> <p>以上代码如有疑问，欢迎下方评论，谢谢。</p> </div> </body> </html> ';n.exports=a},"1d16":function(n,s,a){"use strict";a("2e45")},"2e45":function(n,s,a){},4838:function(n,s){var a='<!DOCTYPE html> <html> <head> <meta charset="utf-8"> <meta name="viewport" content="width=device-width,initial-scale=1"> <title>遮罩覆盖的DOM，如果触发点击 等一系列事件</title> <link rel="stylesheet" href="https://stackedit.io/style.css"/> </head> <body class="stackedit"> <div class="stackedit__html"><p></p><div class="toc"><h3>遮罩覆盖的DOM，如果触发点击 等一系列事件</h3><ul><li><a href="#_1">引言</a></li><li><a href="#_pointerevent_7">解释 pointer-event</a></li><li><a href="#_14">举例说明上面解释的效果</a></li><li><a href="#_29">有哪些场景可以使用到</a></li><li><a href="#_38">总结</a></li></ul></div><p></p> <h1><a id="_1"></a>引言</h1> <p>今天，调试 <code>iview</code> 这个UI组件库 <code>modal</code> 组件样式的时候，在可 <strong>拖拽</strong> 的样式上看到一个样式 <code>pointer-event</code> 。虽然自诩（吹牛）在样式上有较多的理解，但是我却不知道这个样式的具体作用（打脸了）。<br> 审查元素后，发现这是我多年来心心念念的一个效果 <strong>ヾ(◍°∇°◍)ﾉﾞ</strong> ，曾经想过能否用 javascript 实现的效果（当时失败了，没找到如何实现）。现在用一个样式就能完美解决，看来当时查找问题的能力还是太差了。</p> <p>那接下来就看看，我心心念念那么久的功能是什么。</p> <h1><a id="_pointerevent_7"></a>解释 pointer-event</h1> <p><code>pointer-events</code> CSS 属性指定在什么情况下 (如果有) 某个特定的图形元素可以成为鼠标事件的 <code>target</code>。</p> <p>除了指示该元素不是鼠标事件的目标之外，值为 <code>none</code> 表示鼠标事件 <strong>穿透</strong> 该元素并且指定该元素 <strong>下面</strong> 的任何东西。</p> <p>（这两句话复制于 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/pointer-events"><strong>这里</strong></a>，可以点进去看更多解释，当然想听我唠嗑，可以接着往下看）</p> <h1><a id="_14"></a>举例说明上面解释的效果</h1> <p><img src="https://img-blog.csdnimg.cn/20200623172115963.gif" alt="演示效果的图"><br> 上图展示了被两个粉色 遮罩 <code>DOM</code> 覆盖住的一个在 <code>hover</code> 时添加了效果的 <code>DOM</code> 框，并且里面有两个按钮，右侧的遮罩内有两个子 <code>DOM</code>。</p> <p>左侧的粉色遮罩 ，样式是默认的，也就是 <code>pointer-event</code> 默认是 <code>auto</code>，它覆盖了 下面的方框，当移鼠标移到方框上方的 粉色 区域时，方框 <code>hover</code> 的效果没有显示，因为粉色遮罩盖住了方框。仔细看鼠标的样式以及方框的样式就明白了。</p> <p>右侧的粉色遮罩，设置了 <code>pointer-event: none;</code> ，鼠标移动到覆盖住方框的粉色区域，鼠标样式与方框样式变化都触发了。仔细查看移动到 <code>button</code> 按钮上时也一样。</p> <p>最右边两个 橙色 框，都是右侧粉色遮罩的 子元素，因为 <code>pointer-event</code> 属性会继承，所以移上去只有下面重置回 <code>pointer-event: auto;</code> 的橙色框的鼠标样式不一样。</p> <p><a href="http://jsrun.net/jNvKp">上面的效果图演示例子</a></p> <p>设置了 <code>pointer-event: none;</code> 的 <code>DOM</code> ,在控制台审查元素时默认也无法选中，需要在文档中找到这个<code>DOM</code> 选中，效果如下：<img src="https://img-blog.csdnimg.cn/2020062317361569.gif" alt="在这里插入图片描述"><br> 左侧的粉色遮罩能选中，右侧粉色框无法选中，右侧上方的橙色框无法选中，下方的橙色框可以选中。</p> <h1><a id="_29"></a>有哪些场景可以使用到</h1> <p>1.如果你的网页上使用了<code>img</code> 标签，但是不想让用户拖动，想让它像背景图一样，就可以给这种图片加上 <code>pointer-event: none;</code> ，这样图片就会忽略鼠标的事件了，直接<strong>穿透</strong> 图片，使事件直接作用于图片下方的元素。</p> <p>2.如果我们想使页面某一块儿拥有遮罩，但是我们这一块儿元素的事件却不能屏蔽掉。之前我们可能使用 <code>opacity: .5</code> 使元素半透明的方式曲线救国，如果要其他颜色遮罩，就是在这个半透明元素父级添加一个背景色。 现在知道了 <code>pointer-event</code> 这个样式，就不用这么麻烦，直接覆盖要遮挡的元素，设置好 <code>pointer-event: none;</code> 这样顶层这个遮挡只保留了样式，不会阻止鼠标触发遮罩下方 <code>DOM</code> 的事件。</p> <p>3.曾今想通过父级代理的方式，代理子元素的事件。比如有一排按钮，只需要在这一排按钮的父级添加 <code>click</code> 事件， 再通过 事件默认传进来的 <code>event</code> 事件对象，取出 <code>target</code>，再通过判断 <code>target</code> 的属性，知道点击的是哪一个按钮。这样做有一个小小的bug，就是如果这个按钮上有图标，而恰好点在图标上，<code>target</code> 指向的就不是 按钮本身的<code>DOM</code> 了，而是图标。这里也只需要把 图标的<code>DOM</code> 设置 <code>pointer-event: none;</code> 这样图标的元素就不会成为 <code>target</code> 的指向了。</p> <p>还有很多。。。。</p> <h1><a id="_38"></a>总结</h1> <p><code>pointer-event</code> 的样式看起来很简单，却能给我们带来很不错的效果。<br> 这里也只分享了 <code>none</code> 这个值带来的效果，有兴趣的童鞋可以进这里面看看 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/pointer-events">css pointer-event</a>，以及 <a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Attribute/pointer-events">SVG pointer-event </a></p> <p>在样式的世界里，每种样式互相搭配，有时候你就会发现你以前没发现的新天地。</p> </div> </body> </html> ';n.exports=a},"4f65":function(n,s){var a='<!DOCTYPE html> <html> <head> <meta charset="utf-8"> <meta name="viewport" content="width=device-width,initial-scale=1"> <title>DOM property 和 attribute 的区别详解</title> <link rel="stylesheet" href="https://stackedit.io/style.css"/> </head> <body class="stackedit"> <div class="stackedit__html"><p></p><div class="toc"><h3>DOM property 和 attribute 的区别详解</h3><ul><li><a href="#_1">引言</a></li><li><a href="#_4">明确概念</a></li><li><a href="#_20">讨论原因</a></li><li><a href="#_23">详细解释</a></li><li><a href="#_118">总结</a></li><li><a href="#_123">参考文档</a></li></ul></div><p></p> <h1><a id="_1"></a>引言</h1> <p>之前在阅读<code>vue</code> 的<code>api</code>的时候，在解释指令<code>v-bind</code>时，其中关于修饰符 <code>.prop</code> 的解释是- <strong>作为一个 DOM property 绑定而不是作为 attribute 绑定。</strong> 令我挺好奇的，虽然干了这么久前端还未详细探究过两者之前的具体区别。于是就跟着链接进入了<a href="https://stackoverflow.com/questions/6003819/what-is-the-difference-between-properties-and-attributes-in-html#answer-6004028">Stack Overflow</a>中，看与这相关的一个<strong>问题与讨论</strong>。讨论的内容也经多位牛人编辑，总结得很详细，就想着把这里面的内容在博客中分享记录一下。奈何时间关系，一直在博客的草稿箱里，年底了不怎么忙，趁有时间就总结翻译一下。</p> <h1><a id="_4"></a>明确概念</h1> <p>首先因为两个单词在中文中都翻译成<strong>属性</strong>，所以会造成较多混淆。在此也先明确一下其它一些基础概念。<br> 身为前端人员我们经常会用<code>标签</code>，<code>元素</code>，<code>DOM</code>来形容<code>HTML</code> 内容，对此其实有明确划分的。如下<code>HTML code</code>（能明确区分的可以跳过）</p> <pre><code class="prism language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre> <p>标签指的是 <code>div</code>，也有其他标签如：<code>a</code>，<code>p</code>，<code>input</code>等等。<br> 多数标签分为<code>&lt;div&gt;</code> 开始标签(opening tag)，以及<code>&lt;/div&gt;</code>结束标签(closing tag)。<br> 当然有的也不区分如: <code>&lt;input&gt;</code>，<code>&lt;hr&gt;</code>，<code>&lt;br&gt;</code>等。<br> 标签上有附加信息我们称之为 <code>HTML 属性</code>，如 <code>id</code>，<code>class</code><br> 以上合起来，我们统称为<code>HTML 元素</code>，而一个<code>HTML文档</code>就是多个<code>HTML元素</code>构成的。</p> <p>而<code>HTML DOM</code>是 HTML 的标准对象模型，<code>DOM(Document Object Model)</code>，直译就是<strong>文档对象模型</strong><br> <code>HTML DOM</code> 定义了所有 HTML 元素的<strong>对象</strong>和<strong>属性</strong>，以及访问它们的<strong>方法</strong>。<br> 而DOM对象上的<strong>属性</strong>我们称之为<code>property</code>。</p> <h1><a id="_20"></a>讨论原因</h1> <p>引发<a href="https://stackoverflow.com/questions/6003819/what-is-the-difference-between-properties-and-attributes-in-html#answer-6004028"><strong>此次</strong></a>讨论的主要原因就是因为<code>jQuery v1.6.1</code>的发布，此版本之前直接用<code>attr()</code>方法处理了<code>property</code>和<code>attribute</code>，为了消除<code>property</code>和<code>attribute</code>的歧义，以及一些<code>attr()</code>的bug和维护困难的问题，于是新添加了<code>prop()</code>方法，<code>jQuery v1.6.1</code>发布日志可以在<a href="http://blog.jquery.com/2011/05/12/jquery-1-6-1-released/"><strong>这里</strong></a>看。</p> <h1><a id="_23"></a>详细解释</h1> <p>编写HTML源代码时，可以在HTML元素上定义属性(attribute) 。 然后，一旦浏览器解析了您的代码，就会创建一个对应的DOM节点。 该节点是一个对象，因此具有属性 (property)。<br> 例如：</p> <pre><code class="prism language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>\n</code></pre> <p><code>input</code>元素有两个属性(attribute)，<code>type</code>和<code>value</code>。<br> 浏览器解析这段代码后，将创建一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLInputElement"><strong>HTMLInputElement</strong></a>对象，该对象将包含许多属性。<br> 例如：<code>accept</code>，<code>accessKey</code>，<code>align</code>，<code>alt</code>，<code>attributes</code>，<code>autofocus</code>，<code>baseURI</code>，<code>checked</code>，<code>childElementCount</code>，<code>childNodes</code>，<code>childNodes</code>，<code>classList</code>，<code>className</code>，<code>clientHeight</code>等</p> <p>解析创建后的这个<strong>DOM节点对象</strong>，<code>property</code>是这个对象的属性，而<code>attribute</code>是这个对象的<code>attributes</code>这个对象的属性<br> <font size="2" color="#aaa">（简单讲就是这样 <code>domObj.attibutes.attribute</code> ）。<font></font></font></p> <p>因为是根据HTML 元素创建的<strong>DOM节点对象</strong>，所以会有许多属性(property)都与<strong>具有相同或相似名称</strong>的属性(attribute)相关，但这不并是一对一的关系。<br> 比如：</p> <pre><code class="prism language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inputId<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>\n</code></pre> <p>此元素创建的<strong>DOM节点对象</strong>有，<code>id</code>，<code>type</code>，<code>value</code> 等属性(property)<br> DOM节点对象上的<code>id</code> 属性(property)是映射的<code>id</code>属性(attribute)。获取<code>id</code>的<code>property</code>就是获取<code>attribute</code>值，设置也是一样。</p> <pre><code class="prism language-javascript"><span class="token keyword">var</span> inputDom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">\'#inputId\'</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inputDom<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">\'id\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inputDom<span class="token punctuation">.</span>id<span class="token punctuation">)</span>\n<span class="token comment">// "inputId"</span>\n<span class="token comment">// "inputId"</span>\n\ninputDom<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">\'id\'</span><span class="token punctuation">,</span><span class="token string">\'inputId2\'</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inputDom<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">\'id\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inputDom<span class="token punctuation">.</span>id<span class="token punctuation">)</span>\n<span class="token comment">// "inputId2"</span>\n<span class="token comment">// "inputId2"</span>\n\ninputDom<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">\'inputId\'</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inputDom<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">\'id\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inputDom<span class="token punctuation">.</span>id<span class="token punctuation">)</span>\n<span class="token comment">// "inputId"</span>\n<span class="token comment">// "inputId"</span>\n</code></pre> <p>DOM节点对象上的<code>type</code>属性(property)是映射 <code>type</code>的属性(attribute)，获取<code>property</code>读取的是<code>attribute</code>值，并且设置<code>property</code>写入的是<code>attribute</code>值。<code>type</code>不是纯粹的映射属性，因为它的值只能为 <strong>已知值</strong> （例如:<code>text</code>，<code>submit</code>，<code>button</code>，<code>checkbox</code>等等）。以下可以看到，设置<code>type</code>为<strong>未知值</strong> 时 <code>property</code>始终为text。</p> <pre><code class="prism language-javascript"><span class="token keyword">var</span> inputDom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">\'#inputId\'</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inputDom<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">\'type\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inputDom<span class="token punctuation">.</span>type<span class="token punctuation">)</span>\n<span class="token comment">// text</span>\n<span class="token comment">// text</span>\n\ninputDom<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">\'type\'</span><span class="token punctuation">,</span><span class="token string">\'007\'</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inputDom<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">\'type\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inputDom<span class="token punctuation">.</span>type<span class="token punctuation">)</span>\n<span class="token comment">// 007</span>\n<span class="token comment">// text</span>\n\ninputDom<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">\'008\'</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inputDom<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">\'type\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inputDom<span class="token punctuation">.</span>type<span class="token punctuation">)</span>\n<span class="token comment">// 008</span>\n<span class="token comment">// text</span>\n</code></pre> <p><code>value</code>属性(property)不是完全映射<code>value</code>属性(attribute)。 初始状态<code>value</code>属性(property)映射的<code>value</code>属性(attribute)， 当用户手动更改输入框的内容时 ， <code>value</code>属性(property)将更改为用户输入的信息。</p> <pre><code class="prism language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inputId<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>\n</code></pre> <pre><code class="prism language-javascript"><span class="token keyword">var</span> inputDom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">\'#inputId\'</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inputDom<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">\'value\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inputDom<span class="token punctuation">.</span>value<span class="token punctuation">)</span>\n<span class="token comment">// name</span>\n<span class="token comment">// name</span>\n\ninputDom<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">\'value\'</span><span class="token punctuation">,</span><span class="token string">\'007\'</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inputDom<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">\'value\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inputDom<span class="token punctuation">.</span>value<span class="token punctuation">)</span>\n<span class="token comment">// 007</span>\n<span class="token comment">// 007</span>\n\ninputDom<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">\'008\'</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inputDom<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">\'value\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inputDom<span class="token punctuation">.</span>value<span class="token punctuation">)</span>\n<span class="token comment">// 007</span>\n<span class="token comment">// 008</span>\n</code></pre> <p>由以上可以得知，<code>input</code>的<code>value</code>属性(property)在用户未输入数据，或设置<code>property</code>的值时，取的值是<code>attribute</code>的值。当用户输入值或者设置了<code>property</code>的值后，<code>property</code>的值就不受<code>attribute</code>影响了，<code>property</code>的值就是页面输入框内展示的内容（如下图）<br> <img src="https://img-blog.csdnimg.cn/2020011820011235.png" alt="在这里插入图片描述"><br> <code>attribute</code>的值是HTML源代码属性（如下图）<br> <img src="https://img-blog.csdnimg.cn/20200118195847768.png" alt="attribute 的值"><br> 从这个例子中就能很明显看出来<code>property</code>和<code>attribute</code>的区别了，当然还有很多属性<code>property</code>与<code>attribute</code>之间的映射关系并不相同，比如<code>class attribute</code> 和 <code>className property</code>、<code>classList property</code> 之间的关系等等。</p> <p>这里有篇 <a href="https://angular.cn/guide/template-syntax#html-attribute-vs-dom-property"><strong>Angular 的文档</strong></a>，其中也描述了html属性和DOM属性的一些内容，有兴趣的小伙伴们可以进去看看。<br> <a href="https://developer.mozilla.org/zh-CN/docs/Web/API#%E6%8E%A5%E5%8F%A3">Web API 接口参考</a></p> <h1><a id="_118"></a>总结</h1> <p>最后总的来讲就是 <strong>HTML属性</strong> (attribute)和 <strong>DOM属性</strong>(property)，是相互关联的。多数情况<code>attribute</code>值仅用作初始DOM节点对象使用，而<code>property</code>更多用于页面交互，很多框架都是在与元素和指令的 <code>property</code>和事件打交道。</p> <p>以上描述如有错误欢迎指正，谢谢</p> <h1><a id="_123"></a>参考文档</h1> <p>以上所引用文档都尽量更换为中文文档，原英文文档参考下方。</p> <p><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement">HTMLInputElement</a><br> <a href="https://developer.mozilla.org/en-US/docs/Web/API#Interfaces">Web APIs</a><br> <a href="https://angular.io/guide/template-syntax#html-attribute-vs-dom-property">HTML attribute vs. DOM property</a><br> <a href="https://stackoverflow.com/questions/6003819/what-is-the-difference-between-properties-and-attributes-in-html#answer-6004028">Stack Overflow</a></p> </div> </body> </html> ';n.exports=a},"5c0e":function(n,s){var a='<!DOCTYPE html> <html> <head> <meta charset="utf-8"> <meta name="viewport" content="width=device-width,initial-scale=1"> <title>删除列表中一个DOM，其余DOM动态过渡的方法</title> <link rel="stylesheet" href="https://stackedit.io/style.css"/> </head> <body class="stackedit"> <div class="stackedit__html"><p></p><div class="toc"><h3>删除列表中一个DOM，其余DOM动态过渡的方法</h3><ul><li><a href="#_1">效果图</a></li><li><a href="#DEMO_3">效果DEMO</a></li><li><a href="#_6">全部代码</a></li><li><a href="#_90">方法原理解释</a></li><li><a href="#_103">结语</a></li></ul></div><p></p> <h1><a id="_1"></a>效果图</h1> <p><img src="https://img-blog.csdnimg.cn/20200606131905395.gif" alt="在这里插入图片描述"></p> <h1><a id="DEMO_3"></a>效果DEMO</h1> <p><a href="http://jsrun.net/ru2Kp">简易的DOM 过渡效果</a></p> <h1><a id="_6"></a>全部代码</h1> <p>HTML</p> <pre><code class="prism language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rect<span class="token punctuation">"</span></span> <span class="token attr-name">data-index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>01<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rect<span class="token punctuation">"</span></span> <span class="token attr-name">data-index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>02<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>02<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rect<span class="token punctuation">"</span></span> <span class="token attr-name">data-index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>03<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rect<span class="token punctuation">"</span></span> <span class="token attr-name">data-index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>04<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>04<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rect<span class="token punctuation">"</span></span> <span class="token attr-name">data-index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>05<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>05<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n    <span class="token comment">&lt;!-- 一共36个为了减少篇幅只写几个个 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>\n</code></pre> <p>CSS</p> <pre><code class="prism language-css"><span class="token selector">.box</span> <span class="token punctuation">{</span>\n    <span class="token property">width</span><span class="token punctuation">:</span> 336px<span class="token punctuation">;</span>\n    <span class="token property">height</span><span class="token punctuation">:</span> 336px<span class="token punctuation">;</span>\n    <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 3px pink<span class="token punctuation">;</span>\n    <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>\n    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.rect</span> <span class="token punctuation">{</span>\n    <span class="token property">width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>\n    <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>\n    <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 3px orange inset<span class="token punctuation">;</span>\n    <span class="token property">margin</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>\n    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>\n    <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>\n    <span class="token property">line-height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>\n    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre> <p>JavaScript</p> <pre><code class="prism language-javascript"><span class="token keyword">var</span> rectArr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">\'rect\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'box\'</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> delay <span class="token operator">=</span> <span class="token number">300</span>\nbox<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'click\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t<span class="token comment">// 如果点击的box本身就不往下执行</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target <span class="token operator">===</span> box<span class="token punctuation">)</span> <span class="token keyword">return</span>\n\t\n\t<span class="token comment">// 获取当前dom index, 当然你也可以不通过data-index 保存的方式获取，不过下面的方法就要稍微调整一下</span>\n    <span class="token keyword">let</span> index <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">\'data-index\'</span><span class="token punctuation">)</span>\n\n\t<span class="token comment">// 取出要移动的DOM</span>\n    <span class="token keyword">var</span> moveArr <span class="token operator">=</span> rectArr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> rectArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span>\n\n    <span class="token comment">// 保存要移动的DOM 未移动前的位置</span>\n    moveArr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        item<span class="token punctuation">.</span>preLeft <span class="token operator">=</span> item<span class="token punctuation">.</span>offsetLeft\n        item<span class="token punctuation">.</span>preTop <span class="token operator">=</span> item<span class="token punctuation">.</span>offsetTop\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n\t<span class="token comment">// 删除dom 删除后后续DOM 位置立即变化</span>\n    box<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">)</span>\n\n\t<span class="token comment">// 给移动后的DOM 位移置之前的位置</span>\n    moveArr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        item<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token template-string"><span class="token string">`translate(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token punctuation">.</span>preLeft <span class="token operator">-</span> item<span class="token punctuation">.</span>offsetLeft<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token punctuation">.</span>preTop <span class="token operator">-</span> item<span class="token punctuation">.</span>offsetTop<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px)`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t\n\t<span class="token comment">// 设置一点延迟给DOM 渲染反应时间，如果不设置自行试试会出现什么问题吧</span>\n\t<span class="token comment">// 添加过渡，并位移回dom 新位置</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        moveArr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            item<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transition <span class="token operator">=</span> <span class="token template-string"><span class="token string">`transform </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>delay<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms ease`</span></span>\n            item<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token template-string"><span class="token string">`translate(0, 0)`</span></span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n\n\t<span class="token comment">// 位移完 删除过渡以及位移参数， 删除了下次才能正常位移</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      moveArr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        item<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transition <span class="token operator">=</span> <span class="token template-string"><span class="token string">``</span></span>\n        item<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token string">\'\'</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>  \n    <span class="token punctuation">}</span><span class="token punctuation">,</span> delay <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n\n\t<span class="token comment">// 前面通过 splice 删除掉了原有数组中将要移动的 dom，现在还原。</span>\n    <span class="token comment">// 有个问题就是虽然删除了DOM，但是还保存再来数组中，每次循环计算都是以36的数量计算</span>\n    rectArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>rectArr<span class="token punctuation">,</span> <span class="token operator">...</span>moveArr<span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre> <h1><a id="_90"></a>方法原理解释</h1> <p>删除DOM 后，后续DOM 立马出现在新的位置不会出现过渡，因此我们手动加过渡。</p> <p>1 删除之前保存好未移动之前的位置</p> <p>2 删除之后把位置重新赋值给移动的元素（这里通过位移的方式，简单计算一下就行）</p> <p>3 赋值完成后 再 添加过渡属性 以及重新赋值 位移（因为只有这里添加了过渡属性，所以这个位移才会过渡，其他的看不出效果）</p> <p>4 位移完成删除过渡属性</p> <p><strong>所以结论就是，其实这里过渡就是，从当前位置移动到目标位置（没过渡效果），再从目标位置移回来（没过渡效果），最后再移回目标位置（有过渡效果，就是页面中看到的效果）。</strong></p> <h1><a id="_103"></a>结语</h1> <p>发这篇文章的起因其实是在 <a href="https://stackoverflow.com/questions/62143275/css-transition-when-moved/62143739#62143739">Stack Overflow</a> 上面回答别人的问题，说实话，我比较常用 Vue 。而它里面有过渡组件，也有<a href="https://cn.vuejs.org/v2/guide/transitions.html#%E5%88%97%E8%A1%A8%E7%9A%84%E6%8E%92%E5%BA%8F%E8%BF%87%E6%B8%A1">例子</a>，基本上不需要我考虑具体的过渡实现，看到这个同行问的问题，并且他要原生代码写的，刚开始我通过审查元素的方式查看DOM 是如果变化的，最后找了一个例子，扒了一下源码才发现具体的实现方式，也总算知道为啥我审查元素打断点看不到了，因为他前两个位移没过渡，最后一个位移才有，而打断点只能看到最后一个。基本上这种操作的过渡都是这种思路，希望大家能够很好的理解，好了就这样啦。</p> <p>以上信息如有疏漏或错误，欢迎指正</p> </div> </body> </html> ';n.exports=a},"628b":function(n,s){var a='<!DOCTYPE html> <html> <head> <meta charset="utf-8"> <meta name="viewport" content="width=device-width,initial-scale=1"> <title>前端如何理解正则-由浅入深的学习</title> <link rel="stylesheet" href="https://stackedit.io/style.css"/> </head> <body class="stackedit"> <div class="stackedit__html"><p></p><div class="toc"><h3>前端如何理解正则-由浅入深的学习</h3><ul><li><a href="#_1">引言</a></li><li><a href="#_4">正则简单语法</a></li><li><a href="#_69">正则语法练习</a></li><ul><li><a href="#font_size3__matchfont_70">获取字符串内`[]`(含)内的数据<font size="3">（使用字符串方法 `match`）</font></a></li><li><a href="#font_size3_test_font_86">判断字符串是否存在英文以外的字符<font size="3">（使用正则方法 `test` ）</font></a></li><li><a href="#xxxxxxxxfont_size3_test_font_100">判断字符串是否为xxxx-xx-xx格式的日期<font size="3">（使用正则方法 `test` ）</font></a></li><li><a href="#font_size3_match_font_118">从字符串中获取日期<font size="3">（使用字符串方法 `match` ）</font></a></li></ul><li><a href="#_128">常用正则分析</a></li><ul><li><a href="#IP__131">IP 正则的验证与或获取</a></li><li><a href="#__176">邮箱 正则的验证与获取</a></li></ul><li><a href="#_213">正则深入学习</a></li><ul><li><a href="#ASCIIUnicode_214">匹配ASCII码与Unicode码表数据</a></li><li><a href="#g_m_i_241">修饰符`g` `m` `i`</a></li><li><a href="#_260">`()`组的用法</a></li><li><a href="#__282">零宽断言 正则的预查</a></li><li><a href="#_341">零宽断言之密码复杂度</a></li></ul><li><a href="#_371">结语</a></li></ul></div><p></p> <h1><a id="_1"></a>引言</h1> <p>  正则在平时工作中用得蛮多的，比如说<strong>验证</strong>、<strong>文本搜索</strong>、<strong>文本替换</strong>、<strong>服务配置</strong>…。之前就常有同事直接发我规则，让我写个<strong>正则</strong>给他。自己也因为在编辑一个公众号的内容，需要将图片上的文本录入<strong>图文</strong>(文章)。于是就想着调用百度的图片识别API，将返回的数据格式化 <strong>(通过正则判断需要获取的值)</strong> 后，再插入网页版公众号编辑器，所以对于正则用得更多了。<br>   所以我觉得正则这东西，只需要掌握其中几个核心的<strong>元字符</strong>，然后简单练习一下，再找几个稍复杂的案例详细解释，这样就能掌握书写正则的规律，最后再学习缩写后的常用符号就能完全理解了。</p> <h1><a id="_4"></a>正则简单语法</h1> <p>除了普通字符，还有一些<code>元字符</code>则具有特殊的含义，比如下面的这些：</p> <table> <colgroup><col width="75px"><col></colgroup> <thead> <tr><th>元字符</th><th>描述</th></tr> </thead> <tbody> <tr> <td>\\</td> <td align="left">正则的转义符，有三种情况： <br>1. <code>\\</code> 加上元字符，表示匹配<b>元字符</b>所使用的普通字符，比如要匹配<b>普通字符</b> <code> \\</code>，就要写<code>\\\\</code>。 <br>2. <code>\\</code> 加上非元字符，组成一种由具体实现方式规定其意义的元字符序列 如<code>\\d</code>表示匹配一个<b>数字字符</b>。 <br>3. <code>\\</code> 加上任意其他字符，默认情况就是匹配此字符，也就是说，反斜线被忽略了。 </td> </tr> <tr> <td>^</td> <td align="left">匹配文本行首。如果设置了<b>RegExp</b>对象的<code>Multiline</code>属性， <code>^</code>也匹配<code>\\n</code>或<code>\\r</code>之后的位置。用到<code>[]</code>元字符中第一位时是取反的意思。<br> 例如：<code>/^abc/</code> 匹配 <code>abc</code> <b>开头</b>的字符串。<br>    <code>/^abc/m</code> 匹配多行 <code>abc</code> <b>开头</b>的字符串。 </td> </tr> <tr> <td>$</td> <td align="left">匹配文本行尾。如果设置了<b>RegExp</b>对象的<code>Multiline</code>属性， <code>^</code>也匹配<code>\\n</code>或<code>\\r</code>之后的位置。<br> 例如：<code>/abc$/</code> 匹配 <code>abc</code> <b>结尾</b>的字符串。<br>    <code>/abc$/m</code> 匹配多行 <code>abc</code> <b>结尾</b>的字符串。 </td> </tr> <tr> <td>|</td> <td align="left">逻辑 <b>或</b> 的意思。例如：<code>/a|b/</code> 匹配 <code>a</code> 或者 <code>b</code> 。</td> </tr> <tr> <td>()</td> <td align="left">将<code>(</code> 和 <code>)</code> 之间的表达式定义为“<b>组</b>”（group），并且将匹配这个表达式的字符保存到一个临时区域（一个正则表达式中最多可以保存9个），它们可以用<code>\\1</code> 到 <code>\\9</code> 的符号来引用。<br> 例如：<code>/([a-z])\\1/</code>，假如第一个括号内的<code>[a-z]</code>匹配到字母 <code>d</code>，那么<code>\\1</code>就相当于<code>d</code>。<br>    以此类推，<code>\\2</code>就是第二个括号内匹配到的内容。（后面深入部分举例讲） </td> </tr> <tr> <td>[]</td> <td align="left">带有 <b>或</b> 关系的一组数据，并可定义区间。<br> 例如：<code>[abc]</code>匹配<code>a</code>或<code>b</code>或<code>c</code>。<br>    <code>[a-z]</code>匹配<code>a</code>到<code>z</code>的小写字母。<br>    <code>[^a-z]</code>匹配除<code>a</code>到<code>z</code>之间字符<b>以外的任意单字符</b>，包括空字符。 </td> </tr> <tr> <td>{}</td> <td align="left">包含一个(段)数量的<b>量词</b>，给<b>匹配符</b>添加数量，不能为负整数。 <br> 例如：<code>/a{2}/</code>，匹配连续的<code>2</code>个<code>a</code>。<br>    <code>/a{2,}/</code>，匹配连续的<code>&gt;=2</code>个<code>a</code>。<br>    <code>/a{0,5}/</code>，匹配连续的<code>&gt;=0 &amp;&amp; &lt;=5</code>个<code>a</code>。<br> </td> </tr> </tbody> </table> <p>当然元字符并不止这么一点，还有<a href="https://www.runoob.com/jsref/jsref-obj-regexp.html">更多</a>。<br> 但是只要知道以上几种<strong>元字符</strong>，就能书写大部分正则规则了，以下用例子把上面描述的内容实际展示一下。</p> <br> <h1><a id="_69"></a>正则语法练习</h1> <h2><a id="font_size3__matchfont_70"></a>获取字符串内<code>[]</code>(含)内的数据<font size="3">（使用字符串方法 <code>match</code>）</font></h2> <pre><code class="prism language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">\'今天学习了[RegExp]对象\'</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/\\[[a-zA-Z]{0,}\\]/</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; ["[RegExp]"] </span>\n</code></pre> <p>这里就用到了<code>[a-zA-Z]</code>，里面规则是匹配大小写字母，而紧跟着的<code>{0,}</code>，是匹配0个或多个大小写字母。<br> 前后的<code>\\[</code> <code>\\]</code>，就是用到了<code>\\</code>元字符的第一种情况。<br> <code>-</code> 在<code>[a-z]</code>、<code>[0-9]</code>等等之间属于连字符，表示之间的意思<br> <code>[a-z-]</code>中<code>z</code>后面的<code>-</code>表示匹配普通字符<code>-</code>，实在不清楚就用<code>\\</code>转义<br> <code>[a-z]</code>匹配所有小写字母<br> <code>[a\\-z]</code>匹配<code>a</code>，<code>-</code> ，<code>z</code>。<br> <br></p> <h2><a id="font_size3_test_font_86"></a>判断字符串是否存在英文以外的字符<font size="3">（使用正则方法 <code>test</code> ）</font></h2> <pre><code class="prism language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">\'StackOverflow\'</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token string">\'我在TrendyTech上班\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/[^a-zA-Z]$/</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; true</span>\n</code></pre> <p>这里在<code>[]</code>内用到了<code>^</code>，意思就是取反中括号内的匹配项，整体的意思就是匹配除大小写字母以外的任意字符。<br> <br></p> <h2><a id="xxxxxxxxfont_size3_test_font_100"></a>判断字符串是否为xxxx-xx-xx格式的日期<font size="3">（使用正则方法 <code>test</code> ）</font></h2> <pre><code class="prism language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">\'2020-01-12\'</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token string">\'2020年1月1日\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/^([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[01])$/</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; false</span>\n</code></pre> <p>这一段正则看起来长，其实拆分一下很简单，总共分为三部分<br> 第一部分<code>[0-9]{4}</code> 匹配年份，年份为四个数字组成<br> 第二部分<code>(0[1-9]|1[0-2])</code> 匹配月份，<code>0[1-9]</code> 匹配 <strong>01~09</strong>，<code>1[0-2]</code> 匹配 <strong>10~12</strong>。<br> 第三部分<code>(0[1-9]|[1-2][0-9]|3[01])</code> 匹配日期，<code>0[1-9]</code> 匹配 <strong>0~9</strong>，<code>[1-2][0-9]</code> 匹配 <strong>10~29</strong>，<code>3[01]</code> 匹配 <strong>30,31</strong></p> <p>虽然此正则不是很严谨，比如小月和平月没有31天，不过能说明规则就好。<br> <br></p> <h2><a id="font_size3_match_font_118"></a>从字符串中获取日期<font size="3">（使用字符串方法 <code>match</code> ）</font></h2> <pre><code class="prism language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">\'今天是2020-01-12，马上就放假了\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[01])/</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; 2020-01-12</span>\n</code></pre> <p>这次的正则对比上面的只移除了<code>^</code> <code>$</code>，使用<code>match</code>方法，获取到了字符串中的 <code>xxxx-xx-xx</code> 格式的时间字符串。</p> <h1><a id="_128"></a>常用正则分析</h1> <p>好了，以上几个例子已经能够把正则基础的信息完整讲明了，那我们再解析几个常用的正则，最终你会发现，其实看起来很复杂的正则也是一个一个短的逻辑段拼凑而成。</p> <h2><a id="IP__131"></a>IP 正则的验证与或获取</h2> <p>大多数情况，<strong>验证</strong>与<strong>获取</strong>的区别在于是否添加了行首<code>^</code>、行尾<code>$</code>验证。</p> <pre><code class="prism language-javascript"><span class="token keyword">var</span> ipReg <span class="token operator">=</span> <span class="token regex">/^(((2(5[0-5]|[0-4][0-9]))|[0-1]{0,1}[0-9]{1,2})\\.){3}((2(5[0-5]|[0-4][0-9]))|[0-1]{0,1}[0-9]{1,2})$/</span><span class="token punctuation">;</span>\n</code></pre> <p>IP是由 <code>xxx.xxx.xxx.xxx</code> 格式组成，<code>xxx</code> 的值为 <code>0~255</code>，所以我们<strong>第一步</strong>写个<code>0~255</code> 的正则。</p> <p><code>0~255</code> 的正则 就是 <code>(2(5[0-5]|[0-4][0-9]))|[0-1]{0,1}[0-9]{1,2}</code></p> <p>太长了我们在拆分一下，分为 <code>0~199</code>，<code>200~255</code><br> <code>0~199</code> 的正则是 <code>[0-1]{0,1}[0-9]{1,2}</code><br>  <font size="2">解释：百位是0-1，匹配0-1次就是可以没有百位。个位十位取值0-9，匹配1-2次就是0-99之间的数。</font><br> <code>200~255</code> 的正则是 <code>2(5[0-5]|[0-4][0-9])</code><br>  <font size="2">解释：百位固定为2，十位这里分为5和0-4，5的情况下个位为0-5，0-4的情况下，个位是0-9。</font></p> <p>因为<code>0~199</code> 和 <code>200~255</code> 拼接起来就要用<code>()</code>+或<code>|</code>连接起来，就成了上面<code>0~255</code>的正则。</p> <p><code>0~255</code>由<code>.</code>拼接，就成了 <code>0~255</code>.<code>0~255</code>.<code>0~255</code>.<code>0~255</code>。<br> 这里由于<code>.</code>是匹配除<strong>换行和回车符</strong>以外的任意单字符的<strong>元字符</strong>，所以加斜线<code>\\.</code>转义为普通字符<code>.</code>。</p> <p>因为上面 有重复规律就是 <code>0~255</code>. 出现三次所以用<code>()</code>括起来，再用量词<code>{3}</code>乘以三。<br> <code>0~255</code>.<code>0~255</code>.<code>0~255</code>. 的正则就是 <code>((2(5[0-5]|[0-4][0-9]))|[0-1]{0,1}[0-9]{1,2})\\.){3}</code></p> <p>加上最后的<code>0~255</code>就是完整匹配IP的正则了。<br> 用一张图表明：<br> <img src="https://img-blog.csdnimg.cn/20200122110228487.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1ZHlfemhvdQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 正则很长，其实可以稍微减短一点，之前说过，<strong>元字符</strong><code>\\</code>加非元字符，会有一些常用匹配的集合，比如：<br> <code>[0-9]</code> 可以用 <code>\\d</code>替换，<code>{0,1}</code>可以用<code>?</code>替换。<br> 简写一下上面的规则就是</p> <pre><code class="prism language-javascript"><span class="token keyword">var</span> ipReg <span class="token operator">=</span> <span class="token regex">/^(((2(5[0-5]|[0-4]\\d))|[0-1]?\\d{1,2})\\.){3}((2(5[0-5]|[0-4]\\d))|[0-1]?\\d{1,2})$/</span><span class="token punctuation">;</span>\n</code></pre> <p>像这样的常用匹配集合有<a href="https://baike.baidu.com/item/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/1700215?fr=aladdin">很多</a>，在未熟练掌握正则之前先不要使用，可以把写完的正则再一一对应替换。</p> <p>去掉首尾的<code>^</code> <code>$</code>，用来匹配字符串中的IP。</p> <pre><code class="prism language-javascript"><span class="token keyword">var</span> ipReg <span class="token operator">=</span> <span class="token regex">/(((2(5[0-5]|[0-4]\\d))|[0-1]?\\d{1,2})\\.){3}((2(5[0-5]|[0-4]\\d))|[0-1]?\\d{1,2})/</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">\'这个项目部署在192.168.101.255上面。\'</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>ipReg<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; 192.168.101.255</span>\n</code></pre> <h2><a id="__176"></a>邮箱 正则的验证与获取</h2> <pre><code class="prism language-javascript"><span class="token keyword">var</span> emailReg <span class="token operator">=</span> <span class="token regex">/^[a-zA-Z0-9][a-zA-Z0-9_.-]{1,}@([a-zA-Z0-9_-]{1,}\\.){1,}[a-zA-Z0-9_-]{1,}$/</span><span class="token punctuation">;</span>\n</code></pre> <p>普通邮箱格式：<strong>邮箱名称</strong>由 字母、数字、<code>.</code>、<code>_</code>、<code>-</code>组成，首字母为字母或数字<br>        <strong>域名部分</strong>由 字母、数字、<code>_</code>、<code>-</code>组成，<code>.</code>连接</p> <p><strong>邮箱名称正则</strong> <code>[a-zA-Z0-9][a-zA-Z0-9_.-]{1,}</code><br>  <font size="2">解释：字母、数字开头，后面跟着字母、数字、_、.、-，重复1次或多次</font></p> <p>中间加 <code>@</code>连接</p> <p><strong>邮箱域名正则</strong> <code>([a-zA-Z0-9_-]{1,}\\.){1,}[a-zA-Z0-9_-]{1,}</code><br> 拆分为 <code>[a-zA-Z0-9_-]{1,}</code> 和 <code>.</code>，然后组合成<code>xxx.xxx.xxx</code>格式的邮箱域名正则。<br>  <font size="2">解释：字母、数字、-、_，重复1次或多次</font></p> <p>用一张图表示：<br> <img src="https://img-blog.csdnimg.cn/20200122111033492.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1ZHlfemhvdQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 同样邮箱域名也可以缩写，<strong>元字符</strong> <code>+</code> 和 <code>{1,}</code> 等价，<code>\\w</code> 类似 <code>[a-zA-Z0-9_]</code> (这里是类似，不是等价)。</p> <p>缩写后的正则就是</p> <pre><code class="prism language-javascript"><span class="token keyword">var</span> emailReg <span class="token operator">=</span> <span class="token regex">/^[a-zA-Z0-9][\\w.-]+@([\\w-]+\\.){1,}[\\w-]+$/</span><span class="token punctuation">;</span>\n</code></pre> <p>还有很多邮箱的规则这里并不完全匹配，如果要匹配比较特殊的邮箱，比如有中文，可以根据以上所学到的自行添加。</p> <p>去掉首尾的 <code>^</code> <code>$</code> ，用来匹配字符串中的邮箱。</p> <pre><code class="prism language-javascript"><span class="token keyword">var</span> emailReg <span class="token operator">=</span> <span class="token regex">/[a-zA-Z0-9][\\w.-]+@([\\w-]+\\.){1,}[\\w-]+/</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">\'我的google邮箱是zhouyu0229@gmail.com，你的邮箱呢？。\'</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>emailReg<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; zhouyu0229@gmail.com</span>\n</code></pre> <h1><a id="_213"></a>正则深入学习</h1> <h2><a id="ASCIIUnicode_214"></a>匹配ASCII码与Unicode码表数据</h2> <p>比如说匹配 <code>@</code> ，我们不单可以用普通字符<code>@</code>，也可以使用 ASCII码的八进制、十六进制匹配和Unicode码匹配，看下面例子。</p> <pre><code class="prism language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">\'我是@符号\'</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> OCTReg <span class="token operator">=</span> <span class="token regex">/\\100/</span><span class="token punctuation">;</span> <span class="token comment">// 八进制ASCII码</span>\n<span class="token keyword">var</span> sexadecimalReg <span class="token operator">=</span> <span class="token regex">/\\x40/</span><span class="token punctuation">;</span> <span class="token comment">// 十六进制ASCII码</span>\n<span class="token keyword">var</span> unicodeReg <span class="token operator">=</span> <span class="token regex">/\\u0040/</span><span class="token punctuation">;</span> <span class="token comment">// Unicode码</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>OCTReg<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; @</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>sexadecimalReg<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; @</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>unicodeReg<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; @</span>\n</code></pre> <p>可以看到，都能匹配到 <code>@</code> 符号，不但能单个匹配也能区间匹配，比如匹配<code>A</code> 到 <code>D</code></p> <pre><code class="prism language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">\'我是在AB幼儿园上学，小明在CD幼儿园上学，小刚在EG幼儿园上学\'</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> OCTReg <span class="token operator">=</span> <span class="token regex">/[\\101-\\104]/g</span><span class="token punctuation">;</span> <span class="token comment">// 八进制ASCII码</span>\n<span class="token keyword">var</span> sexadecimalReg <span class="token operator">=</span> <span class="token regex">/[\\x41-\\x44]/g</span><span class="token punctuation">;</span>  <span class="token comment">// 十六进制ASCII码</span>\n<span class="token keyword">var</span> unicodeReg <span class="token operator">=</span> <span class="token regex">/[\\u0041-\\u0044]/g</span><span class="token punctuation">;</span> <span class="token comment">// Unicode码</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>OCTReg<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; ["A", "B", "C", "D"]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>sexadecimalReg<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; ["A", "B", "C", "D"]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>unicodeReg<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; ["A", "B", "C", "D"]</span>\n</code></pre> <p>可以看到把字符串内的 <code>A</code> <code>B</code> <code>C</code> <code>D</code>，都取出来了，最后的 <code>g</code> ，是修饰符。（下面解释）<br> 所以可以用过区间方式匹配两个码表的所有字符，比如用unicdoe匹配中文字符，中文字符的编码范围是<code>4E00-9FA5</code>，正则就写成<code>[\\u4E00-\\=u9FA5]</code>，另外还有很多。完整的<a href="https://baike.baidu.com/item/ASCII/309296?fr=aladdin">ASCII</a>和<a href="https://baike.baidu.com/item/Unicode/750500?fr=aladdin">Unicode</a>码表参考。</p> <h2><a id="g_m_i_241"></a>修饰符<code>g</code> <code>m</code> <code>i</code></h2> <p><code>g</code> 是 <code>global</code>全局匹配，默认情况下是非全局匹配，匹配到一个就结束，全局匹配是匹配所有数据。还有两个修饰符分别是 <code>i</code> <code>m</code><br> <code>i</code> 是 <code>ignoreCase</code> 忽略大小写的意思很好理解<br> <code>m</code> 是 <code>multiline</code> 多行匹配，比如 <code>/^a/</code> 只匹配第一行开头是否为 <code>a</code> ，而加了<code>m</code> ，就是每一行开头都匹配。比如下面：</p> <pre><code class="prism language-javascript"><span class="token keyword">var</span> ignoreCaseStr <span class="token operator">=</span> <span class="token string">\'[a-z]和[A-Z]是不同的\'</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> multilineStr <span class="token operator">=</span> <span class="token template-string"><span class="token string">`a同学大了b同学，b同学不满a同学打了他，就还手打了\na同学`</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> ignoreCaseReg <span class="token operator">=</span> <span class="token regex">/[A-Z]/gi</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> multilineReg <span class="token operator">=</span> <span class="token regex">/^a/gm</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> multilineStr<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>multilineReg<span class="token punctuation">,</span><span class="token string">\'A\'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; A同学大了b同学，b同学不满a同学打了他，就还手打了</span>\n<span class="token comment">// =&gt; A同学</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> ignoreCaseStr<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>ignoreCaseReg<span class="token punctuation">,</span> <span class="token string">\'x\'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; [x-x]和[x-x]是不同的</span>\n</code></pre> <p>可以看到行首的 <code>a</code> 替换成了 <code>A</code>，而中间的没有，第二个正则内只写了大写的字母匹配，加了 <code>i</code> 修饰符，小写的也被匹配到用<code>replace</code>方法替换成了<code>x</code>。</p> <h2><a id="_260"></a><code>()</code>组的用法</h2> <p><strong>元字符</strong>语法中说道，将<code>(</code> 和 <code>)</code> 之间的表达式定义为“组”（group），并且将匹配这个表达式的字符保存到一个临时区域（一个正则表达式中最多可以保存9个），它们可以用 <code>\\1</code> 到 <code>\\9</code> 的符号来引用。特殊用法除外。比如：</p> <pre><code class="prism language-javascript"><span class="token keyword">var</span> groupReg <span class="token operator">=</span> <span class="token regex">/([A-Z])([A-Z])\\2/g</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> groupStr <span class="token operator">=</span> <span class="token string">\'我们公司有很多ABB格式名字的同事，ABC、AB格式的不多，我们吃饭一般都是AA制\'</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> groupStr<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>groupReg<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; ["ABB"]</span>\n</code></pre> <p>上面输出了包含 <code>ABB</code> 的数组，正则的意思就是第一个<code>()</code> 内的匹配到<code>A</code> ，如果后面要引用 就用<code>\\1</code> 。但我们这里的例子用的 <code>\\2</code>，就是用的第二个<code>()</code> 内匹配到的数据，也就是<code>B</code>，所以<code>\\2</code> 内临时存的就是 <code>B</code>，因此这里只能匹配第二、第三个字母相同的数据。</p> <p>用上面写过的获取日期格式的正则来描述一下<code>()</code>组的用法。</p> <pre><code class="prism language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">\'今天是2020-01-12，天气很好。\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[01])/</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`$1年$2月$3日`</span></span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; 今天是2020年01月12日，天气很好。</span>\n</code></pre> <p>这里可以看到<code>2020-01-12</code> 替换成了 <code>2020年01月12日</code>，因为上面有三个<code>()</code>组，分别<code>\\1</code> 存了年、<code>\\2</code>存月、<code>\\3</code>存 日，然后使用<code>replace</code>。这里在替换中的用法就是<code>$</code> + number，和在正则中使用<code>\\</code>+ number，是一样的，都是一一对应的，并且也最多支持临时存9个。</p> <h2><a id="__282"></a>零宽断言 正则的预查</h2> <p>断言用来声明一个应该为真的事实。正则表达式中只有当断言为 <strong>真</strong> 时才会继续进行匹配。<br> 零宽断言分为以下四种：<br> <code>(?=pattern)</code> 零宽度 <strong>正预测先行</strong> 断言（也叫正向肯定预查）<br> 举例：查找<strong>15岁</strong>的小伙伴</p> <pre><code class="prism language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">\'小明17岁，小刚15岁，小红16岁，小茗15岁\'</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/[\\u4E00-\\u9FA5]{2}(?=15岁)/g</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; ["小刚", "小茗"]</span>\n</code></pre> <p>以上正则匹配 <strong>15岁</strong> 之前的两个中文字（不包含断言内的数据），所以输出了 <strong>小刚</strong>，<strong>小茗</strong></p> <p><code>(?&lt;=pattern)</code> 零宽度 <strong>正回顾后发</strong> 断言（也叫反向肯定预查）<br> 举例：查找<strong>小茗</strong>多少岁</p> <pre><code class="prism language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">\'小明17岁，小刚15岁，小红16岁，小茗15岁\'</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/(?&lt;=小茗)\\d{2}/g</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; ["15"]</span>\n</code></pre> <p>以上正则查找小茗后面的 <strong>两个数字</strong>（不包含断言内的数据），所以输出了 <strong>15</strong><br> <code>(?&lt;=pattern)</code> 和 <code>(?=pattern)</code> 同时使用就可以查某某区间的值，比如：</p> <pre><code class="prism language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">\'&lt;div&gt;我是div里的内容&lt;/div&gt;&lt;div&gt;我是第二个div的内容&lt;/div&gt;\'</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/(?&lt;=&lt;(div)&gt;).*(?=&lt;\\/\\1&gt;)/</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> reg2 <span class="token operator">=</span> <span class="token regex">/(?&lt;=&lt;(div)&gt;).*?(?=&lt;\\/\\1&gt;)/</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; 我是div里的内容&lt;/div&gt;&lt;div&gt;我是第二个div的内容</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg2<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; 我是div里的内容</span>\n</code></pre> <p>这里就输出了 <code>div</code> 标签里的内容，但是我们看到了两种情况。<br> 第一种输出最前端和最后端<code>div</code>之间的数据，第二种是只输出了前面<code>div</code>内的数据。<br> 这也涉及到<strong>贪婪模式</strong>（<code>*</code>，<code>+</code>，<code>?</code>，<code>{n}</code>，<code>{n,}</code>，<code>{n,m}</code>默认是贪婪模式），这些限制符后加上<code>?</code>，就是<strong>非贪婪模式</strong>，就像上方的例子一样，中间的 <code>.</code> <strong>元字符</strong> 一个是尽可能的多匹配，一个是尽可能的少匹配。</p> <p>我们在这里也使用了前面学到的，第一个<code>()</code> （零宽断言的括号不存数据）把取到的 <code>div</code> 暂存，在后面用 <code>\\1</code> 取了出来，相当于<code>&lt;\\/div&gt;</code>，<code>/</code> 需要转义所以使用了 <code>\\/</code>。</p> <p><code>(?!pattern)</code> 零宽度 <strong>负预测先行</strong> 断言（也叫正向否定预查）<br> 举例：查找不是 <strong>15岁</strong> 的小伙伴</p> <pre><code class="prism language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">\'小明17岁，小刚15岁，小红16岁，小茗15岁\'</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/[\\u4E00-\\u9FA5]{2}(?!15岁)/g</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt;  ["小明", "小红"]</span>\n</code></pre> <p>这个正则就查找了不是 <strong>15岁</strong> 结尾的前两个字（不包含断言内的数据），输出了不是15岁的 <strong>小明</strong>、<strong>小红</strong></p> <p><code>(?&lt;!pattern)</code> 零宽度 <strong>负回顾后发</strong> 断言（也叫反向否定预查）<br> 举例：查找 <strong>小红以外</strong> 的小伙伴年龄</p> <pre><code class="prism language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">\'小明17岁，小刚15岁，小红16岁，小茗15岁\'</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/(?&lt;!小红)\\d{2}/g</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt;  ["17", "15", "15"]</span>\n</code></pre> <p>这个正则就查找了 <strong>小红以外</strong> 后面跟着两个数字的数据（不包含断言内的数据），输出了 <strong>小红以外</strong> 其他小伙伴年龄。</p> <h2><a id="_341"></a>零宽断言之密码复杂度</h2> <p><strong><font size="4">零宽断言不但能匹配数据，同样也能判断数据，比如设置判断密码复杂度的正则：</font></strong><br> 规则：密码必须包含 字母、数字、_，6~32位。</p> <pre><code class="prism language-javascript"><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/(?=.*[a-zA-Z])(?=.*\\d)(?=.*_)^\\w{6,32}$/</span><span class="token punctuation">;</span>\n</code></pre> <p><img src="https://img-blog.csdnimg.cn/20200122215139798.gif" alt="在这里插入图片描述"><br> 这个正则前面的<strong>零宽断言</strong> <code>(?=.*[a-zA-Z])(?=.*\\d)(?=.*_)</code> 判断字符串是否出现 字母、数字、_ ，有的话正则就继续往下执行，直到执行<strong>消耗</strong>匹配 <code>^\\w{6,32}$</code> ，判断字符必须是字母、数字、_ 开头和结尾。<br> 至于为什么前面要写 <code>.*</code>，用两个<strong>连续的零宽断言</strong>测试就能知道了。<br> <code>(?=[a-zA-Z])</code> 能判断字符串内是否出现字母<br> <code>(?=[a-zA-Z])(?=\\d)</code> 无法判断字母或数字是否出现，因为判断存在冲突。<br> <img src="https://img-blog.csdnimg.cn/20200122213801132.gif" alt="在这里插入图片描述"><br> 从这张gif动图不难发现，当要匹配的数据是<strong>字母</strong>开头跟着<strong>数字</strong>时，断言<strong>数字</strong>的正则前方必须写已<strong>断言</strong>匹配到的<code>a</code>，反过来毅然。</p> <p>因为我们不能控制用户先输入字母、数字、_ 中的哪一个，所以我们在 <strong>零宽断言</strong> 上加 <code>.*</code> 匹配0个或多个<code>.</code>，是为了不管哪个类型的字符先输入，或者间隔多少字符再输入其它类型字符时，判断其它类型的<strong>零宽断言</strong>也能继续判断下去（再讲一遍 <code>.</code> 是匹配除换行和回车符以外任意单字符的）。</p> <p>简单讲，不管单个<strong>零宽断言</strong>还是多个<strong>零宽断言</strong>，都是<strong>断言</strong>的字符串位置，多个<strong>断言</strong>组合起来判断字符串中是否出现这个组合规则的位置，出现就返回<strong>true</strong>，不出现就返回<strong>fasle</strong>。</p> <p><strong><font size="2">以上内容不易理解就多读几遍，或者根据gif内容自行测试几遍。</font></strong></p> <p><strong><font size="4">再写一个密码验证</font></strong><br> 规则：密码必须包含 字母、数字、_中的至少两种6~32位。</p> <pre><code class="prism language-javascript"><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/(?=.*[a-zA-Z\\d])(?=.*[\\d_])(?=.*[a-zA-Z_])^\\w{6,32}$/</span><span class="token punctuation">;</span>\n</code></pre> <p><img src="https://img-blog.csdnimg.cn/20200122221649764.gif" alt="在这里插入图片描述"><br> 这里是三种类型字符取两种，这里的 <strong>零宽断言</strong> 判断的就是所有两两组合的情况，以此类推，四种类型取三种或者两种也是可以的，只是组合情况太多正则就比较长，就建议通过代码分开判断。</p> <h1><a id="_371"></a>结语</h1> <p>正则使用的地方有很多，用熟悉了能极大的提高工作效率，比如多数编辑器的搜索替换都是支持正则的，如果要替换或者搜索某个规律的字段，用正则无疑是最方便快捷的方式了。</p> <p>以上对正则的介绍就这些，看完这篇信息后，可以去<a href="https://baike.baidu.com/item/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/1700215?fr=aladdin">百度百科</a>上看更加详细的文档介绍，不过要注意，上面也有疏漏的地方，毕竟谁都可以改百度百科的内容。</p> <p>以上内容如有疏漏，或错误的地方欢迎指正，谢谢。</p> </div> </body> </html> ';n.exports=a},6398:function(n,s,a){"use strict";a("e6e4")},6903:function(n,s){var a='<!DOCTYPE html> <html> <head> <meta charset="utf-8"> <meta name="viewport" content="width=device-width,initial-scale=1"> <title>CSS 预编译语言 变量全局引用方式 vue-cli@3.0 stylus/sass/less 使用方法</title> <link rel="stylesheet" href="https://stackedit.io/style.css"/> </head> <body class="stackedit"> <div class="stackedit__html"><p></p><div class="toc"><h3>CSS 预编译语言 变量全局引用方式 vue-cli@3.0 stylus/sass/less 使用方法</h3><ul><li><a href="#_2">引言</a></li><li><a href="#stylus_7">stylus篇</a></li><ul><li><a href="#stylusvue_8">stylus文件与vue组件样式代码</a></li><li><a href="#stylus__23">stylus 全局变量引入方法一</a></li><li><a href="#stylus__38">stylus 全局变量引入方法二</a></li><li><a href="#stylus__61">stylus 全局变量引入方法三</a></li></ul><li><a href="#sassscss_80">sass/scss篇</a></li><ul><li><a href="#sassscssvue_81">sass/scss文件与vue组件样式代码</a></li><li><a href="#sass__96">sass 全局变量引入方法一</a></li><li><a href="#sass__119">sass 全局变量引入方法二</a></li><li><a href="#sass__159">sass 全局变量引入方法三</a></li></ul><li><a href="#less_178">less篇</a></li><ul><li><a href="#lessvue_179">less文件与vue组件样式代码</a></li><li><a href="#less__197">less 全局变量引入方法一</a></li><li><a href="#less__214">less 全局变量引入方法二</a></li><li><a href="#less__237">less 全局变量引入方法三</a></li></ul><li><a href="#_254">总结</a></li><ul><li><a href="#_255">问题</a></li></ul></ul></div><p></p> <h1><a id="_2"></a>引言</h1> <p>网上相关博客与教程很多，但是解决方式有些不明确，在此统一总结一下sass、stylus、less预编译css全局引用方法，每个均介绍三种方案，皆为本人实测，以下方案为vue-cli@3.0使用方法，使用较低版本的前端朋友可以参考，本人精力有限，暂时就只提供3.0版本解决方案。</p> <p><strong>因为有的小伙伴有一种或多种方法不生效，因此写了一个简单的例子，可以通过github下载，sass、less、stylus的三种方案都有</strong><br> 代码地址：<a href="https://github.com/rudyLittleLove/global-variable">https://github.com/rudyLittleLove/global-variable</a></p> <h1><a id="stylus_7"></a>stylus篇</h1> <h2><a id="stylusvue_8"></a>stylus文件与vue组件样式代码</h2> <pre><code class="prism language-css"><span class="token comment">/* variable.styl*/</span>\n$color = #00ffff\n</code></pre> <pre><code class="prism language-javascript"><span class="token comment">// vue组件内的style标签，将要使用上述变量的地方</span>\n<span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"stylus"</span><span class="token operator">&gt;</span>\n<span class="token punctuation">.</span>stylus\n  <span class="token operator">&gt;</span> div\n    color $color\n<span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span>\n</code></pre> <h2><a id="stylus__23"></a>stylus 全局变量引入方法一</h2> <p>使用<strong>css.loaderOptions</strong></p> <pre><code class="prism language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  css<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    loaderOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      stylus<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        <span class="token keyword">import</span><span class="token punctuation">:</span> <span class="token string">"~@/assets/variable.styl"</span>\n        <span class="token comment">// import: ["~@/assets/variable.styl", "~@/assets/variable2.styl"]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre> <h2><a id="stylus__38"></a>stylus 全局变量引入方法二</h2> <p>使用<strong>chainWebpack</strong><br> 需要安装 <strong>style-resources-loader</strong> 插件</p> <pre><code class="prism language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  chainWebpack<span class="token punctuation">:</span> config <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">const</span> oneOfsMap <span class="token operator">=</span> config<span class="token punctuation">.</span>module<span class="token punctuation">.</span><span class="token function">rule</span><span class="token punctuation">(</span><span class="token string">"stylus"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>oneOfs<span class="token punctuation">.</span>store<span class="token punctuation">;</span>\n    oneOfsMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      item\n        <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"style-resources-loader"</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">loader</span><span class="token punctuation">(</span><span class="token string">"style-resources-loader"</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n          <span class="token comment">// 需要插入的文件路径</span>\n          patterns<span class="token punctuation">:</span> <span class="token string">"./src/assets/variable.styl"</span>\n          <span class="token comment">// 需要插入的文件路径数组</span>\n          <span class="token comment">// patterns: ["./path/to/vars.styl", "./path/to/mixins.styl"]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre> <h2><a id="stylus__61"></a>stylus 全局变量引入方法三</h2> <p>使用<strong>pluginOptions</strong><br> 需要执行 <strong>vue add style-resources-loader</strong>命令<br> 命令执行会自动安装 <strong>vue-cli-plugin-style-resources-loader</strong>会自动提示使用什么预编译语言、会根据你选择的自动配置，只需要填写 引用文件的路径<br> 友情提示：如果使用此方法安装了以上插件，而又放弃这种方案，编译时可能会报错，可以<strong>npm uninstall vue-cli-plugin-style-resources-loader</strong> 卸载此插件。</p> <pre><code class="prism language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  pluginOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token string">"style-resources-loader"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      preProcessor<span class="token punctuation">:</span> <span class="token string">"stylus"</span><span class="token punctuation">,</span>\n      patterns<span class="token punctuation">:</span> <span class="token string">"./src/assets/variable.styl"</span>\n      <span class="token comment">// patterns: ["./src/assets/variable.styl"]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre> <p><img src="https://img-blog.csdnimg.cn/20191226163935137.gif" alt="stylue 全局变量引入方法"></p> <h1><a id="sassscss_80"></a>sass/scss篇</h1> <h2><a id="sassscssvue_81"></a>sass/scss文件与vue组件样式代码</h2> <pre><code class="prism language-css"><span class="token comment">/* variable.scss */</span>\n$<span class="token property">color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>\n</code></pre> <pre><code class="prism language-javascript"><span class="token comment">// vue组件内的style标签，将要使用上述变量的地方</span>\n<span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"scss"</span><span class="token operator">&gt;</span>\n<span class="token punctuation">.</span>scss div <span class="token punctuation">{</span>\n  color<span class="token punctuation">:</span> $color<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span>\n</code></pre> <h2><a id="sass__96"></a>sass 全局变量引入方法一</h2> <p>使用<strong>css.loaderOptions</strong><br> 此处友情提示 sass-loader v7 之前使用 data：’’ 之后使用prependData：‘’请根据项目sass-loader版本选择<br> <strong>重点提示！！！！ 引用处分号“；”不能缺少</strong>，缺少直接报错，因为此方法是直接插入语句块至项目中使用sass语法的标签内，sass语法强制必须使用分号“；”结尾，更详细讲解请参考vue-cli官方文档。<br> <a href="https://cli.vuejs.org/zh/guide/css.html#%E5%90%91%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8-loader-%E4%BC%A0%E9%80%92%E9%80%89%E9%A1%B9">vue-cli向预处理器 Loader 传递选项</a><br> sass与scss区别请别处学习<br> <a href="http://sass.bootcss.com/docs/scss-for-sass-users/">SCSS 与 Sass 异同</a></p> <pre><code class="prism language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  css<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    loaderOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      sass<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        <span class="token comment">// data：`@import "~@/assets/variable.scss";` v7之前使用 的是data，现在改成了prependData</span>\n        prependData<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`@import "~@/assets/variable.scss";`</span></span>\n        <span class="token comment">/* prependData: `\n              @import "~@/assets/variable.scss";\n              @import "~@/assets/variable2.scss";\n          ` */</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre> <h2><a id="sass__119"></a>sass 全局变量引入方法二</h2> <p>使用<strong>chainWebpack</strong><br> 根据使用方法选择安装插件 <strong>style-resources-loader</strong>或者<strong>sass-resource-loader</strong><br> 友情提醒：**patterns: “./src/assets/variable.scss”**引用的scss文件，如果文件内语法存在问题，也会直接报错，此处不需要在引用处最后添加分号“；”，文件内请根据sass与scss语法规则编辑，如果我没有料错，此方法应该是把引用文件的内容插入目标文件，而非上文方法提到的插入一个import<br> 使用方法代码如下：</p> <pre><code class="prism language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  chainWebpack<span class="token punctuation">:</span> config <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// 需要安装 style-resources-loader 插件</span>\n    <span class="token keyword">const</span> oneOfsMap <span class="token operator">=</span> config<span class="token punctuation">.</span>module<span class="token punctuation">.</span><span class="token function">rule</span><span class="token punctuation">(</span><span class="token string">"scss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>oneOfs<span class="token punctuation">.</span>store<span class="token punctuation">;</span>\n    oneOfsMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      item\n        <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"style-resources-loader"</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">loader</span><span class="token punctuation">(</span><span class="token string">"style-resources-loader"</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n          <span class="token comment">// 需要插入的文件路径</span>\n          patterns<span class="token punctuation">:</span> <span class="token string">"./src/assets/variable.scss"</span>\n          <span class="token comment">// 需要插入的文件路径数组</span>\n          <span class="token comment">// patterns: ["./path/to/vars.styl", "./path/to/mixins.styl"]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 也可以使用 sass-resource-loader 插件</span>\n    <span class="token comment">// const oneOfsMap = config.module.rule("scss").oneOfs.store;</span>\n    <span class="token comment">// oneOfsMap.forEach(item =&gt; {</span>\n    <span class="token comment">//   item</span>\n    <span class="token comment">//     .use("sass-resources-loader")</span>\n    <span class="token comment">//     .loader("sass-resources-loader")</span>\n    <span class="token comment">//     .options({</span>\n    <span class="token comment">//       // 需要插入的文件路径</span>\n    <span class="token comment">//       resources: "./src/assets/variable.scss"</span>\n    <span class="token comment">//       // 需要插入的文件路径数组</span>\n    <span class="token comment">//       // resources: ["./path/to/vars.scss", "./path/to/mixins.scss"]</span>\n    <span class="token comment">//     })</span>\n     <span class="token comment">//    .end();</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre> <h2><a id="sass__159"></a>sass 全局变量引入方法三</h2> <p>使用<strong>pluginOptions</strong><br> 需要执行 <strong>vue add style-resources-loader</strong>命令<br> 命令执行会自动安装 <strong>vue-cli-plugin-style-resources-loader</strong>会自动提示使用什么预编译语言、会根据你选择的自动配置，只需要填写 引用文件的路径<br> 友情提示：如果使用此方法安装了以上插件，而又放弃这种方案，编译时可能会报错，可以<strong>npm uninstall vue-cli-plugin-style-resources-loader</strong> 卸载此插件。</p> <pre><code class="prism language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  pluginOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token string">"style-resources-loader"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      preProcessor<span class="token punctuation">:</span> <span class="token string">"scss"</span><span class="token punctuation">,</span>\n\t<span class="token comment">//  patterns: "./src/assets/variable.scss",</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"./src/assets/variable.scss"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre> <p><img src="https://img-blog.csdnimg.cn/20191226164007976.gif" alt="stylus 全局变量引入方法"></p> <h1><a id="less_178"></a>less篇</h1> <h2><a id="lessvue_179"></a>less文件与vue组件样式代码</h2> <pre><code class="prism language-css"><span class="token comment">/* variable.less */</span>\n<span class="token atrule"><span class="token rule">@color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span></span>\n</code></pre> <pre><code class="prism language-javascript"><span class="token comment">// vue组件内的style标签，将要使用上述变量的地方</span>\n<span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"less"</span><span class="token operator">&gt;</span>\n<span class="token punctuation">.</span>less <span class="token punctuation">{</span>\n  <span class="token operator">&gt;</span> div <span class="token punctuation">{</span>\n    color<span class="token punctuation">:</span> @color<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span>\n</code></pre> <h2><a id="less__197"></a>less 全局变量引入方法一</h2> <p>使用<strong>css.loaderOptions</strong><br> less此方法只支持变量key:value赋值，若要使用less文件中变量，请使用以下两种方案</p> <pre><code class="prism language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  css<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  \tloaderOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n\t  less<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        globalVars<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          <span class="token string">"@color"</span><span class="token punctuation">:</span> <span class="token string">"#f00"</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre> <h2><a id="less__214"></a>less 全局变量引入方法二</h2> <p>使用<strong>chainWebpack</strong><br> 需要安装 <strong>style-resources-loader</strong> 插件</p> <pre><code class="prism language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  chainWebpack<span class="token punctuation">:</span> config <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// 需要安装 style-resources-loader 与stylus一致</span>\n    <span class="token keyword">const</span> oneOfsMap <span class="token operator">=</span> config<span class="token punctuation">.</span>module<span class="token punctuation">.</span><span class="token function">rule</span><span class="token punctuation">(</span><span class="token string">"less"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>oneOfs<span class="token punctuation">.</span>store<span class="token punctuation">;</span>\n    oneOfsMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      item\n        <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"style-resources-loader"</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">loader</span><span class="token punctuation">(</span><span class="token string">"style-resources-loader"</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n          <span class="token comment">// 需要插入的文件路径</span>\n          patterns<span class="token punctuation">:</span> <span class="token string">"./src/assets/variable.less"</span>\n          <span class="token comment">// 需要插入的文件路径数组</span>\n          <span class="token comment">// patterns: ["./path/to/vars.less", "./path/to/mixins.less"]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre> <h2><a id="less__237"></a>less 全局变量引入方法三</h2> <p>使用<strong>pluginOptions</strong><br> 需要执行 <strong>vue add style-resources-loader</strong>命令<br> 命令执行会自动安装 <strong>vue-cli-plugin-style-resources-loader</strong>会自动提示使用什么预编译语言、会根据你选择的自动配置，只需要填写 引用文件的路径<br> 友情提示：如果使用此方法安装了以上插件，而又放弃这种方案，编译时可能会报错，可以<strong>npm uninstall vue-cli-plugin-style-resources-loader</strong> 卸载此插件。</p> <pre><code class="prism language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  pluginOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  \t<span class="token string">"style-resources-loader"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      preProcessor<span class="token punctuation">:</span> <span class="token string">"less"</span><span class="token punctuation">,</span>\n      patterns<span class="token punctuation">:</span> <span class="token string">"./src/assets/variable.less"</span>\n      <span class="token comment">// patterns: ["./src/assets/variable.less"]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre> <p><img src="https://img-blog.csdnimg.cn/20191226164041747.gif" alt="less 全局变量引入方法"></p> <h1><a id="_254"></a>总结</h1> <h2><a id="_255"></a>问题</h2> <p>使用<strong>path</strong>与不使用区别请自行学习，本文乃各种用法演示<br> <a href="http://nodejs.cn/api/path.html">http://nodejs.cn/api/path.html</a></p> <p>以上解决方案带来的实际效果是变量插入到了目标文件，但不单单是变量会插入，链接文件所有数据都会插入到目标文件中，比如css 函数、mixin 也是一样的，借用此方式可以完成更多功能，大家可以自行思考。</p> <p>再贴一遍以上例子的github仓库地址<br> <a href="https://github.com/rudyLittleLove/global-variable">https://github.com/rudyLittleLove/global-variable</a></p> <p>如有错误，欢迎指正，谢谢</p> </div> </body> </html> ';n.exports=a},"8dd4":function(n,s){var a='<!DOCTYPE html> <html> <head> <meta charset="utf-8"> <meta name="viewport" content="width=device-width,initial-scale=1"> <title>elementUI el-form 组件 验证 提示不能为空，以及验证不生效的详细原因</title> <link rel="stylesheet" href="https://stackedit.io/style.css"/> </head> <body class="stackedit"> <div class="stackedit__html"><p></p><div class="toc"><h3>elementUI el-form 组件 验证 提示不能为空，以及验证不生效的详细原因</h3><ul><li><a href="#_1">唠唠嗑</a></li><li><a href="#_6">如何进行验证的</a></li><li><a href="#__42">获取验证规则 源码处写法</a></li><li><a href="#__58">获取需验证的值 源码处写法</a></li><li><a href="#_75">上述使用中常见问题场景</a></li><li><a href="#_84">结语</a></li></ul></div><p></p> <h1><a id="_1"></a>唠唠嗑</h1> <p>用<code>vue</code> + <code>elementUI</code> 开发有些日子了，经常在使用<code>el-form</code> 组件时，时不时的出现验证没生效，或者生效了在验证函数中 <code>value</code> 是 <code>undefined</code>，也细细的读了<code>elementUI</code> 的文档。有些信息交代的比较模糊，最后还是看了<code>elementUI</code> 的源码才确认下来之前一直猜测的东西。</p> <p>今天就专门分享一下，看<code>el-from</code> 这个组件验证相关的源码所了解到的东西。</p> <h1><a id="_6"></a>如何进行验证的</h1> <p>如果要使用<code>el-from</code> 组件的验证，必不可少的三样是</p> <p>1.<code>el-form</code> 组件上的 <code>model</code> 属性，这里很容易错误的写成 <code>data</code></p> <p>2.<code>el-form</code> 组件上的 <code>rules</code> 属性 或者 <code>el-form-item</code> 组件上的 <code>rules</code> 属性</p> <p>3.<code>el-form-item</code> 组件上的 <code>prop</code> 属性</p> <p><code>el-form</code> 组件上的 <code>model</code> 和 <code>rules</code> 一个是整个表单的数据源，一个是验证规则源。默认通过 <code>el-form-item</code> 组件上的 <code>prop</code> 获取对应源上面的数据与规则进行验证，<code>el-form-item</code> 的 <code>prop</code> 属性传入的参数被共用了，所以你会发现 <code>rules</code> 和 <code>model</code> 上面的 <code>property</code> 默认是一样的。就像下面这个例子 都是使用的 <code>name</code> 和 <code>age</code>。</p> <pre><code class="prism language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n\t<span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tformData<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n\t\t\tname<span class="token punctuation">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span>\n\t\t\tage<span class="token punctuation">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\trules<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n\t\t\tname<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">\'请输入名字\'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n\t\t\tage<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">\'请输入年龄\'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre> <p>也可以看 <code>elementUI</code> <a href="https://element.eleme.cn/#/zh-CN/component/form#biao-dan-yan-zheng">表单验证的demo</a>，详细看看属性对应情况。</p> <p>当要进行复杂的验证，比如数组的时候， 我们通过 <code>el-form-item</code> 以 <code>:prop="\'domains.\' + index + \'.value\'"</code> 这种格式（数据路径）传进去。</p> <p><code>elementUI</code> 有一个 公共的方法 <code>getPropByPath</code>, 循环遍历出 <code>model</code> 这个数据源中 对应的数组内的数据。<br> 比如上方这个格式的例子，先从<code>model</code>中找<code>domains</code>这个数组，再找 <code>index</code> 也就是数组中第几个数据，再找这个数据的 <code>vlaue</code> 属性<br> 即使是二维数组也会一层一层找下去，只要 <code>prop</code> 传递的参数正确，都能找对对应的值</p> <p>使用这种方式就打破了原来 <strong>数据源</strong> 和 <strong>验证规则源</strong> <code>property</code> 相同的规则，于是就只能通过 <code>el-form-item</code> 这个组件的 <code>rules</code> 属性，单独给这个组件传入 验证规则，也就是 <code>elementUI</code> <a href="https://element.eleme.cn/#/zh-CN/component/form#dong-tai-zeng-jian-biao-dan-xiang">动态增减表单项 demo</a> 处写的。</p> <h1><a id="__42"></a>获取验证规则 源码处写法</h1> <pre><code class="prism language-javascript"> <span class="token function">getRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">let</span> formRules <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">.</span>rules<span class="token punctuation">;</span>\n   <span class="token keyword">const</span> selfRules <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rules<span class="token punctuation">;</span>\n   <span class="token keyword">const</span> requiredRule <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>required <span class="token operator">!==</span> undefined <span class="token operator">?</span> <span class="token punctuation">{</span> required<span class="token punctuation">:</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>required <span class="token punctuation">}</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n   <span class="token keyword">const</span> prop <span class="token operator">=</span> <span class="token function">getPropByPath</span><span class="token punctuation">(</span>formRules<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>prop <span class="token operator">||</span> <span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   formRules <span class="token operator">=</span> formRules <span class="token operator">?</span> <span class="token punctuation">(</span>prop<span class="token punctuation">.</span>o<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>prop <span class="token operator">||</span> <span class="token string">\'\'</span><span class="token punctuation">]</span> <span class="token operator">||</span> prop<span class="token punctuation">.</span>v<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n   <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>selfRules <span class="token operator">||</span> formRules <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>requiredRule<span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre> <p>从获取验证规则最后一句就可以看出，默认最优先取 <code>selfRules</code> 也就是通过 <code>el-form-item</code> 的 <code>rules</code> 属性传入的，其次就是通过 <code>el-form</code> 的 <code>rules</code> 属性 获取的 <code>formRules</code>。</p> <h1><a id="__58"></a>获取需验证的值 源码处写法</h1> <pre><code class="prism language-javascript"> <span class="token function">fieldValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">const</span> model <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">.</span>model<span class="token punctuation">;</span>\n   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>model <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>prop<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n   <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>prop<span class="token punctuation">;</span>\n   <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">\':\'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     path <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/:/</span><span class="token punctuation">,</span> <span class="token string">\'.\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n\n   <span class="token keyword">return</span> <span class="token function">getPropByPath</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> path<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>\n <span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre> <p>这里可以看到 <code>el-form-item</code> 的 <code>prop</code> 属性没传参数 或者 <code>el-form</code> 的 <code>model</code> 没传参数 都不会往下走，也就是即使进入验证规则中，<code>value</code> 值也是 <code>undefined</code>。</p> <h1><a id="_75"></a>上述使用中常见问题场景</h1> <p><strong>1 验证函数没进入，或者验证都不出现</strong><br> 这种情况 <code>el-form</code> 上的 <code>rules</code> 忘记写了，或者 <code>el-form-item</code> 上的 <code>prop</code> 的值并不存在与 <strong>验证规则源</strong>中，或者使用类似动态增删的方式，未单独给<code>el-form-item</code> 的 <code>rules</code> 属性添加验证规则</p> <p><strong>2 验证函数进入，<code>value</code> 是 <code>undefined</code></strong><br> 这种情况 一般是 <code>el-form</code> 上的 <code>model</code> 没写 或者写错，或者是 <code>el-form-item</code> 通过 <code>prop</code> 传入的 <code>property</code> 在 <code>model</code> 传入的数据源 中 找不到对应的参数，对照修改一下就行。</p> <p>整体来看，<code>el-form</code> 这个组件的验证其实还是写得还是很通俗易懂的，主要的验证处理都在 <code>el-form-item</code> 这个组件上了，<code>el-form</code> 也只承担了公共的数据源存储，以及公共方法的调用。</p> <h1><a id="_84"></a>结语</h1> <p>好了，加班时间算是打发过去了，该下班了 ^ _ ^。</p> <p>以上信息如有错误或疏漏，欢迎指正哈，谢谢。</p> </div> </body> </html> ';n.exports=a},"930f":function(n,s){var a='<!DOCTYPE html> <html> <head> <meta charset="utf-8"> <meta name="viewport" content="width=device-width,initial-scale=1"> <title>JavaScript 多线程处理计算密集型或高延迟的任务时，避免页面卡顿的方法</title> <link rel="stylesheet" href="https://stackedit.io/style.css"/> </head> <body class="stackedit"> <div class="stackedit__html"><p></p><div class="toc"><h3>JavaScript 多线程处理计算密集型或高延迟的任务时，避免页面卡顿的方法</h3><ul><li><a href="#_1">引言</a></li><li><a href="#_4">单线程处理大数据演示</a></li><ul><li><a href="#_5">单线程去重代码</a></li><li><a href="#_38">动图演示</a></li></ul><li><a href="#_42">多线程处理大数据演示</a></li><ul><li><a href="#_43">多线程去重代码</a></li><li><a href="#_86">动图演示</a></li></ul><li><a href="#_89">总结</a></li></ul></div><p></p> <h1><a id="_1"></a>引言</h1> <p>  前一段时间，写了一个前端去重的博文。在处理千万级的数据时，即使不考虑兼容选用效率最高的方式，也需要几秒钟才能处理完（具体时长主要受数据重复率影响），这样会造成页面卡死的结果。因为JavsScript是单线程处理的，所以在数据未处理完时，后面的任务会等待。今天就来解决一下因任务量过大，造成的页面卡顿如何解决。</p> <h1><a id="_4"></a>单线程处理大数据演示</h1> <h2><a id="_5"></a>单线程去重代码</h2> <pre><code class="prism language-javascript"><span class="token comment">// 创建一个五百万条，重复10%的数据</span>\n<span class="token keyword">var</span> arr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">5000000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>item2<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> i <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">&lt;</span> <span class="token number">0.1</span> <span class="token operator">||</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 去重函数</span>\n<span class="token keyword">function</span> <span class="token function">distinct</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> newArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> newMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>newMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// newMap.has(arr[i])</span>\n      newMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      newArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> newArray<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 输出耗时数据函数</span>\n<span class="token keyword">function</span> <span class="token function">printTime</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`数据长度：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>arr<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">"耗时"</span><span class="token punctuation">)</span>\n  <span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token function">distinct</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">"耗时"</span><span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`数据重复量：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> newArr<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 执行去重并后续跟随其余代码</span>\n<span class="token function">printTime</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'去重后的代码执行\'</span><span class="token punctuation">)</span>\n</code></pre> <h2><a id="_38"></a>动图演示</h2> <p><img src="https://img-blog.csdnimg.cn/20200325112232291.gif" alt="在这里插入图片描述"><br> 这里可以看到去重后面的代码，是要去重完全结束后才会去执行。还有小伙伴们可以自行把代码复制到自己的浏览器中运行，可以发现，页面会处于短暂的卡顿现象。因为JavaScript 语言采用的是单线程模型，因此中途如果处理像上方的计算密集型或高延迟的去重，就会造成页面卡顿，会给用户造成不好的体验。</p> <h1><a id="_42"></a>多线程处理大数据演示</h1> <h2><a id="_43"></a>多线程去重代码</h2> <pre><code class="prism language-javascript"><span class="token comment">// 创建一个五百万条，重复10%的数据</span>\n<span class="token keyword">var</span> arr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">5000000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>item2<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> i <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">&lt;</span> <span class="token number">0.1</span> <span class="token operator">||</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 去重函数</span>\n<span class="token comment">// 将要放入Worker线程的函数，此处为处理完数据后，将数据post出去，然后在主线程监听捕获。</span>\n<span class="token keyword">function</span> <span class="token function">distinct</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> arr <span class="token operator">=</span> e<span class="token punctuation">.</span>data<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> newArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> newMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>newMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// newMap.has(arr[i])</span>\n      newMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      newArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  self<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>newArray<span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span>\n\n<span class="token comment">// 创建Worker线程</span>\n<span class="token keyword">var</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token template-string"><span class="token string">`\n    self.addEventListener(\'message\', </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>distinct<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, false);\n`</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 内部字符串内容将在Worker线程中执行，监听主线程发送来的数据，并使用上方的去重函数处理</span>\n<span class="token keyword">var</span> url <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 主线程监听worker线程返回的数据</span>\nworker<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'message\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">"耗时"</span><span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`数据重复量：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> event<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>\n  worker<span class="token punctuation">.</span><span class="token function">terminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 使用完后需关闭 Worker</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 执行去重并后续跟随其余代码</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`数据长度：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>arr<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">"耗时"</span><span class="token punctuation">)</span>\nworker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// 发送数据至Worker线程处理</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'去重后的代码执行\'</span><span class="token punctuation">)</span>\n</code></pre> <h2><a id="_86"></a>动图演示</h2> <p><img src="https://img-blog.csdnimg.cn/20200325112815720.gif" alt="在这里插入图片描述"><br> 这里可以看到，去重后的代码执行不会受去重影响，去重完成后要处理的任务，会在主线程的监听Worker线程事件中触发，然后执行任务，虽然看起来耗时稍微长了，但是因为是开辟一个新的Worker线程，所以不会造成页面卡顿，用户体验就上升了。</p> <h1><a id="_89"></a>总结</h1> <p>这里主要演示了在处理计算密集型或高延迟的任务时，如何让页面不卡顿，Worker 的更多使用方法可以去<a href="http://www.ruanyifeng.com/blog/2018/07/web-worker.html">阮老师的教程</a>中学习，也可以去MDN 看<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Worker">Worker API</a> 和上方用到的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob">Blob</a>，上述去重代码使用的是 <a href="https://blog.csdn.net/rudy_zhou/article/details/103971730">这篇博客中Map方法去重</a>，有兴趣的同学可以去看看。</p> <p>以上如有错误或疏漏请指正，谢谢。</p> </div> </body> </html> ';n.exports=a},"970d":function(n,s){var a='<!DOCTYPE html> <html> <head> <meta charset="utf-8"> <meta name="viewport" content="width=device-width,initial-scale=1"> <title>开发小技巧之调试DOM</title> <link rel="stylesheet" href="https://stackedit.io/style.css"/> </head> <body class="stackedit"> <div class="stackedit__html"><p></p><div class="toc"><h3>开发小技巧之调试移开消失的元素</h3><ul><li><a href="#_1">引言</a></li><li><a href="#_3">伪类</a></li><li><a href="#className_15">增删className</a></li><li><a href="#DOM_19">增删DOM</a></li><li><a href="#_30">总结</a></li></ul></div><p></p> <h1><a id="_1"></a>引言</h1> <p>&nbsp;&nbsp;&nbsp;&nbsp;大多数小伙伴都遇到过一种调试情况，想调试页面中的某个元素，查看该元素的样式或者其他信息。鼠标移上去的时候或者点击的时候存在，移开就消失了，以至于不能用选择页面元素工具查看。今天就来整理一下什么功能会出现这种情况，以及该如何调试这种情况的元素。</p> <h1><a id="_3"></a>伪类</h1> <p>最常见的也是最普通的情况就是伪类，其中<code>:hover</code> , <code>:focus</code>是最常见的，很多菜单就是通过这两种伪类做的下拉悬浮，最不易察觉的样式是<code>:focus</code> 伪类选择器中的样式。<br> 比如<code>chrome</code>中元素获取焦点的样式<br> <img src="https://img-blog.csdnimg.cn/20200220165051773.gif" alt="在这里插入图片描述">仔细看的话会发现，<code>input</code>输入框在获取焦点时有个默认的<code>outline</code> 外边轮廓，而图片中选择的<code>div.content</code>在勾选上<code>focus</code>伪类选择时也出现了一个蓝色的<code>outline</code> 外边轮廓。<br> 正常情况下<code>div.content</code> 是无法获取焦点的，所以我们很少见到，但是<code>input</code> 输入框我们经常见到，有很多新手不知道这个默认的<code>outline</code>，想把这个样式修改又不知从何修改，而这里的<code>-webkit-focus-ring-color</code> 指的是<code>chrome</code> 获取焦点的颜色变量，从样式计算结果可以看到这个颜色值是<code>rgb(77, 144, 254)</code>。</p> <p>比如github的登录页输入框就用了<code>:focus</code> 伪类选择器设置了输入框的<code>box-shaodw:</code>的<code>spread</code>(阴影的大小)。<br> <img src="https://img-blog.csdnimg.cn/20200220173222312.gif" alt="在这里插入图片描述"><br> 之前在StackOverflow 上也碰到过有人问像上面提到的样式怎么去掉，其实只要知道了这个样式是获取焦点时才出现，<strong>勾选上调试窗口的<code>:focus</code>伪类选择</strong>就能知道这个样式的具体信息了。</p> <p>与<code>:focus</code>伪类选择类似的<code>:hover</code>伪类选择也一样，只是触发的条件由获取焦点换成了在元素上悬浮，失去焦点消失变成了移开元素消失，调试这种情况也只需要<strong>勾选上调试窗口的<code>:hover</code>伪类选择</strong>就行。其他伪类选择也是一样，勾选对应的选择就行。<br> <img src="https://img-blog.csdnimg.cn/20200221095429293.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1ZHlfemhvdQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p> <h1><a id="className_15"></a>增删className</h1> <p>通过事件驱动，给DOM增删className控制样式，比如百度网盘的下拉菜单。<br> <img src="https://img-blog.csdnimg.cn/20200220182155569.gif" alt="在这里插入图片描述"><br> 这里在<code>div.g-dropdown-button</code>这个DOM上增删了<code>.button-open</code> 这个className，用<code>.g-dropdown-button.button-open&gt;.menu</code>选择器控制了<code>.menu</code>这个DOM的展示与隐藏，对于这种情况还是比较容易调试的，因为这里只是控制了DOM的隐藏和显示，DOM还是一直存在与document之中的，想更改样式还是比较容易的。</p> <h1><a id="DOM_19"></a>增删DOM</h1> <p>调试DOM最麻烦的就是这种，通过事件驱动，对触发的事件创建或者删除对应的DOM，比如一个下拉菜单，移动到按钮上，触发<code>mouseenter</code>事件，然后创建了一个下拉框的DOM，移出这个下拉框，触发<code>mouseleave</code>事件，删除了这个下拉框DOM，这个时候想要调试更改这个下拉框的样式就比较麻烦，因为移开DOM就被实时删除，无法查看这个DOM的样式，更没法调试更改样式，举个例子。<br> <img src="https://img-blog.csdnimg.cn/20200220184019737.gif" alt="在这里插入图片描述"><br> 由于没找到网上例子，目前只找到移入创建DOM，移出不删除的例子，待会儿下面手写一个功能再看，现在这里可以看到移入<code>button</code> 标签时，在document中<code>body</code>标签内最下方创建了一个<code>tooltip</code>提示的DOM，这里很多新手不知道怎么查看以及更改<code>tooltip</code>提示的样式。在移出<code>button</code>未删除的情况下根据提示内容在文档中搜索一下就能找到，但是移出<code>button</code>就删除对应的DOM的情况下就需用用到<code>debugger</code>(断点)调试的方式了，<code>debugger</code>因为可以中断js进程，所以移出<code>button</code>之前进入<code>debugger</code> 就能用调试器更改DOM的样式了。</p> <p>只需要在Consle下，用一个计时器<code>setTimeout(() =&gt; { debugger }, 2000)</code> 延时进入断点就好，时长根据页面操作复杂度自行决定，先执行这个计时器，再移到页面中触发事件，弹出临时创建的DOM，只需等待进入断点即可，最后再调试。</p> <p>下面用断点调试法尝试解决以上谈到的问题<br> <img src="https://img-blog.csdnimg.cn/20200220190233988.gif" alt="在这里插入图片描述"><br> 这里就写了一个移入按钮创建提示的DOM，移出就删除。例子可以很明显的看到，移动到<code>测试按钮</code>上创建了一个<code>.test-class</code>的DOM，移出<code>测试按钮</code>就删除 <code>.test-class</code>这个DOM，因为移出就没办法调试，所以使用上诉提到的办法，用计时器延时进入断点，进入断点后可以看到，再次移出<code>测试按钮</code>，<code>.test-class</code>这个DOM不会消失，这样就可以使用样式调试工具，更改样式了。</p> <h1><a id="_30"></a>总结</h1> <p>总的来讲，页面调试只要掌握了规律，其实很容定位，不同浏览器对样式的解析有较多差异，如何在不同浏览器上写出相同呈现效果的页面，调试是必不可少的一部分，希望每一位同学都能熟练的调试DOM。</p> <p>以上如有疏漏或错误，欢迎指正。</p> </div> </body> </html> ';n.exports=a},"9f1c":function(n,s){var a='<!DOCTYPE html> <html> <head> <meta charset="utf-8"> <meta name="viewport" content="width=device-width,initial-scale=1"> <title>深入理解CSS之 如何使子元素撑宽 设置了 block 的父元素</title> <link rel="stylesheet" href="https://stackedit.io/style.css"/> </head> <body class="stackedit"> <div class="stackedit__html"><p></p><div class="toc"><h3>深入理解CSS之 如何使子元素撑宽 设置了display: block; 的父元素</h3><ul><li><a href="#_2">先写一个模板，晚点再吐槽</a></li><li><a href="#_36">吐槽</a></li><li><a href="#___68">实现原理 与 更多支持的属性</a></li><li><a href="#___86">不想使父级的 块 属性消失怎么办</a></li><li><a href="#_104">这种属性规则有什么作用呢</a></li></ul></div><p></p> <h1><a id="_2"></a>先写一个模板，晚点再吐槽</h1> <p>HTML</p> <pre><code class="prism language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>grandpa<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>我是一个子元素，我要写很多字把宽度撑开，我要写很多字把宽度撑开，我要写很多字把宽度撑开，我要写很多字把宽度撑开<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre> <p>CSS</p> <pre><code class="prism language-css"><span class="token selector">.wrap</span> <span class="token punctuation">{</span>\n  <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>\n  <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 3px 1px #000000<span class="token punctuation">;</span>\n  <span class="token property">padding</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.grandpa</span> <span class="token punctuation">{</span>\n  <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 3px 1px peru<span class="token punctuation">;</span>\n  <span class="token property">padding</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.father</span> <span class="token punctuation">{</span>\n  <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 3px 1px royalblue<span class="token punctuation">;</span>\n  <span class="token property">padding</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.child</span> <span class="token punctuation">{</span>\n  <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre> <p>效果图<br> <img src="https://img-blog.csdnimg.cn/20200605111015899.png" alt="在这里插入图片描述"></p> <h1><a id="_36"></a>吐槽</h1> <p>可能看到这个标题的并且懂一点 <code>css</code> 的小伙伴就要笑了，子元素称宽父元素不是很简单吗。</p> <p>只需要设置父元素 <code>display</code> 为 <code>inline-block</code>, 或者 设置 <code>float: left</code> 并清除一下浮动影响就行，就像下面这样。</p> <pre><code class="prism language-css"><span class="token selector">.father</span> <span class="token punctuation">{</span>\n  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre> <p><img src="https://img-blog.csdnimg.cn/20200605111338826.png" alt="在这里插入图片描述"></p> <pre><code class="prism language-css"><span class="token selector">.father</span> <span class="token punctuation">{</span>\n  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span> <span class="token comment">/* 未清除浮动 */</span>\n<span class="token punctuation">}</span>\n</code></pre> <p><img src="https://img-blog.csdnimg.cn/20200605111443487.png" alt="在这里插入图片描述"></p> <p>或者对 <code>css</code> 理解更深入的小伙伴也会想</p> <p>也可以设置 爷爷（父元素的父元素） 元素 <code>display</code> 为 <code>flex</code> 或者 <code>grid</code>，就像下面这样。</p> <pre><code class="prism language-css"><span class="token selector">.grandpa</span><span class="token punctuation">{</span>\n  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre> <pre><code class="prism language-css"><span class="token selector">.grandpa</span><span class="token punctuation">{</span>\n  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre> <p><img src="https://img-blog.csdnimg.cn/20200605112014991.png" alt="在这里插入图片描述"></p> <h1><a id="___68"></a>实现原理 与 更多支持的属性</h1> <p>上面的属性不管是<code>.father</code> 设置 <code>display: inline-block</code> 或 <code>float: left;</code> ，</p> <p>还是 <code>.grandpa</code> 设置 <code>display: flex;</code> 或 <code>display: grid;</code></p> <p>都是使 <code>.father</code> 这个<code>DOM</code> 最大宽度不受 <code>.grandpa</code> 限制，</p> <p>唯一的区别是每个属性还带有其他个性的样式，</p> <p>比如 设置了 <code>float</code> 默认就无法撑开高度</p> <p>设置了 <code>display: grid</code> 即使文本过少，<code>.father</code> 的宽度默认与<code>.grandpa</code> 相同</p> <p>只要满足 <code>.father</code> 自动宽度 不受 <code>.grandpa</code> 最大宽度限制就能实现这个效果的话，<code>display</code> 的很多属性都能实现。</p> <p>比如： <code>inline-flex</code>, <code>inline-table</code>, <code>inline-grid</code>, <code>table</code>, <code>table-captioin</code>, <code>table-cell</code> …，看下面的例子。<br> <img src="https://img-blog.csdnimg.cn/20200605114815430.gif" alt="在这里插入图片描述"></p> <h1><a id="___86"></a>不想使父级的 块 属性消失怎么办</h1> <p>有时候我们看文档的时候，只从描述中无法深入的了解属性。比如这里的子元素撑开父元素，我们第一反应就是更改父元素的块属性。</p> <p>隐藏属性就是，父元素是块，但是未设置过 <code>width</code> 和 <code>max-width</code> , 子元素能撑开的最大宽度就是最近一个设置过宽度的祖先元素，而不是只是父元素。还用上面的模板举个例子</p> <pre><code class="prism language-css"><span class="token selector">.grandpa</span><span class="token punctuation">{</span>\n  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre> <p><img src="https://img-blog.csdnimg.cn/20200605115730354.png" alt="在这里插入图片描述"><br> 这个例子中就可以看到，爷爷元素设置了 <code>display: inline-block</code> ，父亲元素 还是 块 元素。但是子元素会连带父元素和爷爷元素一起撑宽。</p> <p>如果是在 <code>.wrap</code> 这个<code>DOM</code> 上设置 <code>display: inline-block</code> ，父元素和爷爷元素还是不过超过 <code>.wrap</code> 的宽度。</p> <p>这就是上面说到的 子元素能撑开的最大宽度就是最近一个设置过宽度（最大宽度）的祖先元素。</p> <h1><a id="_104"></a>这种属性规则有什么作用呢</h1> <p>如果是写一个树，子元素都需要块占据一行，但是子要撑开父元素，只需要中间的块元素不设置宽度。</p> <p>最上层元素设置上面提到的任意不受父最大宽度限制的属性，都可以撑宽树整体宽度。从而出现横向滚动条。</p> <p>有兴趣的小伙伴可以看看 <a href="https://zdy1988.github.io/vue-jstree/">v-jstree demo</a> 就是设置顶层元素 <code>display: inline-block</code>，使横向滚动条出现的，使用这个插件顶层元素 默认并不是<code>display: inline-block</code> ，不要忘了手动设置。</p> <p>css 隐藏规则有很多，大家伙多用用就知道了，比如前几天 张鑫旭 发的一篇博客 使用 <code>columns</code> 属性，不单能直接分割文本，还能分割标签（虽然有较多限制）。</p> <p>以上分享如果疏漏或错误欢迎指正。</p> </div> </body> </html> ';n.exports=a},"9fe5":function(n,s){var a='<!DOCTYPE html> <html> <head> <meta charset="utf-8"> <meta name="viewport" content="width=device-width,initial-scale=1"> <title>vscode 自定义编辑器样式 css修改</title> <link rel="stylesheet" href="https://stackedit.io/style.css"/> </head> <body class="stackedit"> <div class="stackedit__html"><p></p><div class="toc"><h3>vscode 自定义编辑器样式 CSS修改</h3><ul><li><a href="#_2">看看别人插件</a></li><ul><li><a href="#background_10">background</a></li><li><a href="#backgroundcover_43">background-cover</a></li></ul><li><a href="#_62">自己修改样式</a></li><ul><li><a href="#1vscode__settingjson_76">1.打开vscode 配置文件 setting.json</a></li><li><a href="#2_wokbenchdesktopmaincss_92">2.修改上面提到的 wokbench.desktop.main.css文件</a></li></ul><li><a href="#_191">总结</a></li></ul></div><p></p> <h1><a id="_2"></a>看看别人插件</h1> <p>首先讲一下为什么会写这个，在某年某月某天，突然觉得vscode编辑器样式‘“看腻了”，就想着改改样式，比如背景啥的。先找了一下插件，vscodel里的 background、background-cover 插件都下过，先总结一下它们更改的方法。</p> <p><strong><font color="red">第一次强调*要更改vscode样式，需要修改vscode的样式文件，因此需要权限，所以请使用管理员身份运行修改样式文件的软件，以及vscode，修改后会提示软件可能损坏，请点击提示框上的设置（齿轮）选择忽略。</font></strong><br> vscode的css文件地址：</p> <pre><code class="prism language-bash">C:\\Program Files\\Microsoft VS Code\\resources\\app\\out\\vs\\workbench\\workbench.desktop.main.css\n</code></pre> <h2><a id="background_10"></a>background</h2> <p>background插件改的是分栏（ split-view ）的背景，用的css伪元素:after设置背景并定位，总共用了三张图片来重复展示多个分栏背景 如下：</p> <pre><code class="prism language-css"><span class="token selector">[id="workbench.parts.editor"] .split-view-view:nth-child(1) .editor-container .editor-instance&gt;.monaco-editor .overflow-guard&gt;.monaco-scrollable-element::after</span><span class="token punctuation">{</span>\n\t<span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url(\'\')</span><span class="token punctuation">;</span>\n\t<span class="token property">content</span><span class="token punctuation">:</span><span class="token string">\'\'</span><span class="token punctuation">;</span>\n\t<span class="token property">pointer-events</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span>\n\t<span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>\n\t<span class="token property">z-index</span><span class="token punctuation">:</span>99999<span class="token punctuation">;</span>\n\t<span class="token property">width</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span>\n\t<span class="token property">height</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span>\n\t<span class="token property">background-position</span><span class="token punctuation">:</span>100% 100%<span class="token punctuation">;</span>\n\t<span class="token property">background-repeat</span><span class="token punctuation">:</span>no-repeat<span class="token punctuation">;</span>\n\t<span class="token property">opacity</span><span class="token punctuation">:</span>1<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">/* \t后面两个选择器内的样式除了url内容不一样，其余与上面一样，就不格式化占篇幅了，\n\t原本url内有base64格式的图片，内容较多就删掉了*/</span>\n\n<span class="token selector">[id="workbench.parts.editor"] .split-view-view:nth-child(2) .editor-container .editor-instance&gt;.monaco-editor .overflow-guard&gt;.monaco-scrollable-element::after</span><span class="token punctuation">{</span><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url(\'\')</span><span class="token punctuation">;</span><span class="token property">content</span><span class="token punctuation">:</span><span class="token string">\'\'</span><span class="token punctuation">;</span><span class="token property">pointer-events</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span><span class="token property">z-index</span><span class="token punctuation">:</span>99999<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span><span class="token property">background-position</span><span class="token punctuation">:</span>100% 100%<span class="token punctuation">;</span><span class="token property">background-repeat</span><span class="token punctuation">:</span>no-repeat<span class="token punctuation">;</span><span class="token property">opacity</span><span class="token punctuation">:</span>1<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">}</span>\n\n<span class="token selector">[id="workbench.parts.editor"] .split-view-view:nth-child(3) .editor-container .editor-instance&gt;.monaco-editor .overflow-guard&gt;.monaco-scrollable-element::after</span><span class="token punctuation">{</span><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url(\'\')</span><span class="token punctuation">;</span><span class="token property">content</span><span class="token punctuation">:</span><span class="token string">\'\'</span><span class="token punctuation">;</span><span class="token property">pointer-events</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span><span class="token property">z-index</span><span class="token punctuation">:</span>99999<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span><span class="token property">background-position</span><span class="token punctuation">:</span>100% 100%<span class="token punctuation">;</span><span class="token property">background-repeat</span><span class="token punctuation">:</span>no-repeat<span class="token punctuation">;</span><span class="token property">opacity</span><span class="token punctuation">:</span>1<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">}</span>\n\n<span class="token selector">[id="workbench.parts.editor"] .split-view-view .editor-container .editor-instance&gt;.monaco-editor .overflow-guard&gt;.monaco-scrollable-element&gt;.monaco-editor-background</span><span class="token punctuation">{</span>\n\t<span class="token property">background</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre> <p>至于插件的设置是否启用、是否使用默认图片、自定义图片、自定义样式等有兴趣自己写插件的小伙伴可以参考此插件给的源代码在此我也贴出来：</p> <p><a href="https://github.com/shalldie/vscode-background">https://github.com/shalldie/vscode-background</a></p> <h2><a id="backgroundcover_43"></a>background-cover</h2> <p>而background-cover 插件，直接更改body 标签的背景色，因为有主题颜色，所以它很暴力的把body的opacity样式给改了，造成文字也会变成半透明状，视觉效果并不是很好。它的代码如下：</p> <pre><code class="prism language-css"><span class="token selector">body</span><span class="token punctuation">{</span>\n\t<span class="token property">background-size</span><span class="token punctuation">:</span>cover<span class="token punctuation">;</span>\n\t<span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span>\n\t<span class="token property">opacity</span><span class="token punctuation">:</span>0.9500000000000001<span class="token punctuation">;</span>\n\t<span class="token comment">/* 图片链接是通过插件的功能选择的电脑内的图片 */</span>\n\t<span class="token property">background-image</span><span class="token punctuation">:</span><span class="token url">url(\'c:/Users/rudy/Pictures/77bc20a09dfc23f98236be7c5d709509.jpg\')</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre> <p>这个插件的源代码我也贴出来：<br> <a href="https://github.com/vscode-extension/vscode-background-cover">https://github.com/vscode-extension/vscode-background-cover</a></p> <p>想尝试以上两个插件，直接选择vscode的 extensions，或者直接按快捷键 <kbd>ctrl</kbd> +<kbd> shift </kbd> + <kbd>x</kbd>，搜索以上两个插件名称即可。</p> <p><strong><font color="red">第二次提醒，想要更改vscode样式文件，需要用管理员权限运行修改样式文件的软件，以及vscode。因为编辑文件需要权限，应用样式同样需要权限，只需在修改文件后用管理员权限运行。样式展示没问题后就不需要用管理员权限运行软件了。</font></strong></p> <h1><a id="_62"></a>自己修改样式</h1> <p>说了半天别人插件如何改的样式，那么现在着手自己修改软件样式，作为前端，要修改样式肯定需要预览样式，在查找如何修改编辑器样式时了解到vscode是基于 Electron (原来叫 Atom Shell) 进行开发的。所以，界面的样式可以像浏览器一样随意修改（当然，也可能被改炸 0_0!!）。</p> <p>点击菜单 帮助 =&gt; 切换开发人员工具<br> 或者按快捷键 <kbd>ctrl</kbd> + <kbd>shift</kbd> + <kbd> i </kbd> （可能存在快捷键冲突）<br> <img src="https://img-blog.csdnimg.cn/20191223151310128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1ZHlfemhvdQ==,size_16,color_FFFFFF,t_70" alt="vscode 开发工具"><br> 是不是很熟悉 ٩(๑&gt;◡&lt;๑)۶，很激动？？？，有了DOM和CSS，有什么样式是你想要还做不到的呢？</p> <p>发一下我随便改的背景<br> <img src="https://img-blog.csdnimg.cn/20191223151451818.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1ZHlfemhvdQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 在完全不用把文字变透明的情况下，插入了背景图，顺便把一些层级较高，并有背景色的DOM颜色重置为透明色，背景全部使用背景图。一边码着代码，一边欣赏着动漫小姐姐(¯﹃¯)。<br> 然而还没完，因为vscode有主题，主题可以设置各个模块的背景色，如果通过样式覆盖所有背景色会得不偿失，代价太大，<strong>最好的方式是，添加配置覆盖原主题颜色</strong></p> <p>修改完整流程如下</p> <h2><a id="1vscode__settingjson_76"></a>1.打开vscode 配置文件 setting.json</h2> <p>按快捷键 <kbd>ctrl</kbd> + <kbd>shift</kbd> + <kbd>p</kbd> 输入 setting 选择<br> <img src="https://img-blog.csdnimg.cn/20191223153722332.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1ZHlfemhvdQ==,size_16,color_FFFFFF,t_70" alt="setting.json"><br> 添加自定义颜色配置<br> 背景色颜色值为八位，后面两位为透明度00就是完全透明，FF为完全不透明，这里不需要考虑兼容。</p> <pre><code class="prism language-javascript"><span class="token punctuation">{</span>\n  <span class="token comment">// 以上原本配置省略不写...</span>\n  <span class="token comment">// 以下为新添加配置</span>\n  <span class="token comment">// 背景色颜色值为八位，后面两位为透明度00就是完全透明，FF为完全不透明，这里不需要考虑兼容</span>\n  <span class="token string">"workbench.colorCustomizations"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token string">"editor.background"</span><span class="token punctuation">:</span> <span class="token string">"#00000000"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre> <h2><a id="2_wokbenchdesktopmaincss_92"></a>2.修改上面提到的 wokbench.desktop.main.css文件</h2> <pre><code>再写一遍文件路径（C:\\Program Files\\Microsoft VS Code\\resources\\app\\out\\vs\\workbench\\wokbench.desktop.main.css）\n</code></pre> <p>因为我的vscode是安装到C盘下，所以路径如上，请针对个人安装路径找文件，此文件是压缩后的css，不用管它，直接在最后添加新的css代码即可。最开始提到的两个插件，也是修改的此文件。<br> 具体样式代码如下：</p> <pre><code class="prism language-css">\t<span class="token selector">body</span><span class="token punctuation">{</span>\n\t\t<span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span>\n\t\t<span class="token property">background-image</span><span class="token punctuation">:</span><span class="token url">url(\'c:/Users/rudy/Pictures/vscode 自定义背景样式/blackhairgirl.png\')</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n</code></pre> <p>就在body标签上添加了背景，当然也可以根据个人喜好在其他DOM上添加样式。</p> <p>最后发现添加的背景还未显示出来，此时就可以打开 帮助下的<strong>切换开发人员工具</strong>，用审查元素的方式查看哪一层DOM颜色未被重置，加上新样式覆盖就好，我找到的是在.monaco-workbench这个class上还存在背景色，就添加了如下代码：</p> <pre><code class="prism language-css">\t<span class="token selector">body</span><span class="token punctuation">{</span>\n\t\t<span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span>\n\t\t<span class="token property">background-image</span><span class="token punctuation">:</span><span class="token url">url(\'c:/Users/rudy/Pictures/vscode 自定义背景样式/blackhairgirl.png\')</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token comment">/* 新添加的覆盖背景色css样式 */</span>\n\t<span class="token selector">.monaco-workbench</span><span class="token punctuation">{</span>\n\t\t<span class="token property">background-color</span><span class="token punctuation">:</span> transparent!important<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n</code></pre> <p>以上就是修改样式的全部流程，因为我修改了一些看起来影响背景显示效果的样式，所以css加了一些，最后贴上我所有的修改样式，与配置。<br> workbench.desktop.main.css 添加的样式</p> <pre><code class="prism language-css">\t<span class="token selector">body</span><span class="token punctuation">{</span>\n\t\t<span class="token property">background-position</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% - 1px<span class="token punctuation">)</span> 1px<span class="token punctuation">;</span>\n\t\t<span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span>\n\t\t<span class="token property">background-image</span><span class="token punctuation">:</span><span class="token url">url(\'c:/Users/rudy/Pictures/vscode 自定义背景样式/blackhairgirl.png\')</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t\n\t<span class="token comment">/* 软件头部背景也重置 */</span>\n\t<span class="token selector">.monaco-workbench .part.editor&gt;.content .editor-group-container&gt;.title,\n\t[id="workbench.parts.titlebar"],\n\t.monaco-workbench</span><span class="token punctuation">{</span>\n\t\t<span class="token property">background-color</span><span class="token punctuation">:</span> transparent!important<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token selector">.monaco-editor .scroll-decoration</span> <span class="token punctuation">{</span>\n\t\t<span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255, 255, 255, .2<span class="token punctuation">)</span> 0 6px 6px -6px inset!important<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t\n\t<span class="token comment">/* 文本编辑焦点行边框颜色修改为半透明 */</span>\n\t<span class="token selector">.monaco-editor .view-overlays .current-line</span> <span class="token punctuation">{</span>\n\t\t<span class="token property">border</span><span class="token punctuation">:</span> 2px solid <span class="token function">rgba</span><span class="token punctuation">(</span>255, 255, 255, .2<span class="token punctuation">)</span><span class="token important">!important</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token comment">/* 一打开文件列表tabs的样式 */</span>\n\t<span class="token selector">.tabs-and-actions-container::before</span><span class="token punctuation">{</span>\n\t\t<span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n\t\t<span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>\n\t\t<span class="token property">border-top</span><span class="token punctuation">:</span> 1px solid <span class="token function">rgba</span><span class="token punctuation">(</span>255, 255, 255, .2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>\n\t\t<span class="token property">z-index</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>\n\t\t<span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token comment">/* 终端与小地图样式，因为是canvas绘制的，目前只能通过更改透明度修改颜色，一个小小的遗憾。 */</span>\n\t<span class="token selector">.minimap canvas,\n\t.monaco-workbench .panel.integrated-terminal canvas</span> <span class="token punctuation">{</span>\n\t\t<span class="token property">opacity</span><span class="token punctuation">:</span> 0.75<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t\n\t<span class="token selector">.monaco-workbench .part&gt;.content</span> <span class="token punctuation">{</span>\n\t\t<span class="token property">text-shadow</span><span class="token punctuation">:</span> 0 0 1px #000000<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t\n\t<span class="token comment">/* 因为使用图片的缘故，在代码比对和分栏情况 大于1栏都设置背景色，以免背景与文字重叠不易识别 */</span>\n\t<span class="token selector">[id="workbench.parts.editor"] .split-view-view + .split-view-view</span> <span class="token punctuation">{</span>\n\t\t<span class="token property">background-color</span><span class="token punctuation">:</span> #141007!important<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token comment">/* 底部状态栏颜色也被我改啦 */</span>\n\t<span class="token selector">[id="workbench.parts.statusbar"]</span> <span class="token punctuation">{</span>\n\t\t<span class="token property">background-color</span><span class="token punctuation">:</span> transparent!important<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token comment">/* 下面是调试控制台某些样式也被我改了*/</span>\n\t<span class="token selector">[data-editor-id="workbench.editors.textDiffEditor"] .editor + .editor</span> <span class="token punctuation">{</span>\n\t\t<span class="token property">background-color</span><span class="token punctuation">:</span> #141007!important<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token selector">[id="workbench.panel.repl"] .monaco-list-row:hover</span> <span class="token punctuation">{</span>\n\t\t<span class="token property">background-color</span><span class="token punctuation">:</span> #2a2d2e00!important<span class="token punctuation">;</span>\n\t\t<span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 3px #ffffff inset<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n</code></pre> <p>setting.json文件添加的配置</p> <pre><code class="prism language-javascript"> <span class="token punctuation">{</span> \n\t <span class="token string">"workbench.colorCustomizations"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n\t    <span class="token string">"editor.background"</span><span class="token punctuation">:</span> <span class="token string">"#00000000"</span>\n\t <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre> <h1><a id="_191"></a>总结</h1> <p>其实很简单，也就改了两个文件而已，一个vscode 的setting.json 配置文件，一个workbench.desktop.main.css的样式文件。</p> <p><strong><font color="red">最后强调，一定要用管理员权限运行软件。并且vscode更新后workbench.desktop.main.css 文件会被重置，自己改的样式最好保存好，以免更新vscode后样式消失。<font></font></font></strong></p> <p>用的背景图献上<img src="https://img-blog.csdnimg.cn/2019122316540079.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1ZHlfemhvdQ==,size_16,color_FFFFFF,t_70" alt="vscode 自定义背景图"><br> <img src="https://img-blog.csdnimg.cn/20191223165435661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1ZHlfemhvdQ==,size_16,color_FFFFFF,t_70" alt="vscode 背景图片"><br> <img src="https://img-blog.csdnimg.cn/20191223165500266.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1ZHlfemhvdQ==,size_16,color_FFFFFF,t_70" alt="vscdoe 背景图片"></p> </div> </body> </html> ';n.exports=a},a484:function(n,s){var a='<!DOCTYPE html> <html> <head> <meta charset="utf-8"> <meta name="viewport" content="width=device-width,initial-scale=1"> <title>使用canvas 如何绘制形状并支持拖拽、缩放功能</title> <link rel="stylesheet" href="https://stackedit.io/style.css"/> </head> <body class="stackedit"> <div class="stackedit__html"><p></p><div class="toc"><h3>使用canvas 如何绘制形状并支持拖拽、缩放功能</h3><ul><li><a href="#_2">引言</a></li><li><a href="#_5">开始编写</a></li><ul><li><a href="#_28">首先绘制一个形状</a></li><li><a href="#_80">绘制多个、多种类型形状</a></li><li><a href="#_182">添加缩放功能</a></li><li><a href="#_397">添加拖拽画布的效果</a></li><li><a href="#_477">拖拽画布中的形状</a></li><ul><li><a href="#_687">判断是否处于形状内部方法解释</a></li></ul></ul><li><a href="#_707">总结</a></li></ul></div><p></p> <h1><a id="_2"></a>引言</h1> <p>   之前遇到过一个面试的机试题，就是用画布绘制形状，并且支持缩放、拖拽功能。现在有点时间就分享一下我是如何一步一步完成这个功能的。看这篇信息之前最好先去看一下<code>canvas</code> 的 <code>api</code>，<a href="https://www.runoob.com/tags/ref-canvas.html">canvas API 穿梭机。</a><br> <br></p> <h1><a id="_5"></a>开始编写</h1> <p>先写出容器Dom，和样式<br> html</p> <pre><code class="prism language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>chart-wrap<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>chart-wrap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre> <p>css</p> <pre><code class="prism language-css"><span class="token selector">html,body</span> <span class="token punctuation">{</span>\n  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>\n  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.chart-wrap</span> <span class="token punctuation">{</span>\n  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% - 40px<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token property">margin</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>\n  <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 3px orange<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre> <br> <h2><a id="_28"></a>首先绘制一个形状</h2> <p>这里写一个 名叫 <code>chart</code> 的类，在 构造器 <code>constructor</code> 里初始化画布，写好绘制形状的函数、以及画布渲染。代码如下：</p> <pre><code class="prism language-javascript"><span class="token keyword">class</span> <span class="token class-name">chart</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 初始构造器</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> wrapDomStyle <span class="token operator">=</span> <span class="token function">getComputedStyle</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>wrapDomStyle<span class="token punctuation">.</span>width<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>wrapDomStyle<span class="token punctuation">.</span>height<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 创建canvas画布</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>El <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">\'canvas\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>El<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>El<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>ctx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>El<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">\'2d\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    params<span class="token punctuation">.</span>el<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>El<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 绘制圆形</span>\n  <span class="token function">drawCircle</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> data<span class="token punctuation">.</span>fillStyle<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>x<span class="token punctuation">,</span> data<span class="token punctuation">.</span>y<span class="token punctuation">,</span> data<span class="token punctuation">.</span>r<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 添加形状</span>\n  <span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">drawCircle</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 构建图表对象</span>\n<span class="token keyword">var</span> chartObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">chart</span><span class="token punctuation">(</span> <span class="token punctuation">{</span> el<span class="token punctuation">:</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'chart-wrap\'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 绘制圆形</span>\nchartObj<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  fillStyle<span class="token punctuation">:</span> <span class="token string">\'pink\'</span><span class="token punctuation">,</span>\n  x<span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">,</span>\n  y<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span>\n  r<span class="token punctuation">:</span> <span class="token number">50</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre> <p>上面代码结构很简单，<code>new</code> 一个对象，传入容器Dom，在<code>constructor</code> 中初始化一个画布放入 <code>div#chart-wrap</code> 这个 <code>dom</code> 中，再把创建好的实例赋值给 <code>chartObj</code> 这个变量。</p> <p>通过调用类的 <code>push</code> 方法，绘制一个圆形。</p> <p><a href="http://jsrun.net/kI2Kp">代码效果点击此处观看</a><br> <br></p> <h2><a id="_80"></a>绘制多个、多种类型形状</h2> <p>如果想绘制其他图形就需要加 <code>type</code> 判断，以上代码改造完成后如下：</p> <pre><code class="prism language-javascript"><span class="token keyword">class</span> <span class="token class-name">chart</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 初始构造器</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> wrapDomStyle <span class="token operator">=</span> <span class="token function">getComputedStyle</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>wrapDomStyle<span class="token punctuation">.</span>width<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>wrapDomStyle<span class="token punctuation">.</span>height<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 创建canvas画布</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>El <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">\'canvas\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>El<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>El<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>ctx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>El<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">\'2d\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    params<span class="token punctuation">.</span>el<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>El<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 绘制圆形</span>\n  <span class="token function">drawCircle</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> data<span class="token punctuation">.</span>fillStyle<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>x<span class="token punctuation">,</span> data<span class="token punctuation">.</span>y<span class="token punctuation">,</span> data<span class="token punctuation">.</span>r<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  \n  <span class="token comment">// _____________ 添加绘制线条方法 ____________</span>\n  <span class="token function">drawLine</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> arr <span class="token operator">=</span> data<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">var</span> ctx <span class="token operator">=</span> ctx <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">;</span>  \n\n    ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    ctx<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> data<span class="token punctuation">.</span>lineWidth <span class="token operator">||</span> <span class="token number">1</span>\n    <span class="token keyword">do</span><span class="token punctuation">{</span>\n      ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span>\n\n    ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  \n  <span class="token comment">// ___________ 添加绘制矩形方法 ______________</span>\n  <span class="token function">drawRect</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> data<span class="token punctuation">.</span>fillStyle<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token operator">...</span>data<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// ___________ 添加一个判断类型绘制的方法 _____________</span>\n  <span class="token function">draw</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">switch</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">case</span> <span class="token string">\'line\'</span><span class="token punctuation">:</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token keyword">case</span> <span class="token string">\'rect\'</span><span class="token punctuation">:</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token keyword">case</span> <span class="token string">\'circle\'</span><span class="token punctuation">:</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">drawCircle</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  \n  <span class="token comment">// 添加形状</span>\n  <span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ____________ 修改调用绘制方法 ____________</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 构建图表对象</span>\n<span class="token keyword">var</span> chartObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">chart</span><span class="token punctuation">(</span> <span class="token punctuation">{</span> el<span class="token punctuation">:</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'chart-wrap\'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 绘制圆形</span>\nchartObj<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  type<span class="token punctuation">:</span> <span class="token string">\'circle\'</span><span class="token punctuation">,</span> <span class="token comment">// ____________ 这里添加了一个类型 __________________</span>\n  fillStyle<span class="token punctuation">:</span> <span class="token string">\'pink\'</span><span class="token punctuation">,</span>\n  x<span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">,</span>\n  y<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span>\n  r<span class="token punctuation">:</span> <span class="token number">50</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ___________ 添加绘制线条 __________</span>\nchartObj<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  type<span class="token punctuation">:</span> <span class="token string">\'line\'</span><span class="token punctuation">,</span>\n  lineWidth<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n  data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// ___________ 添加绘制矩形 __________</span>\nchartObj<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  type<span class="token punctuation">:</span> <span class="token string">\'rect\'</span><span class="token punctuation">,</span>\n  fillStyle<span class="token punctuation">:</span> <span class="token string">"#0f00ff"</span><span class="token punctuation">,</span>\n  data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">350</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre> <p>对比前面这里添加了一个绘制矩形（<code>drawRect</code>）、绘制线条(<code>drawLine</code>)的方法 和 数据，并且添加了判断渲染类型的函数(<code>draw</code>)。</p> <p><a href="http://jsrun.net/YI2Kp">代码效果点击此处观看</a><br> <br></p> <h2><a id="_182"></a>添加缩放功能</h2> <p>添加缩放需要先理清一些东西。</p> <p>缩放 <code>canvas</code> 提供了两个类型方法可以实现，一个是在当前缩放基础上缩放，一个是在基础画布上缩放。</p> <p><strong>矩阵变化不只有缩放，但是可以其他参数不变只更改缩放值</strong></p> <p>当前缩放基础上缩放：<code>scale()</code>缩放当前绘图至更大或更小，<code>transform()</code>替换绘图的当前转换矩阵;<br> <strong>  <font size="1">意思就是原本画布大小是 1，第一次放大 2倍，就变成2，第二次放大2倍就变成4</font></strong></p> <p>在基础画布上缩放: <code>setTransform()</code>将当前转换重置为单位矩阵。然后运行 transform()。<br> <strong>  <font size="1">意思就是原本画布大小是 1，第一次放大 2倍，就变成2，第二次放大2倍还是2，因为重置回原来的1后再放大的</font></strong></p> <p>这里我使用 <code>setTransform()</code> 缩放画布</p> <p><strong>第一步骤</strong>：.因为要缩放所以必须保存好当前的缩放值，就在<code>constructor</code> 加以下参数，以及在 <code>push()</code> 方法下保存数据、<code>render()</code> 重绘所有数据</p> <pre><code class="prism language-javascript"><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 因为canvas是基于状态绘制的，也就是设置了缩放值，再绘制的元素才会根据缩放倍数绘制，因此需要把每个绘制的对象保存起来。</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> \n  <span class="token keyword">this</span><span class="token punctuation">.</span>scale <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 默认缩放值是 1</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 添加形状</span>\n<span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// push 方法中添加保存数据操作</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 渲染整个 图形画布</span>\n<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>El<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width\n\n  <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre> <p><strong>第二步骤</strong>：.因为缩放时鼠标滚轮控制，所以加上监听滚轮事件，而且是在鼠标移入画布中时才添加，不在画布中就不需要监听滚轮事件。</p> <pre><code class="prism language-javascript"><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 添加滚轮判断事件</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addScaleFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n \n<span class="token comment">// 添加缩放功能，判断时机注册移除MouseWhell事件</span>\n<span class="token function">addScaleFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>El<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'mouseenter\'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>addMouseWhell<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>El<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'mouseleave\'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>removeMouseWhell<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 添加 mousewhell 事件</span>\n<span class="token function-variable function">addMouseWhell</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'mousewheel\'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scrollFunc<span class="token punctuation">,</span> <span class="token punctuation">{</span>passive<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 移除mousewhell 事件</span>\n<span class="token function-variable function">removeMouseWhell</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">\'mousewheel\'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scrollFunc<span class="token punctuation">,</span> <span class="token punctuation">{</span>passive<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre> <p><strong>第三步骤</strong>：滚轮事件监听完成后，就是调用具体的缩放实现代码了</p> <pre><code class="prism language-javascript"><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 缩放具体实现会用到的数据</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>maxScale <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 最大缩放值</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>minScale <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 最小缩放值</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>step <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">;</span>   <span class="token comment">// 缩放率</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>offsetX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 画布X轴偏移值</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>offsetY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 画布Y轴偏移值</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 缩放 具体计算</span>\n<span class="token function-variable function">scrollFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 阻止默认事件 （缩放时外部容器禁止滚动）</span>\n  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>wheelDelta<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">var</span> x <span class="token operator">=</span> e<span class="token punctuation">.</span>offsetX <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offsetX\n    <span class="token keyword">var</span> y <span class="token operator">=</span> e<span class="token punctuation">.</span>offsetY <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offsetY\n\n    <span class="token keyword">var</span> offsetX <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scale<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>step\n    <span class="token keyword">var</span> offsetY <span class="token operator">=</span> <span class="token punctuation">(</span>y <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scale<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>step\n\n    <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>wheelDelta <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>offsetX <span class="token operator">-=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scale <span class="token operator">&gt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxScale <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> offsetX\n      <span class="token keyword">this</span><span class="token punctuation">.</span>offsetY <span class="token operator">-=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scale <span class="token operator">&gt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxScale <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> offsetY\n\n      <span class="token keyword">this</span><span class="token punctuation">.</span>scale <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>step\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>offsetX <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scale <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>minScale <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> offsetX\n      <span class="token keyword">this</span><span class="token punctuation">.</span>offsetY <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scale <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>minScale <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> offsetY\n\n      <span class="token keyword">this</span><span class="token punctuation">.</span>scale <span class="token operator">-=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>step\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">this</span><span class="token punctuation">.</span>scale <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>maxScale<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>scale<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>minScale<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    \n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 在类型判断渲染方法内添加设置缩放</span>\n<span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">setTransform</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>scale<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scale<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offsetX<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offsetY<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre> <p><a href="http://jsrun.net/ZI2Kp">以上代码效果预览</a></p> <p>解释：<br>    第一步骤第二步骤理解起来很容易，比较麻烦的是第三步骤，下面就来详细解释一下第三部具体缩放实现。</p> <p>缩减一下代码</p> <pre><code class="prism language-javascript"><span class="token function-variable function">scrollFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 阻止默认事件 （缩放时外部容器禁止滚动）</span>\n  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>wheelDelta<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  \n    e<span class="token punctuation">.</span>wheelDelta <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scale <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>step <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scale <span class="token operator">-=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>step\n    \n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre> <p>只需要上述几行就实现了缩放。判断 <code>e.wheelDelta</code> 是向上滚动还是向下，从而增加或减少 <code>this.scale</code> 的大小，最后调用 <code>render()</code> 重新绘制当前画布。</p> <p><code>e.preventDefault()</code> 就不多解释了，大家都知道是解决默认行为的。但是有一点要解释一下 在调用 <code>scrollFunc()</code> 这个函数的事件监听器的第三个参数 <code>{passive: false}</code> 是必须加的（默认就是 <code>{passive: true}</code>），不然无法阻止默认的滚动事件。</p> <p>大家可以在演示例子中注释掉 <code>scrollFunc</code> 中的其它代码查看效果，发现缩放是可以了，但是，却没有根据鼠标位置进行缩放，而是始终以<code>画布(0,0)</code> 的位置缩放。所以画布放大后会向右下偏移，因此需要向左和上偏移校正，使缩放看起来就像在鼠标位置缩放。</p> <p>在上方代码上改造一下 代码如下：</p> <pre><code class="prism language-javascript"><span class="token function-variable function">scrollFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 阻止默认事件 （缩放时外部容器禁止滚动）</span>\n  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>wheelDelta<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  \n    <span class="token keyword">var</span> x <span class="token operator">=</span> e<span class="token punctuation">.</span>offsetX <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offsetX\n    <span class="token keyword">var</span> y <span class="token operator">=</span> e<span class="token punctuation">.</span>offsetY <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offsetY\n\n    <span class="token keyword">var</span> offsetX <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scale<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>step\n    <span class="token keyword">var</span> offsetY <span class="token operator">=</span> <span class="token punctuation">(</span>y <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scale<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>step\n\n    <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>wheelDelta <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>offsetX <span class="token operator">-=</span> offsetX\n      <span class="token keyword">this</span><span class="token punctuation">.</span>offsetY <span class="token operator">-=</span> offsetY\n\n      <span class="token keyword">this</span><span class="token punctuation">.</span>scale <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>step\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>offsetX <span class="token operator">+=</span> offsetX\n      <span class="token keyword">this</span><span class="token punctuation">.</span>offsetY <span class="token operator">+=</span> offsetY\n\n      <span class="token keyword">this</span><span class="token punctuation">.</span>scale <span class="token operator">-=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>step\n    <span class="token punctuation">}</span>\n    \n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre> <p><code>x，y</code> 是鼠标距离画布原始原点的距离，<code>offsetX，offsetY</code> 是本次缩放的偏移量，然后判断放大或者缩小从而增减整体画布的偏移量。</p> <p>本次偏移量计算方式：鼠标距原始点距离<code>(x，y)</code> 除以 缩放值 <code>this.scale</code> 再乘以 缩放率 <code>this.step</code>。<br> <strong>  <font size="2">解释：因为是使用<code>setTransform()</code>，所以每次放大或者缩小都是在原始画布大小的基础上缩放，所以需要除以缩放值，找到在原始缩放基础上鼠标距离原始点的距离。</font></strong><br> <strong>  <font size="2">解释：如果使用<code>scale()</code>，就不需要除以缩放值，直接当前缩放值乘以缩放率就能等于现在实际缩放值</font></strong></p> <p>最后再把缩放功能完善，添加最大缩放值<code>this.maxScale</code> 和 最小缩放值 <code>this.minScale</code> 限制，完成代码如下：</p> <pre><code class="prism language-javascript"><span class="token comment">// 缩放 具体计算</span>\n<span class="token function-variable function">scrollFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 阻止默认事件 （缩放时外部容器禁止滚动）</span>\n  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>wheelDelta<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">var</span> x <span class="token operator">=</span> e<span class="token punctuation">.</span>offsetX <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offsetX\n    <span class="token keyword">var</span> y <span class="token operator">=</span> e<span class="token punctuation">.</span>offsetY <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offsetY\n\n    <span class="token keyword">var</span> offsetX <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scale<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>step\n    <span class="token keyword">var</span> offsetY <span class="token operator">=</span> <span class="token punctuation">(</span>y <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scale<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>step\n\n    <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>wheelDelta <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>offsetX <span class="token operator">-=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scale <span class="token operator">&gt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxScale <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> offsetX\n      <span class="token keyword">this</span><span class="token punctuation">.</span>offsetY <span class="token operator">-=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scale <span class="token operator">&gt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxScale <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> offsetY\n\n      <span class="token keyword">this</span><span class="token punctuation">.</span>scale <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>step\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>offsetX <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scale <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>minScale <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> offsetX\n      <span class="token keyword">this</span><span class="token punctuation">.</span>offsetY <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scale <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>minScale <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> offsetY\n\n      <span class="token keyword">this</span><span class="token punctuation">.</span>scale <span class="token operator">-=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>step\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">this</span><span class="token punctuation">.</span>scale <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>maxScale<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>scale<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>minScale<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    \n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre> <p>以上缩放值计算就完成了，最后只需调用 <code>this.render()</code>，在<code>this.render</code> 中会调用 <code>this.draw</code> 函数，这个函数里调用<code>setTransform</code> 方法，这里会将更改后的缩放值，以及偏移值设置到画布中。</p> <pre><code class="prism language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">setTransform</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>scale<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scale<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offsetX<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offsetY<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre> <br> <h2><a id="_397"></a>添加拖拽画布的效果</h2> <p>首先理清一下拖拽的步骤<br> 鼠标按下 =&gt; 鼠标移动 =&gt; 鼠标放开</p> <p>鼠标按下：我们用 <code>mousedown</code> 事件，然后在按下事件中注册 <strong>鼠标移动</strong> 事件<br> 鼠标移动：我们用 <code>mousemove</code> 事件，在鼠标移动事件中 <strong>具体实现画布移动</strong><br> 鼠标放开：我们用 <code>mouseup</code> 事件，在鼠标放开事件中 删除 <strong>鼠标移动</strong> 事件</p> <p>具体代码如下：</p> <pre><code class="prism language-javascript"><span class="token function">constructor</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>wrapDom <span class="token operator">=</span> params<span class="token punctuation">.</span>el<span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addDragFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 添加拖拽功能，判断时机注册移除 拖拽 功能</span>\n<span class="token function">addDragFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>El<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'mousedown\'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>addMouseMove<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'mouseup\'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>removeMouseMove<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 添加鼠标移动 功能，获取保存当前点击坐标</span>\n<span class="token function-variable function">addMouseMove</span> <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>targetX <span class="token operator">=</span> e<span class="token punctuation">.</span>offsetX\n  <span class="token keyword">this</span><span class="token punctuation">.</span>targetY <span class="token operator">=</span> e<span class="token punctuation">.</span>offsetY\n\n  <span class="token keyword">this</span><span class="token punctuation">.</span>mousedownOriginX <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offsetX<span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>mousedownOriginY <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offsetY<span class="token punctuation">;</span>\n  \n  <span class="token keyword">this</span><span class="token punctuation">.</span>wrapDom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cursor <span class="token operator">=</span> <span class="token string">\'grabbing\'</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>El<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'mousemove\'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>moveCanvasFunc<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 移除鼠标移动事件</span>\n<span class="token function-variable function">removeMouseMove</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>wrapDom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cursor <span class="token operator">=</span> <span class="token string">\'\'</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>El<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">\'mousemove\'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>moveCanvasFunc<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>El<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">\'mousemove\'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>moveShapeFunc<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 移动画布</span>\n<span class="token function-variable function">moveCanvasFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 获取 最大可移动宽</span>\n  <span class="token keyword">var</span> maxMoveX <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>El<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> maxMoveY <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>El<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">var</span> offsetX <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mousedownOriginX <span class="token operator">+</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>offsetX <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>targetX<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> offsetY <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mousedownOriginY <span class="token operator">+</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>offsetY <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>targetY<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">this</span><span class="token punctuation">.</span>offsetX <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>offsetX<span class="token punctuation">)</span> <span class="token operator">&gt;</span> maxMoveX <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offsetX <span class="token punctuation">:</span> offsetX\n  <span class="token keyword">this</span><span class="token punctuation">.</span>offsetY <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>offsetY<span class="token punctuation">)</span> <span class="token operator">&gt;</span> maxMoveY <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offsetY <span class="token punctuation">:</span> offsetY\n  \n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n</code></pre> <p><a href="http://jsrun.net/dI2Kp">以上代码效果演示</a></p> <p>其它代码都很简单，这里就详细解释一下 <code>addMouseMove()</code> 和 <code>moveCanvasFunc()</code> 做了哪些操作。</p> <p><code>addMouseMove</code> 函数中 使用 <code>targetX，targetY</code> 保存了鼠标点击时的坐标，<code>mousedownOriginX ，mousedownOriginX</code> 保存了鼠标点击时 画布的整体偏移量。</p> <p>再在 <code>moveCanvasFunc</code> 函数中 计算出移动后的整体偏移量，<code>moveCanvasFunc</code> 函数中的代码可以简化成这样：</p> <pre><code class="prism language-javascript"><span class="token function-variable function">moveCanvasFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> offsetX <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mousedownOriginX <span class="token operator">+</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>offsetX <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>targetX<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> offsetY <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mousedownOriginY <span class="token operator">+</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>offsetY <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>targetY<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre> <p>其他代码是为了限制偏移量的最大值，最后调用<code>this.render()</code></p> <p>整体来讲，拖拽画布功能比缩放稍微简单一些，同样这里最后会调用 <code>this.render()</code>，在<code>this.render</code> 中会调用 <code>this.draw</code> 函数，这个函数里调用了<code>setTransform</code> 方法，这里会将更改后的缩放值，以及偏移值设置到画布中。</p> <pre><code class="prism language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">setTransform</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>scale<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scale<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offsetX<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offsetY<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre> <h2><a id="_477"></a>拖拽画布中的形状</h2> <p>如果要拖拽画布中的形状，需要判断鼠标点击的位置是否处于形状中，而且因为层级关系，只能控制顶层的形状。</p> <p>因此需要写鼠标按下时是否处于形状内部的判断方法，这里我们只写了矩形、原型、线段的判断方法。</p> <p>因为之前已经在实现画布拖拽的时候，实现了拖拽功能，现在只需要要改造 <code>addMouseMove</code> 函数 和添加 <strong>形状移动</strong> 函数，以及三个判断方法。</p> <p>整体代码如下：</p> <pre><code class="prism language-javascript"><span class="token comment">// 添加鼠标移动 功能，获取保存当前点击坐标</span>\n<span class="token function-variable function">addMouseMove</span> <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\n  <span class="token keyword">this</span><span class="token punctuation">.</span>targetX <span class="token operator">=</span> e<span class="token punctuation">.</span>offsetX\n  <span class="token keyword">this</span><span class="token punctuation">.</span>targetY <span class="token operator">=</span> e<span class="token punctuation">.</span>offsetY\n\n  <span class="token keyword">this</span><span class="token punctuation">.</span>mousedownOriginX <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offsetX<span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>mousedownOriginY <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offsetY<span class="token punctuation">;</span>\n\n  <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>targetX <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offsetX<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scale<span class="token punctuation">;</span>\n  <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>targetY <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offsetY<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scale<span class="token punctuation">;</span>\n\n  <span class="token keyword">this</span><span class="token punctuation">.</span>activeShape <span class="token operator">=</span> <span class="token keyword">null</span>\n\n  <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">switch</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">case</span> <span class="token string">\'rect\'</span><span class="token punctuation">:</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isInnerRect</span><span class="token punctuation">(</span><span class="token operator">...</span>item<span class="token punctuation">.</span>data<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeShape <span class="token operator">=</span> item<span class="token punctuation">)</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token keyword">case</span> <span class="token string">\'circle\'</span><span class="token punctuation">:</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isInnerCircle</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>x<span class="token punctuation">,</span> item<span class="token punctuation">.</span>y<span class="token punctuation">,</span> item<span class="token punctuation">.</span>r<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeShape <span class="token operator">=</span> item<span class="token punctuation">)</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token keyword">case</span> <span class="token string">\'line\'</span><span class="token punctuation">:</span>\n        <span class="token keyword">var</span> lineNumber <span class="token operator">=</span> item<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span>\n        <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">false</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lineNumber<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n          <span class="token keyword">let</span> index <span class="token operator">=</span> i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>\n          flag <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isInnerPath</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> item<span class="token punctuation">.</span>lineWidth <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">)</span>\n          <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>activeShape <span class="token operator">=</span> item\n            <span class="token keyword">break</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeShape<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>wrapDom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cursor <span class="token operator">=</span> <span class="token string">\'grabbing\'</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>El<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'mousemove\'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>moveCanvasFunc<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>wrapDom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cursor <span class="token operator">=</span> <span class="token string">\'all-scroll\'</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>shapedOldX <span class="token operator">=</span> <span class="token keyword">null</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>shapedOldY <span class="token operator">=</span> <span class="token keyword">null</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>El<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'mousemove\'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>moveShapeFunc<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 移动形状</span>\n<span class="token function-variable function">moveShapeFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> moveX <span class="token operator">=</span> e<span class="token punctuation">.</span>offsetX <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>shapedOldX <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>targetX<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> moveY <span class="token operator">=</span> e<span class="token punctuation">.</span>offsetY <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>shapedOldY <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>targetY<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \n  moveX <span class="token operator">/=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scale\n  moveY <span class="token operator">/=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scale\n\n  <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeShape<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token string">\'rect\'</span><span class="token punctuation">:</span>\n      <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>activeShape<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n      <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>activeShape<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\n      <span class="token keyword">let</span> width <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>activeShape<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>\n      <span class="token keyword">let</span> height <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>activeShape<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>activeShape<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token operator">+</span> moveX<span class="token punctuation">,</span> y <span class="token operator">+</span> moveY<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">]</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token string">\'circle\'</span><span class="token punctuation">:</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>activeShape<span class="token punctuation">.</span>x <span class="token operator">+=</span> moveX\n      <span class="token keyword">this</span><span class="token punctuation">.</span>activeShape<span class="token punctuation">.</span>y <span class="token operator">+=</span> moveY\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token string">\'line\'</span><span class="token punctuation">:</span>\n      <span class="token keyword">var</span> item <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>activeShape<span class="token punctuation">;</span>\n      <span class="token keyword">var</span> lineNumber <span class="token operator">=</span> item<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span>\n      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lineNumber<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">let</span> index <span class="token operator">=</span> i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>\n        item<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+=</span> moveX\n        item<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> moveY\n      <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>shapedOldX <span class="token operator">=</span> e<span class="token punctuation">.</span>offsetX\n  <span class="token keyword">this</span><span class="token punctuation">.</span>shapedOldY <span class="token operator">=</span> e<span class="token punctuation">.</span>offsetY\n\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 判断是否在矩形框内</span>\n<span class="token function">isInnerRect</span><span class="token punctuation">(</span>x0<span class="token punctuation">,</span> y0<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> x0 <span class="token operator">&lt;=</span> x <span class="token operator">&amp;&amp;</span> y0 <span class="token operator">&lt;=</span> y <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>x0 <span class="token operator">+</span> width<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> x <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>y0 <span class="token operator">+</span> height<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> y\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 判断是否在圆形内</span>\n<span class="token function">isInnerCircle</span><span class="token punctuation">(</span>x0<span class="token punctuation">,</span> y0<span class="token punctuation">,</span> r<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>x0 <span class="token operator">-</span> x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>y0 <span class="token operator">-</span> y<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 判断是否在路径上</span>\n<span class="token function">isInnerPath</span><span class="token punctuation">(</span>x0<span class="token punctuation">,</span> y0<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> lineWidth<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> a1pow <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>x0 <span class="token operator">-</span> x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>y0 <span class="token operator">-</span> y<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> a1 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>a1pow<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>\n  <span class="token keyword">var</span> a2pow <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>x1 <span class="token operator">-</span> x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>y1 <span class="token operator">-</span> y<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>\n  <span class="token keyword">var</span> a2 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>a2pow<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">var</span> a3pow <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>x1 <span class="token operator">-</span> x0<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>y1 <span class="token operator">-</span> y0<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>\n  <span class="token keyword">var</span> a3 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>a3pow<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">var</span> r <span class="token operator">=</span> lineWidth <span class="token operator">/</span> <span class="token number">2</span>\n  <span class="token keyword">var</span> ab <span class="token operator">=</span> <span class="token punctuation">(</span>a1pow <span class="token operator">-</span> a2pow <span class="token operator">+</span> a3pow<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> a3<span class="token punctuation">)</span><span class="token keyword">var</span> ab <span class="token operator">=</span> <span class="token punctuation">(</span>a1pow <span class="token operator">-</span> a2pow <span class="token operator">+</span> a3pow<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> a3<span class="token punctuation">)</span>\n  <span class="token keyword">var</span> h <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>a1pow <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>ab<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">var</span> ad <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>a3<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> h <span class="token operator">&lt;=</span> r <span class="token operator">&amp;&amp;</span> a1 <span class="token operator">&lt;=</span> ad <span class="token operator">&amp;&amp;</span> a2 <span class="token operator">&lt;=</span> ad\n<span class="token punctuation">}</span>\n</code></pre> <p><a href="http://jsrun.net/GI2Kp">以上代码效果演示</a></p> <p>以上代码在 <code>addMouseMove</code> 中加入了判断是否处于形状内部的操作。</p> <pre><code class="prism language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>targetX <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offsetX<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scale<span class="token punctuation">;</span>\n<span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>targetY <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offsetY<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scale<span class="token punctuation">;</span>\n\n<span class="token keyword">this</span><span class="token punctuation">.</span>activeShape <span class="token operator">=</span> <span class="token keyword">null</span>\n\n<span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">switch</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token string">\'rect\'</span><span class="token punctuation">:</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isInnerRect</span><span class="token punctuation">(</span><span class="token operator">...</span>item<span class="token punctuation">.</span>data<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeShape <span class="token operator">=</span> item<span class="token punctuation">)</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token string">\'circle\'</span><span class="token punctuation">:</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isInnerCircle</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>x<span class="token punctuation">,</span> item<span class="token punctuation">.</span>y<span class="token punctuation">,</span> item<span class="token punctuation">.</span>r<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeShape <span class="token operator">=</span> item<span class="token punctuation">)</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token string">\'line\'</span><span class="token punctuation">:</span>\n      <span class="token keyword">var</span> lineNumber <span class="token operator">=</span> item<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span>\n      <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">false</span>\n      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lineNumber<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">let</span> index <span class="token operator">=</span> i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>\n        flag <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isInnerPath</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> item<span class="token punctuation">.</span>lineWidth <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">)</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>\n          <span class="token keyword">this</span><span class="token punctuation">.</span>activeShape <span class="token operator">=</span> item\n          <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre> <p>根据鼠标位置获取到基于原始缩放状态下距离画布原点的<code>x，y</code> 坐标，根据不同 <code>type</code> 调用不同方法判断是否处于当前形状中。</p> <p>然后根据是否处于形状内部判断注册 <strong>拖拽画布</strong> 还是 <strong>拖拽形状</strong> 的事件</p> <pre><code class="prism language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeShape<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>wrapDom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cursor <span class="token operator">=</span> <span class="token string">\'grabbing\'</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>El<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'mousemove\'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>moveCanvasFunc<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>wrapDom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cursor <span class="token operator">=</span> <span class="token string">\'all-scroll\'</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>shapedOldX <span class="token operator">=</span> <span class="token keyword">null</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>shapedOldY <span class="token operator">=</span> <span class="token keyword">null</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>El<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'mousemove\'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>moveShapeFunc<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre> <p>如果处于形状内部，就修改形状位置参数，并调用 <code>this.render()</code>，重新渲染画布</p> <pre><code class="prism language-javascript"><span class="token comment">// 移动形状</span>\n<span class="token function-variable function">moveShapeFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> moveX <span class="token operator">=</span> e<span class="token punctuation">.</span>offsetX <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>shapedOldX <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>targetX<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> moveY <span class="token operator">=</span> e<span class="token punctuation">.</span>offsetY <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>shapedOldY <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>targetY<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \n  moveX <span class="token operator">/=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scale\n  moveY <span class="token operator">/=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scale\n\n  <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeShape<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token string">\'rect\'</span><span class="token punctuation">:</span>\n      <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>activeShape<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n      <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>activeShape<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\n      <span class="token keyword">let</span> width <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>activeShape<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>\n      <span class="token keyword">let</span> height <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>activeShape<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>activeShape<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token operator">+</span> moveX<span class="token punctuation">,</span> y <span class="token operator">+</span> moveY<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">]</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token string">\'circle\'</span><span class="token punctuation">:</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>activeShape<span class="token punctuation">.</span>x <span class="token operator">+=</span> moveX\n      <span class="token keyword">this</span><span class="token punctuation">.</span>activeShape<span class="token punctuation">.</span>y <span class="token operator">+=</span> moveY\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token string">\'line\'</span><span class="token punctuation">:</span>\n      <span class="token keyword">var</span> item <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>activeShape<span class="token punctuation">;</span>\n      <span class="token keyword">var</span> lineNumber <span class="token operator">=</span> item<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span>\n      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lineNumber<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">let</span> index <span class="token operator">=</span> i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>\n        item<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+=</span> moveX\n        item<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> moveY\n      <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>shapedOldX <span class="token operator">=</span> e<span class="token punctuation">.</span>offsetX\n  <span class="token keyword">this</span><span class="token punctuation">.</span>shapedOldY <span class="token operator">=</span> e<span class="token punctuation">.</span>offsetY\n\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre> <p>移动形状同样也是要获取到基于原始缩放大小(可以看到上方除了<code>this.scale</code>)的画布的移动量 <code>moveX，moveY</code>，再将移动量增加至 选中形状的位置坐标中。</p> <p>保存好当前偏移量 <code>this.shapedOldX，this.shapedOldY</code>，供下次事件触发使用。</p> <h3><a id="_687"></a>判断是否处于形状内部方法解释</h3> <p>1.判断是否处于矩形框内<br> 根据当前计算出的 <code>x，y</code> 坐标，判断是否小于 矩形的<code>x，y</code> 坐标，并且判断是否大于矩形 <code>(x + width)</code> 与 <code>(y + height)</code> 的右下角坐标。</p> <p>2.判断是否处于圆形内<br> 根据当前计算出的 <code>x，y</code> 坐标，计算出距离圆心 坐标的距离，如果小于等于圆的半径，就说明处于圆形内部。</p> <p>3.判断是否处于线段中<br> 假设线段 AB，鼠标点击点为C，判断AC 或 BC 是否大于 AD，如果大于C肯定不处于线段内，并且C与AB 的垂直距离CH必须小于等于 线段宽度的一半。</p> <p><img src="https://img-blog.csdnimg.cn/20200512125433888.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1ZHlfemhvdQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p> <p>这里只支持单个线段判断，多个连接线段判断不精确，连接处会有多余部分无法判断。<br> 如下图：<br> <img src="https://img-blog.csdnimg.cn/20200512121911288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1ZHlfemhvdQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 这是宽度为90的线段，红色区域上述方法能判断，箭头指向部分无法判断。<br> 这里暂时不考虑也是因为如果 线段之间的夹角小于 <code>90deg</code>，默认形状会是：<br> <img src="https://img-blog.csdnimg.cn/20200512125001703.png" alt="在这里插入图片描述"><br> 可以看 <a href="https://www.w3school.com.cn/tags/canvas_miterlimit.asp">miterLimit 属性</a> 和 <a href="https://www.w3school.com.cn/tags/canvas_linejoin.asp">lineJoin 属性</a> 以及 <a href="https://www.w3school.com.cn/tags/canvas_linecap.asp">lineCap 属性</a>，这些属性对线段影响较大，这里只做默认状态下单条线段判断演示。</p> <h1><a id="_707"></a>总结</h1> <p>OK，以上就已经把最开始讲的需求做完了，有兴趣的朋友可以更改Demo 中的例子修改参数看看效果。</p> <p>以上如有问题或疏漏，欢迎指正，谢谢。</p> </div> </body> </html> ';n.exports=a},b40e:function(n,s){var a='<!DOCTYPE html> <html> <head> <meta charset="utf-8"> <meta name="viewport" content="width=device-width,initial-scale=1"> <title>JavaScript 有哪些数据类型 以及获取与判断的方法</title> <link rel="stylesheet" href="https://stackedit.io/style.css"/> </head> <body class="stackedit"> <div class="stackedit__html"><p></p><div class="toc"><h3>JavaScript 有哪些数据类型 以及获取与判断的方法</h3><ul><li><a href="#_1">引言</a></li><li><a href="#_6">数据类型</a></li><ul><li><a href="#_8">原始数据类型</a></li><ul><li><a href="#1Boolean__11">1.Boolean 类型</a></li><li><a href="#2Null__19">2.Null 类型</a></li><li><a href="#3Undefined__23">3.Undefined 类型</a></li><li><a href="#4Number__30">4.Number 类型</a></li><li><a href="#5BigInt__37">5.BigInt 类型</a></li><li><a href="#6String__44">6.String 类型</a></li><li><a href="#7Symbol__49">7.Symbol 类型</a></li></ul><li><a href="#_52">对象</a></li><ul><li><a href="#1__54">1."标准的" 对象</a></li><li><a href="#2_57">2.数组</a></li><li><a href="#3_60">3.函数</a></li></ul></ul><li><a href="#_65">获取与判断类型</a></li><ul><li><a href="#1typeof_67">1.typeof</a></li><li><a href="#2instanceof_111">2.instanceof</a></li></ul><li><a href="#_138">总结</a></li></ul></div><p></p> <h1><a id="_1"></a>引言</h1> <p>  对我来说什么时候写博客呢？无非就几种情况，一种是对某些知识了解不清楚需要巩固。一种是遇到问题上网找了很久没有合适的答案，最终找到了解决方案，为了方便广大同行能快速定位解决问题。最后一种就是有些小心得，分享记录一下自己的感受。</p> <p>  本篇信息主题其实算是很基础很基础的东西，但是就是这些基础有很多时候却被我忽略以至于弄混淆，现在就需要总结巩固一下了。</p> <h1><a id="_6"></a>数据类型</h1> <p>一共八种，七种原始数据类型和对象</p> <h2><a id="_8"></a>原始数据类型</h2> <p>也称为基本类型，分别是 <strong><code>Boolean</code>、 <code>Null</code>、 <code>Undefined</code>、 <code>Number</code>、 <code>BigInt</code>、 <code>String</code>、 <code>Symbol</code></strong></p> <h3><a id="1Boolean__11"></a>1.Boolean 类型</h3> <p>布尔类型，是一种取值仅能为 <code>真</code> 或 <code>假</code> 的数据类型，可以有两个值：<code>true</code> 和 <code>false</code>。<br> 其他数据类型也被区分为 <code>truthy(真值)</code>，<code>falsy (虚值)</code>。在 Boolean 上下文中会被转换为 <code>true</code> 或者 <code>false</code>进行判断。<br> 比如下面：<br> 取反（<code>!</code>）、异或判断（<code>||</code>,<code>&amp;&amp;</code>）、<code>Boolean()</code>、<code>if()</code></p> <p><code>false</code>、<code>undefined</code>、<code>null</code>、<code>正负0</code>、<code>NaN</code>、<code>空字符串\'\'</code> 以外的都是 <code>truthy(真值)</code></p> <h3><a id="2Null__19"></a>2.Null 类型</h3> <p>Null 类型只有一个值： <code>null</code>。<br> 就是我们常说的空指针</p> <h3><a id="3Undefined__23"></a>3.Undefined 类型</h3> <p>一个已声明的变量（未赋值）的初始值是 <code>undefined</code>。未声明的使用直接报错 <font color="#b74f58">is not defined</font>。<br> 以下几种情况也返回 <code>undefined</code><br> 获取对象不存在（原型链上也不存在）的属性、调用没有返回值的函数、typeof判断未声明或者已声明未赋值的变量</p> <p><code>undefined</code>不存在属性，因此前端最常见的报错（没有之一）就是<font color="#b74f58"> Cannot read property ‘xxx’ of undefined</font>。</p> <h3><a id="4Number__30"></a>4.Number 类型</h3> <p>基于 IEEE 754 标准的双精度 64 位二进制格式的值（-(2<sup>53</sup> -1) 到 2<sup>53</sup> -1)，在javascript中称为安全整数，超过这个限制的数计算不精确。<br> 最大安全整数 <code>Number.MAX_SAFE_INTEGER</code> === 2<sup>53</sup> -1<br> 最小安全整数 <code>Number.MIN_SAFE_INTEGER</code> === -(2<sup>53</sup> -1）</p> <p>除了常见数值外， <code>+Infinity</code>，<code>-Infinity</code> 和 <code>NaN</code> 也是<code>Number</code>类型</p> <h3><a id="5BigInt__37"></a>5.BigInt 类型</h3> <p><code>BigInt</code>类型是 JavaScript 中的一个基础的数值类型，可以表示任意大的整数（甚至可以超过安全整数限制）<br> <code>BigInt</code> 类型可以使用常用运算 <code>+</code>、<code>*</code>、<code>-</code>、<code>**</code>、<code>%</code> ，除 <code>&gt;&gt;&gt;</code> （无符号右移）之外的 位操作 也可以支持<br> 不支持单目 (+) 运算符（如：+2）<br> 不能与<code>Number</code> 类型混合计算<br> 不能使用<code>Math</code> 的方法</p> <h3><a id="6String__44"></a>6.String 类型</h3> <p>字符串类型，JavaScript 字符串是不可更改的，但是，可以基于对原始字符串的操作来创建新的字符串<br> 可以使用<code>String.concat()</code>、<code>连字符（+）</code> 拼接字符串<br> 可以使用<code>String</code> 方法，如：<code>replace</code>、<code>substr</code>、<code>slice</code>等</p> <h3><a id="7Symbol__49"></a>7.Symbol 类型</h3> <p>符号类型，符号类型唯一且不可修改，可以作为<code>Object</code> 的 <code>key</code>，作为<code>key</code> 的<code>Symbol</code> 不可枚举。</p> <h2><a id="_52"></a>对象</h2> <p>常见对象分为 <code>"标准的" 对象{}</code>、<code>数组 []</code>、<code>函数 function(){}</code> 等</p> <h3><a id="1__54"></a>1.“标准的” 对象</h3> <p>就是 <strong>键</strong> 和 <strong>值</strong> 之间的映射集合，<strong>键</strong> 是一个字符串（或者 Symbol） ，<strong>值</strong> 可以是任意类型的值。</p> <h3><a id="2_57"></a>2.数组</h3> <p>数组默认是有序整数作为 <strong>键</strong>属性（也可以使用字符串，Symbol）， <strong>值</strong> 可以是任意类型的值，类似于列表的高阶对象，表示列表和集合的最适合方式。</p> <h3><a id="3_60"></a>3.函数</h3> <p>分为普通函数 <code>function(){}</code> 和 箭头函数（<code>=&gt;</code>）。<br> <code>Date</code>、<code>Object</code>、<code>RegExp</code>、<code>String</code> 等等都是函数，JavaScript 的内置函数，可以通过 <code>new</code> 关键字创建对象实例。<br> 自己创建的普通函数也可以创建实例，箭头函数不能。</p> <h1><a id="_65"></a>获取与判断类型</h1> <p>原生判断方式有两种，通过<code>typeof</code>返回判断，和通过 <code>instanceof</code> 查找原型链是否存在的方式判断。</p> <h2><a id="1typeof_67"></a>1.typeof</h2> <pre><code class="prism language-javascript"><span class="token keyword">typeof</span> <span class="token boolean">true</span>\t  \t\t<span class="token comment">// boolean</span>\n<span class="token keyword">typeof</span> undefined   \t<span class="token comment">// undefined</span>\n<span class="token keyword">typeof</span> document<span class="token punctuation">.</span>all <span class="token comment">// undefined</span>\n<span class="token keyword">typeof</span> <span class="token number">3</span> \t\t\t<span class="token comment">// number</span>\n<span class="token keyword">typeof</span> <span class="token number">NaN</span>\t\t\t<span class="token comment">// number</span>\n<span class="token keyword">typeof</span> <span class="token number">3</span>n\t\t\t<span class="token comment">// bigint</span>\n<span class="token keyword">typeof</span> <span class="token string">\'abc\'</span>\t\t<span class="token comment">// string</span>\n<span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\t\t\t<span class="token comment">// object</span>\n<span class="token keyword">typeof</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\t\t\t<span class="token comment">// object</span>\n<span class="token keyword">typeof</span> <span class="token keyword">null</span>   \t\t<span class="token comment">// object</span>\n<span class="token keyword">typeof</span> <span class="token operator">/</span>\\s<span class="token operator">/</span>\t\t\t<span class="token comment">// object</span>\n<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\t<span class="token comment">// object</span>\n<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\t<span class="token comment">// object</span>\n<span class="token keyword">typeof</span> Date\t\t\t<span class="token comment">// function</span>\n</code></pre> <p>typeof把 <code>数组</code> 与 <code>null</code> 、<code>Map</code>、<code>Set</code> 都判断为 object 了，其他的确实是对象这也能理解。但是 <code>null</code> 判断为对象，就是<a href="http://www.2ality.com/2013/10/typeof-null.html">javascript 设计之初就存在的bug了</a>。</p> <p>如果想要把类似 <code>数组</code>、<code>Map</code>、<code>Set</code>、<code>null</code> 等明确区分，可以自己写一个判断类型函数。如下：</p> <pre><code class="prism language-javascript"><span class="token keyword">function</span> <span class="token function">getType</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/(?&lt;=\\s)[a-zA-Z]+/</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre> <p>在看一下上面的数据用<code>getType</code> 判断</p> <pre><code class="prism language-javascript"><span class="token function">getType</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>\t  \t<span class="token comment">// boolean</span>\n<span class="token function">getType</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span>  <span class="token comment">// undefined</span>\n<span class="token function">getType</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>all<span class="token punctuation">)</span><span class="token comment">// htmlallcollection</span>\n<span class="token function">getType</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> \t\t\t<span class="token comment">// number</span>\n<span class="token function">getType</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span>\t\t<span class="token comment">// number</span>\n<span class="token function">getType</span><span class="token punctuation">(</span><span class="token number">3</span>n<span class="token punctuation">)</span>\t\t\t<span class="token comment">// bigint</span>\n<span class="token function">getType</span><span class="token punctuation">(</span><span class="token string">\'abc\'</span><span class="token punctuation">)</span>\t\t<span class="token comment">// string</span>\n<span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\t\t\t<span class="token comment">// array</span>\n<span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\t\t\t<span class="token comment">// object</span>\n<span class="token function">getType</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>   \t<span class="token comment">// null</span>\n<span class="token function">getType</span><span class="token punctuation">(</span><span class="token regex">/\\s/</span><span class="token punctuation">)</span>\t\t<span class="token comment">// regexp</span>\n<span class="token function">getType</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\t<span class="token comment">// map</span>\n<span class="token function">getType</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\t<span class="token comment">// set</span>\n<span class="token function">getType</span><span class="token punctuation">(</span>Date<span class="token punctuation">)</span>\t\t<span class="token comment">// function</span>\n</code></pre> <h2><a id="2instanceof_111"></a>2.instanceof</h2> <p>用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。</p> <pre><code class="prism language-javascript"><span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> \n<span class="token keyword">function</span> <span class="token constant">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> \n\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\na <span class="token keyword">instanceof</span> <span class="token class-name">A</span><span class="token punctuation">;</span> <span class="token comment">// true，因为 Object.getPrototypeOf(a) === A.prototype</span>\na <span class="token keyword">instanceof</span> <span class="token class-name">B</span><span class="token punctuation">;</span> <span class="token comment">// false，因为 B.prototype 不在 a 的原型链上</span>\n\na <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">;</span> <span class="token comment">// true，因为 Object.prototype.isPrototypeOf(a) 返回 true</span>\n</code></pre> <p>我们常用来判断某个数据是否是某种类型，比如这里判断数组：</p> <pre><code class="prism language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">\'234\'</span>\n\na <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token comment">// true，因为 Object.getPrototypeOf(a) === Array.prototype</span>\nb <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token comment">// false，因为 Array.prototype 不在 b 的原型链上</span>\n\na <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">;</span> <span class="token comment">// true，因为 Object.prototype.isPrototypeOf(a) 返回 true</span>\nb <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">;</span> <span class="token comment">// false，因为 Object.prototype.isPrototypeOf(b) 返回 false</span>\n</code></pre> <h1><a id="_138"></a>总结</h1> <p>   关于javascript 数据类型以及获取类型以及判断类型就整理这些了。更多信息可以去<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">MDN JavaScript</a> 上看，上面写的很详细，每个属性之间的关联也整理的很清楚。</p> <p>以上信息如有疏漏或错误，欢迎指正。</p> </div> </body> </html> ';n.exports=a},c804:function(n,s){var a='<!DOCTYPE html> <html> <head> <meta charset="utf-8"> <meta name="viewport" content="width=device-width,initial-scale=1"> <title>vue 组件选项的推荐顺序 与 自动排序</title> <link rel="stylesheet" href="https://stackedit.io/style.css"/> </head> <body class="stackedit"> <div class="stackedit__html"><p></p><div class="toc"><h3>vue 组件选项的推荐顺序 与 自动排序</h3><ul><li><a href="#vue_2">转载一下vue推荐顺序</a></li><li><a href="#_eslint__93">使用 eslint 自动排序</a></li></ul></div><br> 一直以来使用vue开发，除了知道生命周期的 hook 函数顺序，其他选项的顺序不知道是否有规范。后来看了vue的风格指南，里面的选项是有推荐顺序的，也找了一下如何自动排序，今天就分享一下。<p></p> <h1><a id="vue_2"></a>转载一下vue推荐顺序</h1> <p>先发个 <a href="https://cn.vuejs.org/v2/style-guide/index.html#%E7%BB%84%E4%BB%B6-%E5%AE%9E%E4%BE%8B%E7%9A%84%E9%80%89%E9%A1%B9%E7%9A%84%E9%A1%BA%E5%BA%8F%E6%8E%A8%E8%8D%90">Vue 风格指南 选项推荐顺序 地址</a></p> <h4>组件/实例的选项应该有统一的顺序。</h4><h4> </h4><p><font size="4">这是我们推荐的组件选项默认顺序。它们被划分为<strong>几大类</strong>，所以你也能知道从插件里添加的新 property 应该放到哪里。</font></p> <p><strong>副作用</strong> (触发组件外的影响)</p> <p><font color="orange">★</font> <code>el</code></p> <p><strong>全局感知</strong> (要求组件以外的知识)</p> <p><font color="orange">★</font> <code>name</code></p> <p><font color="orange">★</font> <code>parent</code></p> <p><strong>组件类型</strong> (更改<strong>组件的类型</strong>)</p> <p><font color="orange">★</font> <code>functional</code></p> <p><strong>模板修改器</strong> (改变模板的编译方式)</p> <p><font color="orange">★</font> <code>delimiters</code></p> <p><font color="orange">★</font> <code>comments</code></p> <p><strong>模板依赖</strong> (模板内使用的资源)</p> <p><font color="orange">★</font> <code>components</code></p> <p><font color="orange">★</font> <code>directives</code></p> <p><font color="orange">★</font> <code>filters</code></p> <p><strong>组合</strong> (向选项里合并 property)</p> <p><font color="orange">★</font> <code>extends</code></p> <p><font color="orange">★</font> <code>mixins</code></p> <p><strong>接口</strong> (组件的接口)</p> <p><font color="orange">★</font> <code>inheritAttrs</code></p> <p><font color="orange">★</font> <code>model</code></p> <p><font color="orange">★</font> <code>props</code> / <code>propsData</code></p> <p><strong>本地状态</strong> (本地的响应式 property)</p> <p><font color="orange">★</font> <code>data</code></p> <p><font color="orange">★</font> <code>computed</code></p> <p><strong>事件</strong> (通过响应式事件触发的回调)</p> <p> <font color="orange">★</font> <code>watch</code></p> <p> <strong>生命周期钩子</strong> (按照它们被调用的顺序)</p> <p> <font color="orange">★</font> <code>beforeCreate</code></p> <p> <font color="orange">★</font> <code>created</code></p> <p> <font color="orange">★</font> <code>beforeMount</code></p> <p> <font color="orange">★</font> <code>mounted</code></p> <p> <font color="orange">★</font> <code>beforeUpdate</code></p> <p> <font color="orange">★</font> <code>updated</code></p> <p> <font color="orange">★</font> <code>activated</code></p> <p> <font color="orange">★</font> <code>deactivated</code></p> <p> <font color="orange">★</font> <code>beforeDestroy</code></p> <p> <font color="orange">★</font> <code>destroyed</code></p> <p><strong>非响应式的 property</strong> (不依赖响应系统的实例 property)</p> <p><font color="orange">★</font> <code>methods</code></p> <p><strong>渲染</strong> (组件输出的声明式描述)</p> <p><font color="orange">★</font> <code>template</code> / <code>render</code></p> <p><font color="orange">★</font> <code>renderError</code></p> <h1><a id="_eslint__93"></a>使用 eslint 自动排序</h1> <p>如果是用 <code>vue-cli3.0</code> 构建的项目，选择使用eslint 的话会默认安装 <code>eslint-plugin-vue</code> 这个依赖项</p> <p>如果没有就安装一下</p> <pre><code class="prism language-bash"><span class="token function">npm</span> <span class="token function">install</span> eslint-plugin-vue --save-dev\n</code></pre> <p>接着就是在 <code>.eslintrc.js</code> 中配置，如果用 <code>vue-cli3.0</code> 构建项目选择了 <code>In dedicated config files</code> ，就会生成 <code>.eslintrc.js</code>，选择 <code>In package.json</code> 规则就在<code>package.json</code> 中的 <code>eslintConfig</code> 这个属性上配置</p> <p>在以上说的配置文件中的 <code>extends</code> 这个数组中加入 <code>plugin:vue/recommended</code></p> <pre><code class="prism language-javascript"><span class="token string">"extends"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  <span class="token string">"plugin:vue/essential"</span><span class="token punctuation">,</span>\n  <span class="token string">"plugin:vue/recommended"</span><span class="token punctuation">,</span> <span class="token comment">// 添加了这一项</span>\n  <span class="token string">"eslint:recommended"</span><span class="token punctuation">,</span>\n  <span class="token string">"@vue/prettier"</span>\n<span class="token punctuation">]</span><span class="token punctuation">,</span>\n</code></pre> <p>好了，就这么简单，保存时默认就已经有了自动格式化排序的功能了</p> <p>不想使用插件推荐的顺序，想自己定顺序，也可以</p> <p>在 <code>eslint</code> 配置文件中的 <code>rules</code> 属性下添加</p> <pre><code class="prism language-javascript">rules<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n <span class="token string">"vue/order-in-components"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n   <span class="token string">"error"</span><span class="token punctuation">,</span>\n   <span class="token punctuation">{</span>\n     <span class="token string">"order"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n       <span class="token string">"el"</span><span class="token punctuation">,</span>\n       <span class="token string">"name"</span><span class="token punctuation">,</span>\n       <span class="token string">"key"</span><span class="token punctuation">,</span>\n       <span class="token string">"parent"</span><span class="token punctuation">,</span>\n       <span class="token string">"functional"</span><span class="token punctuation">,</span>\n       <span class="token punctuation">[</span><span class="token string">"delimiters"</span><span class="token punctuation">,</span> <span class="token string">"comments"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n       <span class="token punctuation">[</span><span class="token string">"components"</span><span class="token punctuation">,</span> <span class="token string">"directives"</span><span class="token punctuation">,</span> <span class="token string">"filters"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n       <span class="token string">"extends"</span><span class="token punctuation">,</span>\n       <span class="token string">"mixins"</span><span class="token punctuation">,</span>\n       <span class="token punctuation">[</span><span class="token string">"provide"</span><span class="token punctuation">,</span> <span class="token string">"inject"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n       <span class="token string">"ROUTER_GUARDS"</span><span class="token punctuation">,</span>\n       <span class="token string">"layout"</span><span class="token punctuation">,</span>\n       <span class="token string">"middleware"</span><span class="token punctuation">,</span>\n       <span class="token string">"validate"</span><span class="token punctuation">,</span>\n       <span class="token string">"scrollToTop"</span><span class="token punctuation">,</span>\n       <span class="token string">"transition"</span><span class="token punctuation">,</span>\n       <span class="token string">"loading"</span><span class="token punctuation">,</span>\n       <span class="token string">"inheritAttrs"</span><span class="token punctuation">,</span>\n       <span class="token string">"model"</span><span class="token punctuation">,</span>\n       <span class="token punctuation">[</span><span class="token string">"props"</span><span class="token punctuation">,</span> <span class="token string">"propsData"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n       <span class="token string">"emits"</span><span class="token punctuation">,</span>\n       <span class="token string">"setup"</span><span class="token punctuation">,</span>\n       <span class="token string">"fetch"</span><span class="token punctuation">,</span>\n       <span class="token string">"asyncData"</span><span class="token punctuation">,</span>\n       <span class="token string">"data"</span><span class="token punctuation">,</span>\n       <span class="token string">"head"</span><span class="token punctuation">,</span>\n       <span class="token string">"computed"</span><span class="token punctuation">,</span>\n       <span class="token string">"watch"</span><span class="token punctuation">,</span>\n       <span class="token string">"watchQuery"</span><span class="token punctuation">,</span>\n       <span class="token string">"LIFECYCLE_HOOKS"</span><span class="token punctuation">,</span>\n       <span class="token string">"methods"</span><span class="token punctuation">,</span>\n       <span class="token punctuation">[</span><span class="token string">"template"</span><span class="token punctuation">,</span> <span class="token string">"render"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n       <span class="token string">"renderError"</span>\n     <span class="token punctuation">]</span>\n   <span class="token punctuation">}</span>\n <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre> <p>修改 <code>order</code> 数组里面选项顺序，格式化的时候，就自动按照你书写的顺序格式化</p> <p>用图举个例子<br> <img src="https://img-blog.csdnimg.cn/20200610145717834.gif" alt="在这里插入图片描述"><br> 在这个例子中，我修改了 <code>watch</code> 的顺序 在 <code>data</code> 的上方和下方，在 <code>vue</code> 文件中保存时，自动格式化了顺序。</p> <p>对于 <code>vue</code> 组件选项推荐顺序与自动排序就分享到这里，想了解配置更多的小伙伴可以点这个 链接 <a href="https://eslint.vuejs.org/rules/">eslint-plugin-vue</a> ，学习配置更多功能。</p> <p>以上信息如有疏漏或错误，欢迎指正哈</p> </div> </body> </html> ';n.exports=a},d95f:function(n,s){var a='<!DOCTYPE html> <html> <head> <meta charset="utf-8"> <meta name="viewport" content="width=device-width,initial-scale=1"> <title>iView DatePicker 组件 选择年/月 下拉框异常收缩</title> <link rel="stylesheet" href="https://stackedit.io/style.css"/> </head> <body class="stackedit"> <div class="stackedit__html"><p></p><div class="toc"><h3>iView DatePicker 组件 选择年/月 下拉框异常收缩</h3><ul><li><a href="#_1">引言</a></li><li><a href="#bug__4">bug 详细信息</a></li><li><a href="#bug__7">bug 出现原因</a></li><li><a href="#_43">结语</a></li></ul></div><p></p> <h1><a id="_1"></a>引言</h1> <p>上头新分给我一个之前延期处理的 <code>bug</code>，就是标题描述的 <code>bug</code>，<code>iView</code> 的 <code>DatePicker</code> 组件，在选择年或者月的情况会异常收缩起来。正常不应该收缩起来，因为选择年后还要选择月份，选择月份后还要选择天数。参照 <code>iView</code> 的 <code>demo</code> 发现用法并无问题，第一想到的就是当前这个项目有 <code>iView</code> 的全局配置 或者 某些插件功能冲突（项目是前同事写的，我不知道有哪些全局配置），最后发现是一个全局配置影响的，而且这算是<code>iView</code> 的一个bug，下面用图说明一下。</p> <h1><a id="bug__4"></a>bug 详细信息</h1> <p><img src="https://img-blog.csdnimg.cn/20200721100116894.gif" alt="在这里插入图片描述"><br> 从动图很明显能看到bug。</p> <h1><a id="bug__7"></a>bug 出现原因</h1> <p>解释一个 <code>:capture="false"</code> 这个<code>capture</code> 是 <code>iView</code> 4.x 新加的全局配置属性，原话是<br> <img src="https://img-blog.csdnimg.cn/20200721100320894.png" alt="在这里插入图片描述"><br> 默认值是 <code>true</code> ，所以官方 <code>Demo</code> 并无问题，而是在项目中（一般是在<code>main.js</code>）配置了 <code>iView</code> 的全局配置</p> <pre><code class="prism language-javascript">Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>iView<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n\tcapture<span class="token punctuation">:</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre> <p>这算是一个 <code>iView</code> 的bug，解决方案是 全局的删除（因为默认就是<code>true</code>），或者在每个<code>DatePicker</code> 使用处添加 <code>:capture="false"</code></p> <pre><code class="prism language-javascript"><span class="token operator">&lt;</span>DatePicker type<span class="token operator">=</span><span class="token string">"date"</span> <span class="token punctuation">:</span>capture<span class="token operator">=</span><span class="token string">"trie"</span> placeholder<span class="token operator">=</span><span class="token string">"Select date"</span> style<span class="token operator">=</span><span class="token string">"width: 200px"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>DatePicker<span class="token operator">&gt;</span>\n</code></pre> <p><code>DatePicker</code> 源码是这样的最外层标签添加了这些属性，虽然其他下拉也用到了，但是我并没有测出问题（有兴趣可以去看）。</p> <pre><code class="prism language-javascript"><span class="token operator">&lt;</span>div\n\tv<span class="token operator">-</span>click<span class="token operator">-</span>outside<span class="token punctuation">:</span><span class="token punctuation">[</span>capture<span class="token punctuation">]</span><span class="token punctuation">.</span>mousedown<span class="token operator">=</span><span class="token string">"handleClose"</span>\n\tv<span class="token operator">-</span>click<span class="token operator">-</span>outside<span class="token punctuation">:</span><span class="token punctuation">[</span>capture<span class="token punctuation">]</span><span class="token punctuation">.</span>touchstart<span class="token operator">=</span><span class="token string">"handleClose"</span>\n\tv<span class="token operator">-</span>click<span class="token operator">-</span>outside<span class="token punctuation">:</span><span class="token punctuation">[</span>capture<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"handleClose"</span><span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n</code></pre> <p><code>DatePicker</code> 的 <code>props</code> 添加了</p> <pre><code class="prism language-javascript"> <span class="token comment">// 4.0.0</span>\n capture<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n     type<span class="token punctuation">:</span> Boolean<span class="token punctuation">,</span>\n     <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n         <span class="token keyword">return</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>$<span class="token constant">IVIEW</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$<span class="token constant">IVIEW</span><span class="token punctuation">.</span>capture<span class="token punctuation">;</span>\n     <span class="token punctuation">}</span>\n <span class="token punctuation">}</span>\n</code></pre> <h1><a id="_43"></a>结语</h1> <p>好了以上就这么多，小伙伴们在使用插件时定位不到问题，可以去看源码，其实源码并不复杂，跟你自己写的代码一样。解决bug就是要了解他出问题的地方，等我有空就去 <code>iView</code> 上提 <code>issuse</code>，今天工作记录就分享到这里，有问题，欢迎留言询问。嘿嘿</p> </div> </body> </html> ';n.exports=a},da3f:function(n,s){var a='<!DOCTYPE html> <html> <head> <meta charset="utf-8"> <meta name="viewport" content="width=device-width,initial-scale=1"> <title>canvas 绘制特效 小球连接线动画</title> <link rel="stylesheet" href="https://stackedit.io/style.css"/> </head> <body class="stackedit"> <div class="stackedit__html"><p></p><div class="toc"><h3>canvas 绘制特效 小球连接线动画</h3><ul><li><a href="#_2">引言</a></li><li><a href="#_6">详细代码</a></li><li><a href="#demo_118">demo演示</a></li><li><a href="#_121">解释</a></li><li><a href="#_130">结语</a></li></ul></div><p></p> <h1><a id="_2"></a>引言</h1> <p>   一个很经典的特效，花了一点时间自己手动写了一个，先上图：</p> <p><img src="https://img-blog.csdnimg.cn/20200511123339354.gif" alt="小球连接线动画"></p> <h1><a id="_6"></a>详细代码</h1> <p>html</p> <pre><code class="prism language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>canvas_bg<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">&gt;</span></span>\n</code></pre> <p>css</p> <pre><code class="prism language-css"><span class="token selector">html, body</span> <span class="token punctuation">{</span>\n  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>\n  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">#canvas_bg</span> <span class="token punctuation">{</span>\n  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre> <p>javascript</p> <pre><code class="prism language-javascript"><span class="token keyword">class</span> <span class="token class-name">circle</span> <span class="token punctuation">{</span>\n <span class="token function">constructor</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">this</span><span class="token punctuation">.</span>canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'canvas_bg\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token keyword">this</span><span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>\n   <span class="token keyword">this</span><span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>\n   <span class="token keyword">this</span><span class="token punctuation">.</span>ctx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">\'2d\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n   <span class="token comment">// 创建随机状态小球</span>\n   <span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n     x<span class="token punctuation">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span>\n     y<span class="token punctuation">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>height<span class="token punctuation">,</span>\n     speed<span class="token punctuation">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.5</span> <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">,</span>\n     xDir<span class="token punctuation">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0.5</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>\n     yDir<span class="token punctuation">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0.5</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>\n     r<span class="token punctuation">:</span> <span class="token number">2</span>\n   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n   <span class="token comment">// 小球连线距离</span>\n   <span class="token keyword">this</span><span class="token punctuation">.</span>dist <span class="token operator">=</span> <span class="token number">100</span>\n\n   <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n   window<span class="token punctuation">.</span><span class="token function-variable function">onresize</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n     <span class="token keyword">this</span><span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>\n     <span class="token keyword">this</span><span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n <span class="token punctuation">}</span>\n <span class="token comment">// 计算小球位置并判断方向与绘制</span>\n <span class="token function">drawCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n     item<span class="token punctuation">.</span>x <span class="token operator">+=</span> item<span class="token punctuation">.</span>xDir <span class="token operator">*</span> item<span class="token punctuation">.</span>speed\n     item<span class="token punctuation">.</span>y <span class="token operator">+=</span> item<span class="token punctuation">.</span>yDir <span class="token operator">*</span> item<span class="token punctuation">.</span>speed\n\n     item<span class="token punctuation">.</span>x <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>xDir <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> \n     item<span class="token punctuation">.</span>x <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>width <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>xDir <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>width <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>\n\n     item<span class="token punctuation">.</span>y <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>yDir <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> \n     item<span class="token punctuation">.</span>y <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>height <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>yDir <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>height <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>\n\n     <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n     <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>x<span class="token punctuation">,</span> item<span class="token punctuation">.</span>y<span class="token punctuation">,</span> item<span class="token punctuation">.</span>r<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n     <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span><span class="token punctuation">)</span>\n <span class="token punctuation">}</span>\n\n <span class="token comment">// 计算连线距离内的小球</span>\n <span class="token function">calcLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n   <span class="token keyword">this</span><span class="token punctuation">.</span>lineArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> y <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n       <span class="token keyword">let</span> val <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">-</span> arr<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">-</span> arr<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n       <span class="token keyword">if</span><span class="token punctuation">(</span>val <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dist<span class="token punctuation">)</span><span class="token punctuation">{</span>\n         <span class="token keyword">this</span><span class="token punctuation">.</span>lineArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n           start<span class="token punctuation">:</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>\n           end<span class="token punctuation">:</span> arr<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span>\n           val<span class="token punctuation">:</span> val<span class="token punctuation">,</span>\n           ratio<span class="token punctuation">:</span> <span class="token punctuation">(</span>val <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dist<span class="token punctuation">)</span>\n         <span class="token punctuation">}</span><span class="token punctuation">)</span>\n       <span class="token punctuation">}</span>\n     <span class="token punctuation">}</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 绘制链接线条</span>\n <span class="token function">drawLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>lineArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>\n     <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n     <span class="token keyword">let</span> item <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lineArr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n     <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">255</span> <span class="token operator">*</span> item<span class="token punctuation">.</span>ratio\n\n     <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> <span class="token template-string"><span class="token string">`rgb(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>c<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>c<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>c<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)`</span></span>\n     <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>start<span class="token punctuation">.</span>x<span class="token punctuation">,</span> item<span class="token punctuation">.</span>start<span class="token punctuation">.</span>y<span class="token punctuation">)</span>\n     <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>end<span class="token punctuation">.</span>x<span class="token punctuation">,</span> item<span class="token punctuation">.</span>end<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> \n     <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n <span class="token punctuation">}</span>\n\n <span class="token comment">// 动画过渡</span>\n <span class="token function">animation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">this</span><span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>width\n   <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">drawCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n   <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">calcLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n   <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n   <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n     <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n   <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>\n <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> circleObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">circle</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre> <h1><a id="demo_118"></a>demo演示</h1> <p><a href="http://jsrun.net/yw2Kp">点击进入小球动画演示Demo</a></p> <h1><a id="_121"></a>解释</h1> <p><strong>这个动画整体效果其实很简单，画布初始化什么的就不说了。</strong></p> <p>1.首先创建一些随机状态的小球，有位置、移动方向、移动速率等</p> <p>2.通过双层循环判断每个小球之间的距离（就用初中学的勾股定理，直角三角形两边的平方和等于斜边的平方，斜边就是小球距离），符合条件的（我设置的小于100）都存起来</p> <p>3.最后绘制小球与线条，加上动画渲染（我这里每隔30毫秒渲染一次，每次渲染都要重新计算上面提到的参数）</p> <h1><a id="_130"></a>结语</h1> <p>详细看看上方的demo中演示与代码，代码量很少，理解起来也不难，只要你有初中知识就能理解。</p> <p>以上如有问题或疏漏，欢迎指正</p> </div> </body> </html> ';n.exports=a},db89:function(n,s){var a='<!DOCTYPE html> <html> <head> <meta charset="utf-8"> <meta name="viewport" content="width=device-width,initial-scale=1"> <title>CSS制作类似 Photoshop 模糊蒙版效果</title> <link rel="stylesheet" href="https://stackedit.io/style.css"/> </head> <body class="stackedit"> <div class="stackedit__html"><p></p><div class="toc"><h3>CSS制作类似 Photoshop 模糊蒙版效果</h3><ul><li><a href="#_1">引言</a></li><li><a href="#IEcss_3">不兼容IE的纯css实现代码</a></li><ul><li><a href="#_4">实现代码</a></li><li><a href="#_46">实现原理</a></li></ul><li><a href="#IE10IE11canvas_67">兼容IE10，IE11的模糊蒙版效果，使用canvas</a></li><ul><li><a href="#_68">实现代码</a></li><li><a href="#_213">实现原理</a></li></ul></ul></div><p></p> <h1><a id="_1"></a>引言</h1> <p>为了使一个在图片上悬浮的方框呈现磨砂玻璃的效果，就是透过这个方框看到下方的图片是模糊的这样一个效果，以下用css来做一个简单的效果。</p> <h1><a id="IEcss_3"></a>不兼容IE的纯css实现代码</h1> <h2><a id="_4"></a>实现代码</h2> <p>首先创建好背景与模糊方框的html代码</p> <pre><code class="prism language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">\'</span>bg<span class="token punctuation">\'</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">\'</span>blur<span class="token punctuation">\'</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre> <p>以下是css代码，这里是在网上随便找的图片，如果图片失效，替换为其他图片链接即可</p> <pre><code class="prism language-css"><span class="token selector">html,body</span> <span class="token punctuation">{</span>\n    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>\n    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.bg</span> <span class="token punctuation">{</span>\n    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>\n    <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.blur</span> <span class="token punctuation">{</span>\n    <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>\n    <span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>\n    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>\n    <span class="token property">margin</span><span class="token punctuation">:</span> 200px auto 400px<span class="token punctuation">;</span>\n    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ffffff99<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.blur::before</span> <span class="token punctuation">{</span>\n    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>\n    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n    <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n    <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n    <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">blur</span><span class="token punctuation">(</span>4px<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.bg, .blur::before</span> <span class="token punctuation">{</span>\n    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url(http://file.youlai.cn/cnkfile1/M00/10/46/oYYBAFlU1WWAGvkPAAQlbBVHA7Y81.jpeg)</span><span class="token punctuation">;</span>\n    <span class="token property">background-attachment</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>\n    <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre> <p>实际效果图（点击效果图可查看demo演示）：<br> <a href="http://jsrun.pro/SyfKp"><img src="https://img-blog.csdnimg.cn/20200219184729197.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1ZHlfemhvdQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></a></p> <h2><a id="_46"></a>实现原理</h2> <p>就实现原理来讲，并非蒙版效果，而是两层图片叠加，一层图片在最下方未模糊处理，一层在方框内，做了模糊处理（<code>filter: blur(4px)</code>）</p> <p><strong><font size="2">其实如果考虑兼容所有，可以不用模糊处理，直接用Photoshop把图片模糊了，方框内就用模糊处理过的图片，只要图片尺寸相同，效果呈现是一样的。<font></font></font></strong></p> <p>设置两张图片的<code>background-attachment: fixed; background-size: cover;</code>样式，使背景图像扩展至足够大，以使背景图像完全覆盖背景区域，以及当页面的其余部分滚动时，背景图像不会移动。</p> <p>以上两种效果相加便做成上方代码演示的效果。因为是使用filter使图片模糊，所以在使用<code>filter: progid:DXImageTransform.Microsoft.Blur(Pixel Radius=5，MakeShadow=false);</code>样式时是能兼容IE6-IE9的，但是IE10，IE11，没有任何能模糊图片的样式，所以想要在IE10以及IE11下使用，可以使用SVG的filter。<br> 代码如下</p> <pre><code class="prism language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2000/svg<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.1<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blue<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blur<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>feGaussianBlur</span> <span class="token attr-name">in</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SourceGraphic<span class="token punctuation">"</span></span> <span class="token attr-name">stdDeviation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">filter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url(#blur)<span class="token punctuation">"</span></span> <span class="token attr-name">x</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">y</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100px<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xlink:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://file.youlai.cn/cnkfile1/M00/10/46/oYYBAFlU1WWAGvkPAAQlbBVHA7Y81.jpeg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">&gt;</span></span>\n</code></pre> <p>效果如下<br> <img src="https://img-blog.csdnimg.cn/20200219190431239.png" alt="在这里插入图片描述"><br> 这里只展示了用svg的filter模糊图片的效果，如果具体实现可以参照上方纯css实现方法，不过这种方法不能使用<code>background-attachment: fixed; background-size: cover;</code>样式带来的效果（方框在图片上位置变化呈现磨砂玻璃透视效果），而要手动通过JS获取位置，定位位置。</p> <h1><a id="IE10IE11canvas_67"></a>兼容IE10，IE11的模糊蒙版效果，使用canvas</h1> <h2><a id="_68"></a>实现代码</h2> <p>html代码</p> <pre><code class="prism language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">\'</span>bg<span class="token punctuation">\'</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">\'</span>blur-box<span class="token punctuation">\'</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blur<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blurID<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre> <p>css代码</p> <pre><code class="prism language-css"><span class="token selector">html,body</span> <span class="token punctuation">{</span>\n  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.bg</span> <span class="token punctuation">{</span>\n  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>\n  <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.blur-box</span> <span class="token punctuation">{</span>\n  <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>\n  <span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>\n  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>\n  <span class="token property">margin</span><span class="token punctuation">:</span> 200px auto 500px<span class="token punctuation">;</span>\n  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ffffff<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.blur</span> <span class="token punctuation">{</span>\n  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>\n  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.bg, .blur</span> <span class="token punctuation">{</span>\n  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url(./oYYBAFlU1WWAGvkPAAQlbBVHA7Y81.jpeg)</span><span class="token punctuation">;</span>\n  <span class="token property">background-attachment</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>\n  <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre> <p>js代码</p> <pre><code class="prism language-javascript"><span class="token keyword">function</span> <span class="token function">gaussBlur</span><span class="token punctuation">(</span>imgData<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> pixes <span class="token operator">=</span> imgData<span class="token punctuation">.</span>data<span class="token punctuation">;</span>\n    <span class="token keyword">var</span> width <span class="token operator">=</span> imgData<span class="token punctuation">.</span>width<span class="token punctuation">;</span>\n    <span class="token keyword">var</span> height <span class="token operator">=</span> imgData<span class="token punctuation">.</span>height<span class="token punctuation">;</span>\n    <span class="token keyword">var</span> gaussMatrix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        gaussSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n        x<span class="token punctuation">,</span> y<span class="token punctuation">,</span>\n        r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a<span class="token punctuation">,</span>\n        i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">,</span> len<span class="token punctuation">;</span>\n\n    <span class="token keyword">var</span> radius <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> sigma <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n\n    a <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">)</span> <span class="token operator">*</span> sigma<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> sigma <span class="token operator">*</span> sigma<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//生成高斯矩阵</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token operator">-</span>radius<span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> radius<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        g <span class="token operator">=</span> a <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">exp</span><span class="token punctuation">(</span>b <span class="token operator">*</span> x <span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        gaussMatrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> g<span class="token punctuation">;</span>\n        gaussSum <span class="token operator">+=</span> g<span class="token punctuation">;</span>\n\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">//归一化, 保证高斯矩阵的值在[0,1]之间</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> gaussMatrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        gaussMatrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/=</span> gaussSum<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">//x 方向一维高斯运算</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> height<span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> width<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            r <span class="token operator">=</span> g <span class="token operator">=</span> b <span class="token operator">=</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n            gaussSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token operator">-</span>radius<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> radius<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                k <span class="token operator">=</span> x <span class="token operator">+</span> j<span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;</span> width<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//确保 k 没超出 x 的范围</span>\n                    <span class="token comment">//r,g,b,a 四个一组</span>\n                    i <span class="token operator">=</span> <span class="token punctuation">(</span>y <span class="token operator">*</span> width <span class="token operator">+</span> k<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>\n                    r <span class="token operator">+=</span> pixes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> gaussMatrix<span class="token punctuation">[</span>j <span class="token operator">+</span> radius<span class="token punctuation">]</span><span class="token punctuation">;</span>\n                    g <span class="token operator">+=</span> pixes<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> gaussMatrix<span class="token punctuation">[</span>j <span class="token operator">+</span> radius<span class="token punctuation">]</span><span class="token punctuation">;</span>\n                    b <span class="token operator">+=</span> pixes<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> gaussMatrix<span class="token punctuation">[</span>j <span class="token operator">+</span> radius<span class="token punctuation">]</span><span class="token punctuation">;</span>\n                    <span class="token comment">// a += pixes[i + 3] * gaussMatrix[j];</span>\n                    gaussSum <span class="token operator">+=</span> gaussMatrix<span class="token punctuation">[</span>j <span class="token operator">+</span> radius<span class="token punctuation">]</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n            i <span class="token operator">=</span> <span class="token punctuation">(</span>y <span class="token operator">*</span> width <span class="token operator">+</span> x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>\n            <span class="token comment">// 除以 gaussSum 是为了消除处于边缘的像素, 高斯运算不足的问题</span>\n            <span class="token comment">// console.log(gaussSum)</span>\n            pixes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> r <span class="token operator">/</span> gaussSum<span class="token punctuation">;</span>\n            pixes<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> g <span class="token operator">/</span> gaussSum<span class="token punctuation">;</span>\n            pixes<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> b <span class="token operator">/</span> gaussSum<span class="token punctuation">;</span>\n            <span class="token comment">// pixes[i + 3] = a ;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">//y 方向一维高斯运算</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> width<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> height<span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            r <span class="token operator">=</span> g <span class="token operator">=</span> b <span class="token operator">=</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n            gaussSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token operator">-</span>radius<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> radius<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                k <span class="token operator">=</span> y <span class="token operator">+</span> j<span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//确保 k 没超出 y 的范围</span>\n                    i <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">*</span> width <span class="token operator">+</span> x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>\n                    r <span class="token operator">+=</span> pixes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> gaussMatrix<span class="token punctuation">[</span>j <span class="token operator">+</span> radius<span class="token punctuation">]</span><span class="token punctuation">;</span>\n                    g <span class="token operator">+=</span> pixes<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> gaussMatrix<span class="token punctuation">[</span>j <span class="token operator">+</span> radius<span class="token punctuation">]</span><span class="token punctuation">;</span>\n                    b <span class="token operator">+=</span> pixes<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> gaussMatrix<span class="token punctuation">[</span>j <span class="token operator">+</span> radius<span class="token punctuation">]</span><span class="token punctuation">;</span>\n                    <span class="token comment">// a += pixes[i + 3] * gaussMatrix[j];</span>\n                    gaussSum <span class="token operator">+=</span> gaussMatrix<span class="token punctuation">[</span>j <span class="token operator">+</span> radius<span class="token punctuation">]</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n            i <span class="token operator">=</span> <span class="token punctuation">(</span>y <span class="token operator">*</span> width <span class="token operator">+</span> x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>\n            pixes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> r <span class="token operator">/</span> gaussSum<span class="token punctuation">;</span>\n            pixes<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> g <span class="token operator">/</span> gaussSum<span class="token punctuation">;</span>\n            pixes<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> b <span class="token operator">/</span> gaussSum<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> imgData<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n  <span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">\'canvas\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">\'2d\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">//这里直接修改图片的路径</span>\n  img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"./oYYBAFlU1WWAGvkPAAQlbBVHA7Y81.jpeg"</span><span class="token punctuation">;</span>\n  img<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">//设置canvas的宽高</span>\n      canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> img<span class="token punctuation">.</span>height<span class="token punctuation">;</span>\n      canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> img<span class="token punctuation">.</span>width<span class="token punctuation">;</span>\n      <span class="token comment">//将图像绘制到canvas上面</span>\n      ctx<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> img<span class="token punctuation">.</span>width<span class="token punctuation">,</span> img<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">//从画布图像获取</span>\n      <span class="token keyword">var</span> data <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getImageData</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> img<span class="token punctuation">.</span>width<span class="token punctuation">,</span> img<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">//将图像数据进行高斯模糊</span>\n      <span class="token keyword">var</span> emptyData <span class="token operator">=</span> <span class="token function">gaussBlur</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">//将模糊的图像数据再渲染到画布上面</span>\n      ctx<span class="token punctuation">.</span><span class="token function">putImageData</span><span class="token punctuation">(</span>emptyData<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">// canvas图像转base64格式，div背景设置为此数据</span>\n      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'blurID\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundImage <span class="token operator">=</span> <span class="token string">\'url(\'</span><span class="token operator">+</span> canvas<span class="token punctuation">.</span><span class="token function">toDataURL</span><span class="token punctuation">(</span> <span class="token string">\'image/png\'</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">\')\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre> <p>以下为代码demo文件，因为<code>getImageData</code> 方法受同源策略影响，外链引入的图片不能拿到图片数据，所以在本地测试，就一个文件一个图片，就不放到github上了，直接用网盘分享一下。</p> <p><a href="https://pan.baidu.com/s/1RdX3ABOO3I8XN2l-pPXT6Q">网盘分享文件密码 55wj</a></p> <h2><a id="_213"></a>实现原理</h2> <p>与以上方法原理一样，只是在模糊图片这一步骤使用了canvas，利用<code>img</code>标签获取到图片，再把图片渲染到canvas画布上，通过<code>getImageData</code>方法获取画布上图片数据，使用上方代码中的<code>gaussBlur</code>方法模糊处理图片数据，把处理好的数据再渲染到画布上面，把画布转成base64格式的数据，赋值到方框的背景。</p> <p>因为这里写的模糊算法是在网上随便找的<a href="https://blog.csdn.net/qq_30100043/article/details/83784608">canvas模糊图片</a>，所以不能通过配置模糊半径，只能固定模糊半径，想了解高斯模糊算法的同学可以看阮老师的这一篇<a href="http://www.ruanyifeng.com/blog/2012/11/gaussian_blur.html">高斯模糊的算法</a>写出自己想要的算法。也可以使用一个比较成熟的插件<a href="https://www.cnblogs.com/qianduanjingying/p/5843025.html">StackBlur.js</a>，</p> <p>上方demo的代码经测试直接打开<code>getImageData</code>会报操作不安全，IE不会报错，如果想在chrome和火狐查看需要把demo文件放入前端起的服务中，推荐在vscode中使用Go live，只需要安装live server 插件，点击右下角Go live 就可以以当前软件打开的文件夹起一个前端服务，通过地址栏可以看到<code>127.0.0.1:5500</code>，这就是一个本地服务。<br> <strong>放一张效果图</strong><br> <img src="https://img-blog.csdnimg.cn/2020032813042360.gif" alt="一张比较长的动图演示，4.3M，下载需要一点时间"></p> <p>此方法是通过计算图片中每个像素点的rgb值，与相邻像素的rgb值取平均值的方法模糊处理的，所以图片较大时计算会变慢，请酌情使用。</p> <p>如果错误欢迎指正，谢谢。</p> </div> </body> </html> ';n.exports=a},e497:function(n,s){var a='<!DOCTYPE html> <html> <head> <meta charset="utf-8"> <meta name="viewport" content="width=device-width,initial-scale=1"> <title>进入debugger调试时，this 输出 undefined的问题，箭头函数与babel造成的调试不便</title> <link rel="stylesheet" href="https://stackedit.io/style.css"/> </head> <body class="stackedit"> <div class="stackedit__html"><p></p><div class="toc"><h3>进入debugger调试时, this 输出 undefined的问题，箭头函数与babel造成的调试不便</h3><ul><li><a href="#_1">引言</a></li><li><a href="#_4">问题区分</a></li><ul><li><a href="#1_this__6">1.箭头函数内的 this 和封闭的局部变量一样</a></li><li><a href="#2_this_babel__15">2.箭头函数内的 this 被babel 打包后重命名了</a></li><li><a href="#3this__53">3.正确获取this 解决方案</a></li></ul></ul></div><p></p> <h1><a id="_1"></a>引言</h1> <p>  之前用<code>VUE</code>开发的时候经常遇到，用 <strong>chrome</strong> 的调试工具进入页面 <code>debugger</code> 的时候，用 <code>console.log(this)</code> 能输出 <code>this</code>的值。但是在断点过程中，用鼠标移动到 <code>this</code> 上显示的确是 <code>undefined</code>(在控制台中输出 <code>this</code> 也是 <code>undefined</code>)。说实话，当时是因为影响并不大，也没在意，也没探究过具体的原因。昨天刚好手上任务完成，就抽了一些时间去仔细找找具体的原因以及解决方案。</p> <h1><a id="_4"></a>问题区分</h1> <p>  对的，你没看错，这个问题要区分一下，因为这个问题并不只是一个问题。这里涉及到多个问题，我在查找原因的时候就发现有人问类似的问题。当我知道具体原因后就发现，问的以及回答的存在牛头不对马嘴的情况。</p> <h2><a id="1_this__6"></a>1.箭头函数内的 this 和封闭的局部变量一样</h2> <p>  这里不展开分享箭头函数，主要讲一点，箭头函数里的 <code>this</code> 跟封闭的局部变量一样，如果箭头函数内部未显示的写出 <code>this</code>，进入这个箭头函数内部的断点，<code>this</code> 输出的是 <code>undefined</code>，看下面这个例子你就知道了。<br> <img src="https://img-blog.csdnimg.cn/20200403102524479.gif" alt="在这里插入图片描述"><br> 这个动图写了两个例子，一个箭头函数内只写了一个<code>debugger</code> ，另一个还显示的写了<code>this</code>，都进入断点时，第一个输出<code>undefined</code>，第二个输出了<code>Window</code>对象。这就是进入断点在控制台中输出<code>this</code> 为 <code>undefined</code> 的第一个问题。</p> <p>至于出现原因就是因为<code>chrome</code>调试器的优化，如果未在函数内部引用局部变量（这里是<code>this</code>），这个变量就不会存储在此函数上下文对象中。所以总结就是箭头函数内部的<code>this</code>(这里不谈指向)，生存周期与普通函数的封闭局部变量一样，都是未显示引用输出就是<code>undefined</code>（针对chrome 调试，火狐不会）。</p> <p>有兴趣的小伙伴可以进入这篇 <a href="https://stackoom.com/question/1v79W/Chrome%E8%B0%83%E8%AF%95%E5%99%A8%E4%B8%BA%E4%BD%95%E8%AE%A4%E4%B8%BA%E5%B0%81%E9%97%AD%E7%9A%84%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E6%9C%AA%E5%AE%9A%E4%B9%89">Chrome调试器为何认为封闭的局部变量未定义？</a>中看看其他牛人的讨论，如果英语足够好也可以进原英文链接 <a href="https://stackoverflow.com/questions/28388530/why-does-chrome-debugger-think-closed-local-variable-is-undefined">Why does Chrome debugger think closed local variable is undefined?</a> 相信这里能完全解决你此问题的疑惑。<br> <br></p> <h2><a id="2_this_babel__15"></a>2.箭头函数内的 this 被babel 打包后重命名了</h2> <p>刚了解到这个问题的时候就去<code>babel</code>官网看了，找到 <a href="https://babeljs.io/docs/en/faq#why-is-this-being-remapped-to-undefined">Why is this being remapped to undefined?</a> 这样一个问题，我兴奋的以为，我找到了答案。但被事实狠狠打大了一把脸。这里问的主要是因为 <code>babel</code> ES2015模块是隐式严格模式的，所以即使是上方第一个问题用普通函数输出也是<code>undefined</code>（严格模式下用<code>window.</code> 调用函数，函数内部<code>this</code> 才会指向 <code>Window</code> 对象）。</p> <p>回到我们的具体问题。进入断点时 <code>console.log(this)</code> 输出了内容，而直接在控制台写 <code>this</code> 执行或者鼠标移到断点处的 <code>this</code> 上显示 <code>undefined</code>是什么原因（<strong>这里不是探究为什么显示<code>undefined</code>了，而是为什么和代码中<code>console.log(this)</code> 输出的不一致，即使解决了输出<code>undefined</code> ，也就是移除严格模式，这里的<code>this</code> 应该也只是输出 <code>Window</code>对象，而不是我们当前运行环境中的比如<code>Vue</code> 这个组件对象）</strong>。</p> <p>因为在项目中使用了<code>babel</code>。比如箭头函数就会被打包成普通函数，而<code>this</code> 指向就会用变量保存来代替，比如<code>_this</code>，<code>_this2</code>之类的。<br> 我把代码例子贴出来大家就知道了，我用的<code>vue</code> 就用<code>vue</code>使用的一个箭头函数的例子解释。</p> <pre><code class="prism language-javascript"><span class="token comment">/* 这个代码是vue methods 钩子下的一个函数，是我的源代码。*/</span>\n<span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">debugger</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/* 这个代码就是上方代码在项目运行中，打包后的代码 */</span>\nhandle<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> _this2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_this2<span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">debugger</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre> <p>下面的截图就是在运行中Sources 下进入断点的代码<br> <img src="https://img-blog.csdnimg.cn/20200403140113382.gif" alt="查看源码与打包后运行代码差异"><br> 从上面明显可以看到，这里的<code>this</code> 已经在<code>babel</code> 打包后赋值给了<code>_this2</code>这个变量。意思就是虽然我们断点进入的是比如上方的<code>About.vue</code> 这个文件，实际运行的代码是左侧这个<code>cjs.js?</code> 这个文件。这种运行环境下你能看到 <code>Console</code> 下 直接写<code>this</code> 输出是<code>undefined</code>，而在<code>About.vue</code> 这个文件中<code>console.log(this.number)</code> 实际是<code>cjs.js</code> 这个文件中的 <code>console.log(_this2.number)</code> 输出的。</p> <p>也就是断点这里<code>this</code>没有指向值，如果想调试查看你想要的 <code>this</code> 值，可以在<code>cjs.js</code>这个文件里看，不过因为打包后和实际写的源代码有较多差异你也可以在<code>Watch</code> 下添加<code>_this2</code> 监听，比如下面的例子。<br> <img src="https://img-blog.csdnimg.cn/20200403141909690.gif" alt="添加Watch监听"><br> 这里因为我测试项目中用的<code>babel</code>是最新的，所以这里<code>this</code> 是用变量<code>_this2</code>保存的。我在其他旧的项目中，发现是<code>_this</code> 这个变量保存，所以大家可以在自己项目中多尝试一下，因为这个具体赋值到什么变量上根据项目代码场景确定的。</p> <p>也可以像我这样在控制台输入 <code>_this</code> 这里提示我 是 <code>_this6</code>，如果实在不找不到就接着看下面。<br> <img src="https://img-blog.csdnimg.cn/20200410152049703.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1ZHlfemhvdQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p> <h2><a id="3this__53"></a>3.正确获取this 解决方案</h2> <p>说到底难道没有不添加<code>Watch</code> 的办法吗，而且这里还是不能把鼠标移动到<code>this</code> 上提示预期值，其实也是有一些比较婉转的解决方案的。</p> <p>第一个，如果项目不用向下兼容，那么推荐不要使用<code>babel</code>了，嘿嘿，这个简单粗暴。(以下动图演示能看到这里的运行代码就没被<code>babel</code> 打包，因为我把<code>babel</code> 移除了)<br> <img src="https://img-blog.csdnimg.cn/20200403143152178.gif" alt="代码演示"><br> 但是，既然你能遇到这个问题，肯定是项目中需要使用<code>label</code> 的，那么我们用一个插件来解决一下。</p> <pre><code class="prism language-shell"><span class="token function">npm</span> i babel-plugin-transform-es2015-arrow-functions --save-dev\n</code></pre> <p>然后在<code>.babelrc</code>或者是<code>babel.config.js</code> 配置文件中加入</p> <pre><code class="prism language-javascript">plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"transform-es2015-arrow-functions"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> spec<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\n</code></pre> <p>运行你的代码，进入断点就会发现。<br> <img src="https://img-blog.csdnimg.cn/20200403144601917.gif" alt="在这里插入图片描述"><br> 项目确实被<code>babel</code> 打包了，但是箭头函数编译方式跟之前不一样了，之前是使用变量保存的方式，现在是使用<code>bind</code> 的方式。也就是内部函数<code>this</code> 的值被更改为外部函数<code>this</code> 值了。这样就可以直接在断点处查看<code>this</code> 的期望值，以后调试前端代码也能更加方便。虽然此方法获取来源的提供者说并非在所有的地方都行之有效，但经测试，我在最新构建的<code>Vue</code>项目中以及以前老的项目中都能使用。如果有遇到不能使用的情况，欢迎反馈哈。</p> <p>此方法是参考 <a href="https://stackoverflow.com/questions/36638663/value-of-this-is-incorrect-when-debugging-babel-transpiled-react-with-chrome-d">loganfsmyth 在Stack Overflow上回答一个问题的答案</a>，有兴趣的同学可以点进去看。<a href="https://stackoom.com/question/2TjOB/%E4%BD%BF%E7%94%A8Chrome-Devtools%E8%B0%83%E8%AF%95Babel-Transpiled-React%E6%97%B6-this-%E7%9A%84%E5%80%BC%E4%B8%8D%E6%AD%A3%E7%A1%AE">再加上国内复刻网站的中文链接</a>。</p> <p>以上解释如果描述不当或欠缺，欢迎指正，谢谢。</p> </div> </body> </html> ';n.exports=a},e6e4:function(n,s,a){},fdfc:function(n,s){var a='<!DOCTYPE html> <html> <head> <meta charset="utf-8"> <meta name="viewport" content="width=device-width,initial-scale=1"> <title>Vue-router 不允许导航到当前位置（&quot;/path&quot;）错误原因以及修复方式</title> <link rel="stylesheet" href="https://stackedit.io/style.css"/> </head> <body class="stackedit"> <div class="stackedit__html"><p></p><div class="toc"><h3>Vue-router 不允许导航到当前位置（/path）</h3><ul><li><a href="#_1">报错提示</a></li><li><a href="#_4">错误原因</a></li><li><a href="#_7">错误演示</a></li><li><a href="#_37">解决方法</a></li><ul><li><a href="#_38">方法一</a></li><li><a href="#_55">方法二</a></li><li><a href="#_70">方法三</a></li></ul></ul></div><p></p> <h1><a id="_1"></a>报错提示</h1> <p><font size="5" color="#d2413e">Navigating to current location ("/path") is not allowed</font><br> <img src="https://img-blog.csdnimg.cn/2020022415225595.png" alt="Navigating to current location (&quot;/path&quot;) is not allowed"></p> <h1><a id="_4"></a>错误原因</h1> <p>控制台出现以上这种 <code>Navigating to current location ("/path") is not allowed</code> 时，是因为重复进入了相同路由。</p> <h1><a id="_7"></a>错误演示</h1> <p>为了演示报错，用<code>vue-cli</code>重新构建了一个新的项目，只编写了一个<code>按钮</code>一个<code>input</code>。<br> code：</p> <pre><code class="prism language-html"><span class="token comment">&lt;!-- vue模板代码 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gotoHandle<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>测试路由跳转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>routeName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre> <pre><code class="prism language-javascript"><span class="token comment">// 路由跳转代码</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      routeName<span class="token punctuation">:</span> <span class="token string">\'\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token function">gotoHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>routeName<span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre> <p>动图演示<br> <img src="https://img-blog.csdnimg.cn/20200224153003425.gif" alt="Navigating to current location (&quot;/path&quot;) is not allowed"><br> 在重复进入相同路由时（不论是通过路径，还是路由名称进入），会提示不允许导航到当前位置（<code>path</code>）， 就像上面的例子进入路由名为<code>About</code>的路由时，提示的是<code>path: "/about"</code>，<font size="2" color="#d2413e">Navigating to current location ("/about") is not allowed</font>。这是因为跳转的方法错误时，未捕获错误处理，因此直接输出了错误信息。</p> <h1><a id="_37"></a>解决方法</h1> <h2><a id="_38"></a>方法一</h2> <p>直接在跳转报错的那个地方加上<code>.catch(error =&gt; error)</code></p> <pre><code class="prism language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      routeName<span class="token punctuation">:</span> <span class="token string">\'\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token function">gotoHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>routeName<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error <span class="token operator">=&gt;</span> error<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre> <h2><a id="_55"></a>方法二</h2> <p>为跳转错误的方法全局加上错误捕获。</p> <pre><code class="prism language-javascript"><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">\'vue-router\'</span>\n\n<span class="token keyword">const</span> routerPush <span class="token operator">=</span> VueRouter<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push\nVueRouter<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">push</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>location<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> routerPush<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error <span class="token operator">=&gt;</span> error<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre> <p>以上代码在<code>main.js</code>，或者<code>router/index.js</code> 下执行，以及<code>new VueRouter</code>之前之后都一样。因为是重置的<code>VueRouter</code>原型对象上的<code>push</code>事件，给原型对象的<code>push</code>事件添加上了捕获异常，所以会通过原型链改变所有相关对象。</p> <p><code>replace</code> 方法重复跳转错误与上方类似，把<code>push</code>改成<code>replace</code>就好。</p> <h2><a id="_70"></a>方法三</h2> <p>此方法为建议方法，建议优化跳转逻辑，避免重复跳转相同路由。</p> <p>以上如果错误或疏漏，欢迎指正。</p> </div> </body> </html> ';n.exports=a},feb0:function(n,s){var a='<!DOCTYPE html> <html> <head> <meta charset="utf-8"> <meta name="viewport" content="width=device-width,initial-scale=1"> <title>vue中 iframe 引入 本地静态html文件，vue-cli2与vue-cli3引用的差异</title> <link rel="stylesheet" href="https://stackedit.io/style.css"/> </head> <body class="stackedit"> <div class="stackedit__html"><p></p><div class="toc"><h3>vue中 iframe 引入 本地静态html文件，vue-cli2与vue-cli3引用的差异。</h3><ul><li><a href="#_1">引言</a></li><li><a href="#Vuecli_20__3">Vue-cli 2.0 构建的项目引用</a></li><li><a href="#Vuecli_30__16">Vue-cli 3.0 构建的项目引用</a></li><li><a href="#_29">不考虑项目构建版本的方法</a></li><ul><li><a href="#1webpack_30">1.如果你是webpack工程师，你就自己配置打包方式。</a></li><li><a href="#2require__33">2.使用require() 引入</a></li></ul><li><a href="#_107">总结</a></li></ul></div><p></p> <h1><a id="_1"></a>引言</h1> <p>  在写个人网站的时候，需要用到 <code>iframe</code> 引用本地静态的 <code>html</code> 文件，发现引用方式的一些差异，在此分享一下。</p> <h1><a id="Vuecli_20__3"></a>Vue-cli 2.0 构建的项目引用</h1> <p>在vue-cli 2.0 构建的项目中，如果要使用 <code>iframe</code> 引用本地的静态 <code>html</code> 文件，静态文件需要放置在和 <code>src</code> 同级的文件加夹 <code>static</code> 中。<br> 如下图：<br> <img src="https://img-blog.csdnimg.cn/20200508171508313.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1ZHlfemhvdQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 在使用 <code>iframe</code> 的地方直接写 <strong>“相对路径”</strong> 就行，如下图：<br> <img src="https://img-blog.csdnimg.cn/20200508172317775.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1ZHlfemhvdQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 这里还是需要解释一下，这里的路径，在打包后不会变化。都是根据打包后的路径查找静态文件，因此上方用 <strong>“相对路径”</strong> 描述并不准确，而是打包后的 <strong>“相对路径”</strong>，看下图就明白了。</p> <p>这是 打包后的文件层级关系<br> <img src="https://img-blog.csdnimg.cn/20200508172952787.png" alt="打包后的文件层级关系"><br> 这里我写了很多 <code>../../../</code>，最后发现真实的引用路径还是 <code>http://localhost:8080/static/blog.html</code>，因为向上查找已经到根目录了，所以不管写多少个<code>../</code>，实际路径还是<code>http://localhost:8080/static/blog.html</code>，因此 下方路径直接写 <code>./static/blog.html</code> 也是一样的，根据上方打包后的层级关系对照一下就明白了。<br> <img src="https://img-blog.csdnimg.cn/20200508173105393.png" alt="在这里插入图片描述"></p> <h1><a id="Vuecli_30__16"></a>Vue-cli 3.0 构建的项目引用</h1> <p>在Vue-cli 3.0 构建的项目中使用 <code>iframe</code> 引用本地静态 <code>html</code> 文件，和 2.0基本一样，唯一的区别在于，静态<code>html</code> 文件不是放置在 <code>src</code> 同级的文件夹中，而是放在 <code>public</code> 文件夹下。<br> 如下图：<br> <img src="https://img-blog.csdnimg.cn/20200508174245283.png" alt="在这里插入图片描述"><br> 当然，也可以不用放在 <code>static</code> 文件夹下。<code>public</code> 文件下的文件（包括文件夹），打包后的层级不会发生变化，因此可以自定义名称。<br> 不能改变的是，只能放在<code>public</code> 文件夹下。</p> <p>其它注意点与Vue-cli 2.0 构建的项目相同，就不一一赘述。</p> <p>那有没有随意放在其它层级还能使用的方法，而且不需要考虑Vue-cli 2.0 还是 3.0 构建的项目，其实也是有的。</p> <br> <h1><a id="_29"></a>不考虑项目构建版本的方法</h1> <h2><a id="1webpack_30"></a>1.如果你是webpack工程师，你就自己配置打包方式。</h2> <p>好吧，这是废话</p> <h2><a id="2require__33"></a>2.使用require() 引入</h2> <p><code>html</code> 文件我放在和 <code>vue</code> 文件同级，如下：<br> <img src="https://img-blog.csdnimg.cn/20200508180542790.png" alt="在这里插入图片描述"><br> <code>Home.vue</code> 中这样写</p> <pre><code class="prism language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>home<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clickHandle<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>switch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iframe<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ifIframe<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n</code></pre> <pre><code class="prism language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> <span class="token string">"Home"</span><span class="token punctuation">,</span>\n  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      ifIframe<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      iframeData<span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./blog.html"</span><span class="token punctuation">)</span>\n      <span class="token comment">// src: "./static/blog.html"</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>iframe<span class="token punctuation">.</span>contentDocument<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>iframeData<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token function">clickHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 1.通过DOM操作切换数据源信息</span>\n      <span class="token comment">// 因可能在iframe内部点击了外链信息，src会发生改变，可能就不属于同源。不同源外部就无法操作iframe内部DOM，因此使用v-if 删除DOM后再显示清空src信息</span>\n      <span class="token comment">// 也可以使用其他方式清除，比如用v-bind 绑定src</span>\n      <span class="token comment">// this.ifIframe = false;</span>\n\n      <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>iframe<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">// this.ifIframe = true;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>iframe<span class="token punctuation">.</span>contentDocument<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./second.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token comment">// 2.切换路径促使切换数据</span>\n      <span class="token comment">// this.src = "./static/second.html";</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre> <p>上面就是通过 <code>require()</code> 获取到文件，再给 <code>iframe</code> 的 <code>contentDocument.documentElement.innerHTML</code> 赋值。</p> <p>这种方式有一点问题就是，不同源的 <code>iframe</code> 无法操作内部 <code>Dom</code> 信息，所以可以使用 <code>removeAttribute</code> 删除 <code>src</code> 再赋值，上方<code>code</code> 中也有描述。</p> <p>使用这种方式还需要安装<code>html-loader</code> 插件，不然<code>require()</code> 引入的文件无法解析。</p> <p>使用命令安装：</p> <pre><code class="prism language-bash"><span class="token function">npm</span> i html-loader --save-dev\n</code></pre> <p>再在 <code>vue.config.js</code> 配置，没有这个文件的就自己新建一个，放在最外层。</p> <pre><code class="prism language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  chainWebpack<span class="token punctuation">:</span> config <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    config<span class="token punctuation">.</span>module\n      <span class="token punctuation">.</span><span class="token function">rule</span><span class="token punctuation">(</span><span class="token string">"html"</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token regex">/\\.html$/</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"html-loader"</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">loader</span><span class="token punctuation">(</span><span class="token string">"html-loader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre> <h1><a id="_107"></a>总结</h1> <p>好了，以上就是在vue 项目使用iframe 引用 本地静态 <code>html</code> 文件的方法。</p> <p>为了大家更加实际的体会，上方的两个例子写了一个demo 上传到github上了，上面看不懂的，可以直接下载例子参考。</p> <p><a href="https://github.com/rudyLittleLove/vue-cli2.0-iframe-loadhtml">vue-cli2.0 构建的项目使用iframe 引用本地静态html文件的demo</a><br> <a href="https://github.com/rudyLittleLove/vue-cli3.0-iframe-loadhtml">vue-cli3.0 构建的项目使用iframe 引用本地静态html文件的demo</a></p> </div> </body> </html> ';n.exports=a}}]);
//# sourceMappingURL=chunk-0b84991c.e7857eaf.js.map